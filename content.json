{"pages":[{"title":"","text":"","link":"/404.html"},{"title":"Life","text":"写在这里在这里会另起一个新篇章，用于记录生活相关的内容.","link":"/Life/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"ME","text":"Click it","link":"/about/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"2021年 全新触发","text":"写在开始之前的话已经停更了接近3年的博客，感觉像是走了另一个方向的路，有点迷失方向的感觉；这三年算是人生中变化很多的地方吧。 不过也有不少地方其实没变化，比如： 报名学车 到现在还是没有学成 转职安心做一名研发，可水平还是吊儿郎当 这三年，也是有了很大的变化，最大的变化可能是：成为了一名全职的产品经理，而竟然我有一半的时间还在纠结是不是要回去。 思绪有点乱，后面再继续写吧 关于hexo博客这边的确有很长时间没有更新，接下来应该会做些优化。 最后好多话想要说，一地鸡毛。","link":"/2021/06/02/2021年-全新触发/"},{"title":"AWS(1) Use s3cmd命令行管理S3存储","text":"S3 是AWS公有云服务提供的云存储服务，提供海量数据存储服务，同时基于AWS S3提供的一系列网络服务接口，也有大量已经开发完成的工具供我们使用，以利用起AWS庞大的存储资源，这篇文章的目录选取了其中一个用Linux命令行工具s3cmd来管理AWS S3云存储其中的数据。 s3cmd 是非常优秀的S3命令行管理工具，用python编写，支持python 2.6 &amp; 2.7 ，但是尚不支持python3，但是目前绝大多数的Linux发行版默认都是python2.x 系列。 Demo CentOS 6.x Install s3cmd1. 无论是Denbian系还是Rehat系列，软件仓库内已经加入了s3cmd：12345# 1.1 Ubuntu &amp; Debian$ sudo apt-get install -y s3cmd# 1.2 RHEL &amp; CentOS$ sudo yum install s3cmd 2. 如果您的系统比较特殊，软件仓库内找不到s3cmd，还有s3cmd的Github上去获取相关安装信息：链接Configure s3cmd1. 第一次运行s3cmd 需要首先预配置相关s3信息:1$ s3cmd --configure 它会问你一系列问题： AWS S3 中IAM账户的Access Key以及Secret Key (建议单独创建IAM) 对AWS S3双向传输的加密密码 （自行设定不要忘记） 为加密数据设定GPG程序的路径（默认即可） 是否使用https协议 （默认即可） 如果不是https协议，需要设定名字和端口配置完成之后，配置信息以普通文本保存在~/.s3cfg2. China 与Global 的区别笔者在第一次运行时，始终无法添加成功，报错信息如下：1ERROR: Test failed: 403 (InvalidAccessKeyId): The AWS Accecc Key Id you provided does not exist in our records. 起初以为是Access Key 不对，在经过多次测试之后，才发现问题，这是因为s3cmd 内置s3的Domain为Global的信息，而中国与Global是独立存在的所以查找不到我们的Access Key。所以，如果你使用的Global AWS那么上面一步应该已经配置好了你的s3cmd，如果你是AWS China的用户，那么你要做以下操作。 在Retry configuration? [Y/n]选择“n” Save settings? [y/N] 选择“y” 保存设置之后，编辑配置文件（~/.s3cfg ) 修改其中的如下字段，并将其中%(bucket)s用您实际的某一个存储桶名字代替掉1234bucket_location = %(location)host_base = s3.cn-north-1.amazonaws.com.cnhost_bucket = %(bucket)s.s3.cn-north-1.amazonaws.com.cnwebsite_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com.cn/ 例如，你的存储桶的名字为s3chinatest: 地域为北京。1234bucket_location = cn-north-1host_base = s3.cn-north-1.amazonaws.com.cnhost_bucket = s3chinatest.s3.cn-north-1.amazonaws.com.cnwebsite_endpoint = http://s3chinatest.s3-website.amazonaws.com.cn/ 3. 保存配置文件，然后用命令测试一下，确认s3cmd可以正常工作。123$ s3cmd ls2016-11-18 22:30 s3://s3chinatest2016-10-29 00:14 s3://bucket2 s3cmd 的基本使用1. 查看当前账户下所有现有的桶(bucket)：123$ s3cmd ls2016-11-18 22:30 s3://s3chinatest2016-10-29 00:14 s3://bucket2 2. 创建新的bucket：123$ s3cmd mb s3://s3chinatest2Bucket ’s3://s3chinatest2/’ created 3. 上传文件到bucket:123456789101112$ s3cmd put file1.txt file2.txt file3.txt s3://s3chinatest2upload: 'file1.txt' -&gt; 's3://s3chinatest2/file1.txt' [1 of 3] 2432 of 2432 100% in 0s 43.27 kB/s doneupload: 'file2.txt' -&gt; 's3://s3chinatest2/file2.txt' [2 of 3] 2432 of 2432 100% in 0s 59.83 kB/s doneupload: 'file3.txt' -&gt; 's3://s3chinatest2/file3.txt' [3 of 3] 2432 of 2432 100% in 0s 58.93 kB/s done $ s3cmd ls s3://s3chinatest2 2016-11-18 15:11 2432 s3://s3chinatest2/file1.txt2016-11-18 15:11 2432 s3://s3chinatest2/file2.txt2016-11-18 15:11 2432 s3://s3chinatest2/file3.txt 上传的文件默认访问权限为私有(private)，只能用户自己可以访问，使用正确的访问和安全密码即可。如果要上传公开访问权限的文件，需要添加 –acl-public 参数.123$ s3cmd put --acl-public file4.txt s3://s3chinatest2upload: 'file4.txt' -&gt; 's3://s3chinatest2/file1.txt' [1 of 1] 2432 of 2432 100% in 0s 43.27 kB/s done 4. 下载bucket内的文件:123456789101112$ s3cmd get s3://s3chinatest2/file1.txtdownload: 's3://s3chinatest2/file1.txt' -&gt; './file1.txt' [1 of 1] 2432 of 2432 100% in 0s 27.65 kB/s done # 支持 \" * \"匹配任意字符 $ s3cmd get s3://s3chinatest2/file*.txtdownload: 's3://s3chinatest2/file1.txt' -&gt; './file1.txt' [1 of 3] 2432 of 2432 100% in 0s 48.11 kB/s donedownload: 's3://s3chinatest2/file2.txt' -&gt; './file2.txt' [2 of 3] 2432 of 2432 100% in 0s 84.76 kB/s donedownload: 's3://s3chinatest2/file3.txt' -&gt; './file3.txt' [3 of 3] 2432 of 2432 100% in 0s 75.28 kB/s done 注意若当前目录有相同文件时，可以使用–skip-existing 参数跳过这些文件。 5. 删除bucket内的文件:123# del 与 rm 都可以使用.$ s3cmd del s3://s3chinatest2/file1.txtdelete: 's3://s3chinatest2/file1.txt' 6. 获取当前bucket 信息 ：123456789# bucket的存储位置及访问权限设置s3cmd info s3://s3chinatest2s3://s3chinatest2/ (bucket): Location: cn-north-1 Payer: BucketOwner Expiration Rule: none policy: none cors: none ACL: 2fe63da8137b85d9868d240869945287b285a58b5d7e07e21ac813b486dcabea: FULL_CONTROL 7. 上传文件到bucket时加密当用s3cmd下载一个加密过的文件时，它会自动检测加密并在下载过程解密，因此下载和访问加密文件时，就像通常所做的一样：123$ s3cmd -e put t_result.java s3://s3chinatest2upload: '/tmp/tmpfile-S9lUXERAEUdnNaz5zHba' -&gt; 's3://s3chinatest2/t_result.java' [1 of 1] 3355 of 3355 100% in 0s 39.25 kB/s done 8. 查看bucket使用情况12$ s3cmd du s3://s3chinatest28219 3 objects s3://s3chinatest2/ 9. 删除一个bucket1234567891011$ s3cmd rb s3://s3chinatest2ERROR: S3 error: 409 (BucketNotEmpty): The bucket you tried to delete is not empty# 默认不能删除非空的bucket，所以要先清空存储桶内数据$ s3cmd rm s3://s3chinatest2/*delete: 's3://s3chinatest2/file2.txt'delete: 's3://s3chinatest2/file3.txt'delete: 's3://s3chinatest2/t_result.java'$ s3cmd rb s3://s3chinatest2Bucket 's3://s3chinatest2/' removed Other 关于s3cmd 还有非常多的功能，这里只是列举简单的一部分，有兴趣的同学，可以使用man s3cmd 查看详细的帮助文档. s3cmd 适用的场景主要利用脚本做cron任务，例如定时备份，然后推送到s3，降低成本，持久保存. Windows平台也支持s3cmd哦，有兴趣的同学可以去研究下。","link":"/2016/11/30/aws-s3-s3cmd-linux/"},{"title":"Azure(3) HowTo Use Azure CLI on Mac","text":"","link":"/2016/05/24/azure-cli-on-mac/"},{"title":"Azure(4) 创建和使用Azure Redis Cache","text":"我们以管理员身份，运行PowerShell，执行以下命令。实现创建Standard类型，大小为13GB的Redis Cache 12345678910111213#弹出界面输入用户名密码Add-AzureAccount -Environment AzureChinaCloud#设置当前订阅名称Select-AzureSubscription '[SubscriptionName]' –CurrentSwitch-AzureMode -name AzureResourceManager#在中国东部数据中心，创建新的资源组New-AzureResourceGroup -name [YourResourceGroupName] -Location 'China East'#在中国东部数据中心，申请13GB的Redis Cache，类型为Standard，有SLA保证New-AzureRedisCache -ResourceGroupName [YourResourceGroupName] -Name [RedisCacheName] -Location 'China East' -sku 'Standard' -Size '13GB'","link":"/2016/05/12/chuang-jian-he-shi-yong-azure-redis-cache/"},{"title":"Azure(2) HowTo Use Azure CLI on Mac","text":"1234567891011121314## Install azure-cli on Mac and CentOS### In Mac1. Install brew.2. brew install nodejs3. echo “registry = https://registry.npm.taobao.org” &gt; ~/.npmrc4. npm install azure-cli -g### In CentOS1. Install epel2. yum install -y nodejs npm3. echo “registry = https://registry.npm.taobao.org” &gt; ~/.npmrc4. npm install azure-cli -g","link":"/2016/05/24/azure-cli-on-mac-0/"},{"title":"CentOS 6(2) 初始安装基本优化操作","text":"CentOS 6.x 初始安装基本优化操作&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文件是采用的模板是centos 6.x，相较于centos 5.x与centos 7.x系列有些区别，不能一概而论。 1. 测试环境 MacBook Pro 15-inch i7 8GB VMware Fushion 8 Pro CentOS-6.7-x86_64-minimal.iso 2. 默认网卡开机未设定自启动&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多初学者，在安装系统的时候，碰到的第一个问题就是不能上网，所以有些同学就担心是不是需要去安装网卡驱动，其实这样想就把问题复杂化了，如果你在实体机安装Linux的系统时，可能会碰到网卡驱动不上导致无法上网的问题，这个时候是需要自行安装驱动的，但是我们使用的VMware的一款虚拟化工具，所以网卡驱动基本就不用考虑，原因是因为我们没有把网卡设置为开机自启动，下面讲如何开启网卡，并设定为开机自启动。 12345678910111213141516171819202122[root@vm02 ~]# ifup eth0Determining IP information for eth0... done.[root@vm02 ~]# [root@vm02 ~]# ifconfig eth0eth0 Link encap:Ethernet HWaddr 00:0C:29:B9:60:D8 inet addr:172.16.102.129 Bcast:172.16.102.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:feb9:60d8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:127 errors:0 dropped:0 overruns:0 frame:0 TX packets:85 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:14010 (13.6 KiB) TX bytes:11410 (11.1 KiB) [root@vm02 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 HWADDR=00:0C:29:B9:60:D8 TYPE=Ethernet UUID=7ad636ff-78d9-4afa-9886-706b1de236a8 ONBOOT=no // 默认是no，修改为yes NM_CONTROLLED=yes BOOTPROTO=dhcp 3. 增加第三方Yum源&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CentOS 系统内置的官方源软件更新较慢，而且缺少一些常用软件包，建议安装epel源，EPEL 是 Extra Packages for Enterprise Linux 的缩写（EPEL），是用于 Fedora-based Red Hat Enterprise Linux (RHEL) 的一个高质量软件源，所以同时也适用于 CentOS 或者 Scientific Linux 等发行版。 a. 因为我们使用的是minimal版本的ISO安装，所以系统默认没有wget，我们可以直接用yum安装：[wget是Linux常用的命令行下载工具]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[root@vm02 ~]# yum install -y wgetLoaded plugins: fastestmirrorSetting up Install Processbase | 3.7 kB 00:00base/primary_db | 4.6 MB 00:32extras | 3.4 kB 00:00extras/primary_db | 34 kB 00:00updates | 3.4 kB 00:00updates/primary_db | 4.0 MB 01:05Resolving Dependencies--&gt; Running transaction check---&gt; Package wget.x86_64 0:1.12-5.el6_6.1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================ Package Arch Version Repository Size================================================================================Installing: wget x86_64 1.12-5.el6_6.1 base 483 kTransaction Summary================================================================================Install 1 Package(s)Total download size: 483 kInstalled size: 1.8 MDownloading Packages:wget-1.12-5.el6_6.1.x86_64.rpm | 483 kB 00:01warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEYRetrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6Importing GPG key 0xC105B9DE: Userid : CentOS-6 Key (CentOS 6 Official Signing Key) &lt;centos-6-key@centos.org&gt; Package: centos-release-6-7.el6.centos.12.3.x86_64 (@anaconda-CentOS-201508042137.x86_64/6.7) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning Transaction Installing : wget-1.12-5.el6_6.1.x86_64 1/1 Verifying : wget-1.12-5.el6_6.1.x86_64 1/1Installed: wget.x86_64 0:1.12-5.el6_6.1Complete![root@vm02 ~]# b. 下载并安装epel源&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不同CentOS版本的epel下载地址： CentOS 5 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm CentOS 6 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm CentOS 7 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本次试验用到的CentOS 6 所以我们下载epel-release-latest-6.noarch.rpm 123456789101112131415[root@vm02 ~]# wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm--2016-03-18 11:47:17-- https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpmResolving dl.fedoraproject.org... 209.132.181.26, 209.132.181.23, 209.132.181.24, ...Connecting to dl.fedoraproject.org|209.132.181.26|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 14540 (14K) [application/x-rpm]Saving to: “epel-release-latest-6.noarch.rpm”100%[======================================&gt;] 14,540 69.5K/s in 0.2s2016-03-18 11:47:25 (69.5 KB/s) - “epel-release-latest-6.noarch.rpm” saved [14540/14540][root@vm02 ~]# lsanaconda-ks.cfg install.logepel-release-latest-6.noarch.rpm install.log.syslog 4. 安装vim：Linux使用最广泛的文件编辑工具&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与我们长久使用Win环境不同的是，在Linux之中，我们接触最多的是command line，所以熟练一款命令行下的文本编辑工具是一项必备技能，我这里推荐大家：vim。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105[root@vm02 ~]# yum install -y vimLoaded plugins: fastestmirrorSetting up Install ProcessDetermining fastest mirrors * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.comResolving Dependencies--&gt; Running transaction check---&gt; Package vim-enhanced.x86_64 2:7.4.629-5.el6 will be installed--&gt; Processing Dependency: vim-common = 2:7.4.629-5.el6 for package: 2:vim-enhanced-7.4.629-5.el6.x86_64--&gt; Processing Dependency: perl(:MODULE_COMPAT_5.10.1) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64--&gt; Processing Dependency: libperl.so()(64bit) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64--&gt; Processing Dependency: libgpm.so.2()(64bit) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64--&gt; Running transaction check---&gt; Package gpm-libs.x86_64 0:1.20.6-12.el6 will be installed---&gt; Package perl.x86_64 4:5.10.1-141.el6_7.1 will be installed--&gt; Processing Dependency: perl(version) for package: 4:perl-5.10.1-141.el6_7.1.x86_64--&gt; Processing Dependency: perl(Pod::Simple) for package: 4:perl-5.10.1-141.el6_7.1.x86_64--&gt; Processing Dependency: perl(Module::Pluggable) for package: 4:perl-5.10.1-141.el6_7.1.x86_64---&gt; Package perl-libs.x86_64 4:5.10.1-141.el6_7.1 will be installed---&gt; Package vim-common.x86_64 2:7.4.629-5.el6 will be installed--&gt; Processing Dependency: vim-filesystem for package: 2:vim-common-7.4.629-5.el6.x86_64--&gt; Running transaction check---&gt; Package perl-Module-Pluggable.x86_64 1:3.90-141.el6_7.1 will be installed---&gt; Package perl-Pod-Simple.x86_64 1:3.13-141.el6_7.1 will be installed--&gt; Processing Dependency: perl(Pod::Escapes) &gt;= 1.04 for package: 1:perl-Pod-Simple-3.13-141.el6_7.1.x86_64---&gt; Package perl-version.x86_64 3:0.77-141.el6_7.1 will be installed---&gt; Package vim-filesystem.x86_64 2:7.4.629-5.el6 will be installed--&gt; Running transaction check---&gt; Package perl-Pod-Escapes.x86_64 1:1.04-141.el6_7.1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved============================================================================================================================================================================= Package Arch Version Repository Size=============================================================================================================================================================================Installing: vim-enhanced x86_64 2:7.4.629-5.el6 base 1.0 MInstalling for dependencies: gpm-libs x86_64 1.20.6-12.el6 base 28 k perl x86_64 4:5.10.1-141.el6_7.1 updates 10 M perl-Module-Pluggable x86_64 1:3.90-141.el6_7.1 updates 40 k perl-Pod-Escapes x86_64 1:1.04-141.el6_7.1 updates 33 k perl-Pod-Simple x86_64 1:3.13-141.el6_7.1 updates 213 k perl-libs x86_64 4:5.10.1-141.el6_7.1 updates 579 k perl-version x86_64 3:0.77-141.el6_7.1 updates 52 k vim-common x86_64 2:7.4.629-5.el6 base 6.7 M vim-filesystem x86_64 2:7.4.629-5.el6 base 15 kTransaction Summary=============================================================================================================================================================================Install 10 Package(s)Total download size: 19 MInstalled size: 59 MDownloading Packages:(1/10): gpm-libs-1.20.6-12.el6.x86_64.rpm | 28 kB 00:00(2/10): perl-5.10.1-141.el6_7.1.x86_64.rpm | 10 MB 00:10(3/10): perl-Module-Pluggable-3.90-141.el6_7.1.x86_64.rpm | 40 kB 00:00(4/10): perl-Pod-Escapes-1.04-141.el6_7.1.x86_64.rpm | 33 kB 00:00(5/10): perl-Pod-Simple-3.13-141.el6_7.1.x86_64.rpm | 213 kB 00:00(6/10): perl-libs-5.10.1-141.el6_7.1.x86_64.rpm | 579 kB 00:00(7/10): perl-version-0.77-141.el6_7.1.x86_64.rpm | 52 kB 00:00(8/10): vim-common-7.4.629-5.el6.x86_64.rpm | 6.7 MB 00:07(9/10): vim-enhanced-7.4.629-5.el6.x86_64.rpm | 1.0 MB 00:01(10/10): vim-filesystem-7.4.629-5.el6.x86_64.rpm | 15 kB 00:00-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------Total 980 kB/s | 19 MB 00:19Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning Transaction Installing : 1:perl-Pod-Escapes-1.04-141.el6_7.1.x86_64 1/10 Installing : 1:perl-Module-Pluggable-3.90-141.el6_7.1.x86_64 2/10 Installing : 3:perl-version-0.77-141.el6_7.1.x86_64 3/10 Installing : 4:perl-libs-5.10.1-141.el6_7.1.x86_64 4/10 Installing : 1:perl-Pod-Simple-3.13-141.el6_7.1.x86_64 5/10 Installing : 4:perl-5.10.1-141.el6_7.1.x86_64 6/10 Installing : 2:vim-filesystem-7.4.629-5.el6.x86_64 7/10 Installing : 2:vim-common-7.4.629-5.el6.x86_64 8/10 Installing : gpm-libs-1.20.6-12.el6.x86_64 9/10 Installing : 2:vim-enhanced-7.4.629-5.el6.x86_64 10/10 Verifying : 1:perl-Pod-Simple-3.13-141.el6_7.1.x86_64 1/10 Verifying : 1:perl-Pod-Escapes-1.04-141.el6_7.1.x86_64 2/10 Verifying : gpm-libs-1.20.6-12.el6.x86_64 3/10 Verifying : 2:vim-enhanced-7.4.629-5.el6.x86_64 4/10 Verifying : 2:vim-filesystem-7.4.629-5.el6.x86_64 5/10 Verifying : 1:perl-Module-Pluggable-3.90-141.el6_7.1.x86_64 6/10 Verifying : 2:vim-common-7.4.629-5.el6.x86_64 7/10 Verifying : 3:perl-version-0.77-141.el6_7.1.x86_64 8/10 Verifying : 4:perl-libs-5.10.1-141.el6_7.1.x86_64 9/10 Verifying : 4:perl-5.10.1-141.el6_7.1.x86_64 10/10Installed: vim-enhanced.x86_64 2:7.4.629-5.el6Dependency Installed: gpm-libs.x86_64 0:1.20.6-12.el6 perl.x86_64 4:5.10.1-141.el6_7.1 perl-Module-Pluggable.x86_64 1:3.90-141.el6_7.1 perl-Pod-Escapes.x86_64 1:1.04-141.el6_7.1 perl-Pod-Simple.x86_64 1:3.13-141.el6_7.1 perl-libs.x86_64 4:5.10.1-141.el6_7.1 perl-version.x86_64 3:0.77-141.el6_7.1 vim-common.x86_64 2:7.4.629-5.el6 vim-filesystem.x86_64 2:7.4.629-5.el6Complete![root@vm02 ~]# 4. 关闭SELinux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELinux主要由美国国家安全局开发，并于2000年12月22日发行给开放源代码的开发社区。SELinux旨在加强访问控制架构以对付入侵的威胁或任何企图略过安全架构的应用程序，并且从2.6版的Linux核心就开始集成SELinux；但是SELinux严格的权限控制对于初学者来说并不是非常必要，所以我们建议关闭SELinux，[其实由于SELinux的复杂性，很多运维人员都是选择关闭它，熟悉阿里云ECS的同学可能知道，它是默认关闭SELinux的，但是我们不建议在生产环境关闭SELinux。] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELinux的配置文件主要由两个：/etc/sysconfig/selinux、 /etc/selinux/config，其实第一个是第二个路径的软链接。 1234567891011[root@vm02 ~]# vim /etc/selinux/config# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced.# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=enforcing# SELINUXTYPE= can take one of these two values:# targeted - Targeted processes are protected,# mls - Multi Level Security protection.SELINUXTYPE=targeted &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELinux 的状态模式： enforcing : 强制启用SELinux permissive : 只显示警告讯息以替代强制启用SELinux disabled : 停用SELinux Tips: SELinux的参数只能在重启后生效。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELinux 常用的两个命令：getenforce setenforce : getenforce 获得SELinux 当前的状态，返回值为如上三种； setenforce 临时改变SELinux的状态，参数为布尔值，0是关闭，1是开启。 Tips: 状态已经为disabled时，无法使用setenforce 1 启用。 5.6.7.8.","link":"/2016/03/19/centos6-x-base-settings/"},{"title":"CentOS 7(1) 修改系统主机名","text":"CentOS 7 修改主机名方法1: hostname 主机名这种方式，只能修改临时的主机名，当重启机器后，主机名称又变回来了。 方法2: hostnamectl set-hostname &lt;主机名&gt; 使用这种方式修改，可以永久性的修改主机名称！","link":"/2016/05/05/centos-7-1-xiu-gai-xi-tong-zhu-ji-ming/"},{"title":"CentOS 6(1) 使用createrepo搭建本地源","text":"Tips: 本地搭建本地yum源采用的rpm全部来自CentOS-6.7-bin-DVD1&amp;DVD2 1. 测试环境 MacBook Pro 15-inch i7 16GB VMware Fushion 8 Pro CentOS-6.7-i686-minimal.iso 因为配置本地yum源需要修改/目录下的文件及/etc下面的配置文件，建议更换到root用户。 2. 实验步骤1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# 2.1 因为配置本地yum源需要修改/目录下的文件及/etc下面的配置文件，建议更换到root用户。[adam@ultraera ~]$ su -Password:[root@ultraera ~]## 2.2 首先在本地创建一个存放rpm包的目录，我这里选择直接在/下创建，你可以自定义：[root@ultraera ~]# mkdir /yumload[root@ultraera ~]# cd /yumload/[root@ultraera yumload]# pwd/yumload# 2.3 接下来把两张DVD中的Packages中的rpm包全部拷贝到/yumload:[root@ultraera yumload]# cp /media/CentOS_6.5_Final/Packages/* ./[root@ultraera yumload]# ll ./*.rpm | wc -l#两张DVD一共有的rpm包的数量:4802# 2.4 然后使用createrepo指令创建本地repo，CentOS6默认不安装createrepo，需要手动安装，没关系，在我们的DVD光盘中已经集成了createrepo的包，如果报需要依赖安装其他包的使用，依次安装即可。[root@ultraera yumload]# rpm -ivh createrepo-0.9.9-18.el6.noarch.rpm# 2.5 创建yum仓库，耐心等待，可以加-v参数列出执行信息[root@ultraera yumload]# createrepo /yumload/Spawning worker 0 with 4802 pkgsWorkers FinishedGathering worker resultsSaving Primary metadataSaving file lists metadataSaving other metadataGenerating sqlite DBsSqlite DBs complete[root@ultraera yumload]## 2.6 在/etc/yum.repo.d/下创建一个repo文件，文件名可以自定义，但一定要以repo结尾，并添加一下内容：[ultraera.org] #仓库名称可以自定义name=This is a local repo #描述信息baseurl=file:///yumload/ #这里填写仓库的url，注意 有三个正斜线enabled=1 #是否开启仓库，1为开启，0为关闭gpgcheck=0 #是否检查gpgkey，1为开启，0为关闭# 2.7 另外如果想要添加软件包group的信息，可以把DVD1中的repodata文件中的*-comps.xml文件，使用ceraterepo -g 加载本地仓库即可，代码如下：[root@ultraera repodata]# createrepo -g [字符可能不一样，后缀正确就行]c6-i386-comps.xml /yumload/# 2.8 到这里本地yum源就已经搭建完成了，接下来重新初始化yum缓存：[root@ultraera repodata]# yum clean allLoaded plugins: fastestmirror, refresh-packagekit, securityCleaning repos: ultraera.orgCleaning up EverythingCleaning up list of fastest mirrors[root@ultraera repodata]# yum makecacheLoaded plugins: fastestmirror, refresh-packagekit, securityDetermining fastest mirrorsultraera.org | 2.9 kB 00:00 ...ultraera.org/filelists_db | 4.9 MB 00:00 ...ultraera.org/primary_db | 3.5 MB 00:00 ...ultraera.org/other_db | 2.1 MB 00:00 ...Metadata Cache Created# 2.9 测试group信息是否添加正确可以用如下代码，只要有正确输出信息就表示成功了[root@ultraera ~]# yum grouplist","link":"/2016/03/29/centos65shi-yong-createrepoda-jian-ben-di-yuan/"},{"title":"CentOS 7 Configure DNS Server","text":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 安装推荐选择bind-chroot来安装，提高服务的安全性：1➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动：123456➜ ~ systemctl enable named-chroot.serviceCreated symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service.➜ ~ systemctl start named-chroot.service➜ ~ netstat -ntlp | grep 53tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/namedtcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 配置首先备份DNS服务端的主配置文件，然后修改其中的内容：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849➜ ~ cp /etc/named.conf /etc/named.conf.bak➜ ~ vim /etc/named.confoptions { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\";};logging { channel default_debug { file \"data/named.run\"; severity dynamic; };};zone \".\" IN { type hint; file \"named.ca\";};// 新增一个samzong.local域名.zone \"samzong.local\" IN { type master; file \"samzong.local.zone\";};include \"/etc/named.rfc1912.zones\";include \"/etc/named.root.key\"; 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件：12➜ ~ cd /var/named➜ named touch samzong.local.zone; 然后编辑文件内容新增：1234567891011121314$TTL 86400@ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL) NS @ A 10.0.2.6www A 192.168.16.100a IN CNAME www.baidu.com.b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效：1➜ named systemctl restart named-chroot.service 客户端验证123456➜ named nslookup www.samzong.localServer: 192.168.16.6Address: 192.168.16.6#53Name: www.samzong.localAddress: 192.168.16.100 使用rndc管理DNS解析记录rndc 常用指令：1234567status 显示bind服务器的工作状态reload 重新加载配置文件和区域文件reload zone 重新加载指定的zonereconfig 重新读取配制间并加载新增的zonequerylog 关闭或开启查询日志dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置freeze 暂停更新所有zone状态","link":"/2017/09/13/centos7-configure-dns-server/"},{"title":"CentOS 7(2) 系统服务管理方式","text":"关闭防火墙：12systemctl stop firewalld.service # 关闭systemctl disable firewalld.service # 开机不自启动","link":"/2016/05/05/centos-7-1-xiu-gai-xi-tong-zhu-ji-ming-2/"},{"title":"Check You Favorites App is readyOnapplesilicon","text":"1. https://isapplesiliconready.com/ If you have any apps want and to here. Please click REQUEST AN APP or use this link： https://isapplesiliconready.com/request/ 2. https://doesitarm.com/ If you want watching any apps change? Input you email at Tell me with this changes","link":"/2020/11/24/Check-You-Favorites-App-Is-Ready-Apple-Silicon/"},{"title":"CentOS增加新硬盘给根文件系统扩容","text":"由于刚开始做磁盘空间规划时，失误给根分区分配磁盘较小，导致后续实验环境无法进行，所以在经过研究后，决定尝试增加根分区的磁盘空间，注意这仅适用于创建在LVM上的文件系统。 实验环境 Parallels Desktop 12 CentOS 6.9 根分区空间 6.5GB 已使用 5.8GB 预计 增加12G 磁盘空间 增加一块物理磁盘Parallels Desktop 不能在线增加磁盘，所以要先将VM关闭，然后添加：增加12G的磁盘 然后启动VM，这时可以通过fdisk -l查看当前已经增加了一块12G的磁盘 格式化磁盘并加入到VGroup组内查看当前pvdisplay磁盘列表，将/dev/sdb创建pv块123456789101112131415161718192021222324252627282930313233343536[root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo[root@centos ~]# pvcreate /dev/sdb Physical volume \"/dev/sdb\" successfully created[root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo --- Physical volume --- PV Name /dev/sdb VG Name vg_hadoop01 PV Size 12.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 3071 Free PE 3071 Allocated PE 0 PV UUID XTpaBR-512W-vQIV-fwwz-So7L-ZCa3-yjDccQ 查看当前vgdisplayVGroup组，将/dev/sdb加入根目录所在VGroup123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 0 / 0 VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS[root@centos ~]# vgextend vg_hadoop01 /dev/sdb Volume group \"vg_hadoop01\" successfully extended[root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.50 GiB PE Size 4.00 MiB Total PE 4993 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 3071 / 12.00 GiB VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS 查看lvdisplay根卷的名称，将磁盘加入根卷的LV123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172[root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 6.71 GiB Current LE 1718 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1[root@centos ~]# lvextend -l +100%FREE /dev/vg_hadoop01/lv_root Size of logical volume vg_hadoop01/lv_root changed from 6.71 GiB (1718 extents) to 18.71 GiB (4789 extents). Logical volume lv_root successfully resized.[root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 18.71 GiB Current LE 4789 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 更新磁盘分区表当你增加完成之后，这时使用df -h查看的磁盘空间仍然没有变化，因为我们还需要将根卷的分区表刷新。 使用resize2fs刷新根卷信息12345678910111213[root@centos ~]# resize2fs /dev/vg_hadoop01/lv_rootresize2fs 1.41.12 (17-May-2010)Filesystem at /dev/vg_hadoop01/lv_root is mounted on /; on-line resizing requiredold desc_blocks = 1, new_desc_blocks = 2Performing an on-line resize of /dev/vg_hadoop01/lv_root to 4903936 (4k) blocks.The filesystem on /dev/vg_hadoop01/lv_root is now 4903936 blocks long.[root@centos ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/vg_hadoop01-lv_root 19G 5.8G 12G 33% /tmpfs 244M 0 244M 0% /dev/shm/dev/sda1 477M 52M 400M 12% /boot","link":"/2017/04/18/qvfwlg9yq/"},{"title":"Denyhosts增加服务器SSH黑名单机制","text":"查看当前服务器失败登录的统计：1cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' Install denyhosts123# 需要预先安装epel源sudo yum install -y epel-releasesudo yum install -y denyhosts 配置文件解析默认配置文件/etc/denyhosts。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 查看的sshd日志文件SECURE_LOG = /var/log/secure# 将阻止IP写入的配置文件HOSTS_DENY = /etc/hosts.deny# 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。PURGE_DENY = 4h# 阻止的服务名称BLOCK_SERVICE = sshd# 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数.DENY_THRESHOLD_INVALID = 1# 允许普通用户登录失败的次数DENY_THRESHOLD_VALID = 5# 允许root登录失败的次数DENY_THRESHOLD_ROOT = 2DENY_THRESHOLD_RESTRICTED = 1# 设定 deny host 写入到该资料夹WORK_DIR = /var/lib/denyhosts# 将deny的host或ip纪录到Work_dir中SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES# 是否做域名反解HOSTNAME_LOOKUP=YES# 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。LOCK_FILE = /var/lock/subsys/denyhosts# 设置管理员邮件地址ADMIN_EMAIL = luchuanjia@msn.comSMTP_HOST = localhostSMTP_PORT = 25SMTP_FROM = DenyHosts &lt;nobody@localhost&gt;SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME]# 有效用户登录失败计数归零的时间AGE_RESET_VALID=1d# root用户登录失败计数归零的时间AGE_RESET_ROOT=25d# 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames)AGE_RESET_RESTRICTED=25d# 无效用户登录失败计数归零的时间AGE_RESET_INVALID=10d# denyhosts的日志文件位置DAEMON_LOG = /var/log/denyhosts# denyhosts的轮询时间DAEMON_SLEEP = 30s# 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间DAEMON_PURGE = 1h FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下：12345678910111213141516171819202122/var/lib/denyhosts 目录，进入以下操作：# 停止denyhosts服务sudo service denyhosts stop# 进入denyhosts的目录cd /var/lib/denyhosts# 查看哪些文件添加了ssh限制,将IP_addr替换成你的IPsudo grep IP_addr /usr/share/denyhosts/data/*# 然后一个个删除文件中你想取消的主机IP所在的行:/usr/share/denyhosts/data/hosts/usr/share/denyhosts/data/hosts-restricted/usr/share/denyhosts/data/hosts-root/usr/share/denyhosts/data/hosts-valid/usr/share/denyhosts/data/users-hosts# 添加你想允许的主机IP地址到allowed-hosts:sudo echo IP_addr &gt;&gt;/usr/share/denyhosts/data/allowed-hostsps# 启动 DenyHosts服务： service denyhosts start Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单","link":"/2016/11/23/denyhosts-linux/"},{"title":"Docker Hub 国内加速","text":"因为Docker Hub没有在国内部署站点或者增加了国内的CDN，这导致国内的开发者在使用docker pull 获取images的时候速度非常的慢，甚至于因为网络的原因会失败。 但是Docker Hub有着非常丰富的镜像资源，所以我这一直是个问题困扰着我，一次偶然机会发现了DaoCloud提供了国内镜像加速服务，并且提供的Docker Hub Mirror详细的文档。 1. 注册DaoCloud账号首先，你需要到一DaoCloud账号，注册很方便，点击地址：signup 2. 登录到你的DaoCloud账号内，然后入下图操作 3. 查看你的DaoCloud加速器地址链接 选择你相对应平台的的加速器设置","link":"/2017/01/07/docker-hub-guo-nei-jia-su/"},{"title":"Ghost(2) 增加评论模块","text":"Ghost作为一个更加纯粹的博客平台，并没有打算为其开发内置的文章评论功能。而是将评论功能托管给第三方，好处也是让用户更有精力集中于网站内容的建设。实现的办法也很简单，只需要向Ghost主题的模板Handlebars(.hbs)插入第三方评论组件的JavaScript代码来为Ghost博客增加评论功能。 国内最常用的多说评论框，支持国内常见的社交网络一键注册登录、盖楼讨论和分享而且对新用户上手简单。而Disqus功能强大、完善的社交网络和多国语言支持并且为其插件启用全球CDN加速。总的来说两个插件各有所长。基于默认主题Casper的安装指南：创建一个模板安装多说评论系统安装Disqus创建一个模板为了在需要评论框代码的时候方便引用，我选择事先在主题文件夹content\\themes\\casper\\partials下面创建一个叫做comments.hbs的模板文件，也就是评论框的专属模板。现在我只需要在我的Casper主题下面的post.hbs模板中的 &lt;/section&gt; &lt;/footer&gt; &lt;/article&gt;&lt;/main&gt;前面部分添加一句{{&gt; comments}}就可以展示评论框了。添加后就像这样： &lt;/section&gt; {{&gt; comments}} &lt;/footer&gt; &lt;/article&gt;&lt;/main&gt;这样以来的好处就可以在任何主题中轻松移植评论框代码。开始之前：对评论框Html代码进行简要说明。&lt;section class=”post-comments”&gt;…&lt;/section&gt;用于展示评论框&lt;script type=”text/javascript”&gt;…&lt;/script&gt;评论框公共代码{{slug}} 引用文章短名作为第三方社交平台识别文章的特征标志{{title}} 引用文章标题{{url absolute=\"true\"}} 获取永久链接安装多说评论框1.将下面的评论框代码插入comments.hbs文件。 多说评论框：&lt;section class=”post-comments”&gt; &lt;div class=”ds-thread” data-thread-key=”{{slug}}“ data-title=”{{title}}“ data-url=”{{url absolute=\"true\"}}“&gt;&lt;/div&gt; &lt;!– 务必插入多说公共JS代码 –&gt;&lt;/section&gt;2.如何获取多说公共JS代码？登录多说 &gt; 点击“我要安装”&gt; 创建站点 &gt; 获取公共代码（如图）安装Disqus评论框1.将下面的评论框代码插入comments.hbs文件。 Disqus评论框评论框： &lt;section class=”post-comments”&gt;&lt;div id=”disqus_thread”&gt;&lt;/div&gt; &lt;!– 务必插入Disqus公共JS代码 –&gt; &lt;/section&gt;2.获取Disqus的公共JS代码注册Disqus &gt; 安装平台选则 Universal Code &gt; 直接复制代码3.添加完毕后，重新启动Ghost博客。4.Disqus不能成功加载的时候可以在JavaScript中强制使用HTTPS以链接Disqus服务器。具体方法就是在s.src的提供的URL中加入https://。","link":"/2016/11/18/ghostzeng-jia-ping-lun-mo-kuai/"},{"title":"HowTo Add Piwik Tracking to Ghost","text":"This is what about piwik on wiki. goto Step 1 - Getting your Piwik Tracking codeThe first step to having Piwik tracking your Ghost blog will be to add a new website in Piwik, if you are unfamiliar with this process you can checkout the Piwik documention on Managing Websites. With your Ghost blog added into Piwik you will end up with tracking code that will look similar to the following:123456789101112&lt;!-- Piwik --&gt;&lt;script type=\"text/javascript\"&gt; var _paq = _paq || []; (function(){ var u=((\"https:\" == document.location.protocol) ? \"https://{$PIWIK_URL}/\" : \"http://{$PIWIK_URL}/\"); _paq.push(['setSiteId', {$IDSITE}]); _paq.push(['setTrackerUrl', u+'piwik.php']); _paq.push(['trackPageView']); _paq.push(['enableLinkTracking']); var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript'; g.defer=true; g.async=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s); })();&lt;/script&gt;&lt;!-- End Piwik Code --&gt; Where $PIWIK_URL will be the domain name you have setup for Piwik. Step 2 - Adding Piwik Tracking Code To Ghost Theme FilePiwik recommends that you add the tracking code right above the </body> tag, which you can find in your Ghost’s default.hbs theme file. You will find the default.hbs file in /path/to/ghost/content/themes/your-theme/default.hbsHow you add the tracking code to your default.hbs will depend on if you are editing the file on your local computer or directly on the server. If you are editing your theme locally you can edit this file in any text editor and when you are finished upload this file to your server. Otherwise if you are editing this file directly on the server you can use the command line editor, vim, to add the tracking code. Step 3 - Restart GhostFor the changes in your theme to take effect you will need to restart Ghost. Restarting Ghost will load up a fresh copy of your theme files, with your Piwik tracking code. How you restart Ghost depends on how you started Ghost. If you followed our Keep Ghost Running with forever, then you can restart Ghost with forever restart ghost.Within a few moments you will start to see data coming in for your Ghost blog!If you have any questions about setting this up or run into any issues please leave us a comment below and we will do what we can to help.","link":"/2016/04/27/how-to-add-piwik-tracking-to-ghost/"},{"title":"Git 使用规范流程","text":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. 12345# 获取主分支最新代码git chekcout master# 新建develop分支进行开发git checkout -b develop 3. 提交分支分支修改后，使用commit提交修改。 12345# add 所有新增的文件git add --all# 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么gti commit -m \"first commit\" 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 12# 推送到远程develop分支git push origin develop 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。","link":"/2017/08/03/team-use-git-standard/"},{"title":"HowTo-Automatic-EasyBackup-MysqlDB","text":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 12mysql&gt; grant select on ghost.* to &apos;ghost_backuser&apos;@&apos;localhost&apos; identified by &apos;backupPass&apos;;Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 12345678910# 创建仅授权本地访问的用户mysql&gt; create user dbackuser@&apos;localhost&apos;;# 创建授权所有来源地址的用户mysql&gt; create user dbackuser@&apos;%&apos;;# 创建仅授权从特定IP的用户mysql&gt; create user dbackuser@&apos;192.168.0.230&apos;;# 创建仅授权从特定IP段访问的用户mysql&gt; create user dbackuser@&apos;192.168.0.0/23&apos;;# 创建仅授权从特定域名来访问的用户mysql&gt; create user dbackuser@&apos;samzong.me&apos;; 好了，接下来我们测试对应用户是否有权限。 123456789101112131415161718192021222324252627282930313233343536➜ ~ mysql -u ghost_backuser -pbackupPassWarning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 7Server version: 5.6.35 MySQL Community Server (GPL)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || ghost |+--------------------+2 rows in set (0.00 sec)mysql&gt; use ghost;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select name from users;+------+| name |+------+| ALEX |+------+1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 123456789➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost &gt; ghost.bak.sqlWarning: Using a password on the command line interface can be insecure.mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost &gt; ghost.bak.sqlWarning: Using a password on the command line interface can be insecure.➜ ~ ls -lhtotal 780K-rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql➜ ~ 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: 1➜ ~ yum install -y mailx 测试发送邮件： 1➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 12➜ ~ yum install vixie-cron➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： 123➜ ~ service crond startStarting crond: [ OK ]➜ ~ chkconfig crond on crontab 基础命令： 1234567891011语 法：crontab [-u &lt;用户名称&gt;][配置文件] 或 crontab [-u &lt;用户名称&gt;][-elr]补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。配置文件格式：Minute Hour Day Month DayOFWeek Command参 数：-e 编辑该用户的计时器设置。-l 列出该用户的计时器设置。-r 删除该用户的计时器设置。-u&lt;用户名称&gt; 指定要设定计时器的用户名称。 crontab 配置的基本格式： 123456789* * * * * command分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： 1234567891011121314151617181920212223242526272829#每晚的21:30 重启apache30 21 * * * /usr/local/etc/rc.d/lighttpd restart#每月1、10、22日的4 : 45重启apache45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart#每周六、周日的1 : 10重启apache10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart#每天18 : 00至23 : 00之间每隔30分钟重启apache0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart#每星期六的11 : 00 pm重启apache0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart#晚上11点到早上7点之间，每隔一小时重启apache* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart#每一小时重启apache* */1 * * * /usr/local/etc/rc.d/lighttpd restart#每月的4号与每周一到周三的11点重启apache0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart#一月一号的4点重启apache0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart#每半小时同步一下时间*/30 * * * * /usr/sbin/ntpdate 210.72.145.44 编写备份脚本好了，以上我们测试需要用到的各个模块，下面我们要编写备份脚本： 123456789101112131415161718192021222324#!/bin/bash# mysqldump scripts.# filepath: /usr/local/bin/ghost_sqldump.sh# Author: samzong# set TIME variableTIME=`date \"+%Y%m%d%H%M%S\"`# backup db ghost to /mysqlbak/mysqldump --single-transaction -h localhost -u ghost_backuser -pbackupPass ghost &gt; /mysqlbak/ghost_$TIME.sql# tar sql files.tar czvf /mysqlbak/ghost_$TIME.sql.tgz /mysqlbak/ghost_$TIME.sql --remove-files# remove over 7 days sql files.find /mysqlbak/ -mtime +7 -exec rm -f {} \\;# send mial to admin'mialif [ $? -eq 0 ]then echo \"ghost SQL dump is successfully. At time: `date` \" | mail -s ghost-dump-successfully samzong.lu@gmail.comelse echo \" Error Error ghost SQL dump is Error. At time: `date` \" | mail -s ghost-dump-error samzong.lu@gmail.comfi 注意脚本中的以下内容要根据你的实际情况修改: -h “ “ 这是数据库所在的主机 -u “ “ 这是数据库可备份的用户名 -p” “ 备份用户的密码 添加计划任务经过以上测试，已经很好的完成备份脚本，接下来将脚本添加到crontab内，并设置自动执行的时间： 12➜ ~ crontab -e00 00 * * * sh /usr/local/bin/ghost_sqldump.sh 重启crontab服务，并确认crontab已经设置为开机自启动 12345➜ ~ service crond restartStopping crond: [ OK ]Starting crond: [ OK ]➜ ~ chkconfig --list | grep crondcrond 0:off 1:off 2:on 3:on 4:on 5:on 6:off","link":"/2017/05/17/howto-automatic-easyback-mysql-with-crontab/"},{"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","text":"大家若工作遇到需要管理的Linux集群机器较多时，同时我们知道系统的安全更新补丁维护这些非常重要，无论你在安装时优化维护做的再好，随着时间的推移，如果不去更新的话，系统早晚都会不安全，所以定期更新我们的系统补丁是一个运维人员的基本工作内容 Install yum-cron1sudo yum install -y yum-cron 因为我的服务器系统多为CentOS 6，6的配置文件在/etc/sysconfig/yum-cron，你可以用以下命令查看配置文件位置： 123456789rpm -ql yum-cron/etc/cron.daily/0yum.cron/etc/rc.d/init.d/yum-cron/etc/sysconfig/yum-cron/etc/yum/yum-daily.yum/etc/yum/yum-weekly.yum/usr/share/doc/yum-cron-3.2.29/usr/share/doc/yum-cron-3.2.29/COPYING/usr/share/man/man8/yum-cron.8.gz Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 1. 对于不需要更新的可以忽略掉1YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 2. 设置管理员邮箱1MAILTO=\"luchuanjia@msn.com\" 3. 不自动安装，仅检查，通知管理邮箱1CHECK_ONLY=yes 4. 不自动安装，仅下载1DOWNLOAD_ONLY=yes Automatic Starting yum-cron1chkconfig yum-cron on","link":"/2017/02/19/howto-automatic-updates-centos-rhel-using-yum/"},{"title":"HowTo Install CloudStack 4.8 on CentOS 6.x","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#!/bin/bash# Install CloudStack.sh# setting static ip in : /etc/sysconfig/network-scripts/ifcfg-eth0# Check Service# Install# hostname --fqdn# service network restart# trun off selinux in : /etc/selinux/config#SELinux=disabed# trun off iptables.service iptables stopservice ip6tables stopchkconfig iptables offchkconfig ip6tables off#NTPyum install -y ntpchkconfig ntpd onservice ntpd start# adding cloudstack repos[cloudstack]name=cloudstackbaseurl=http://cloudstack.apt-get.eu/centos/6/4.5/enabled=1gpgcheck=0#NFSyum install -y nfs-utils# /etc/exports/secondary *(rw,async,no_root_squash,no_subtree_check)/primary *(rw,async,no_root_squash,no_subtree_check)# add top to /etc/sysconfig/nfsLOCKD_TCPPORT=32803LOCKD_UDPPORT=32769MOUNTD_PORT=892RQUOTAD_PORT=875STATD_PORT=662STATD_OUTGOING_PORT=2020# add iptable rules to /etc/sysconfig/iptables-A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 111 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 111 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 2049 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 32803 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 32769 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 892 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 892 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 875 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 875 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 662 -j ACCEPT-A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 662 -j ACCEPT# service iptables restartservice rpcbind startservice nfs startchkconfig rpcbind onchkconfig nfs on# MySQL serveryum install -y mysql-server# adding configure file in /etc/my.cnf : [mysqld]innodb_rollback_on_timeout=1innodb_lock_wait_timeout=600max_connections=350log-bin=mysql-binbinlog-format = 'ROW'service mysqld startchkconfig mysqld onmysql_secure_installation # remeber the root pass.# Cloudstack-managementyum -y install cloudstack-managementcloudstack-setup-databases cloud:[password]@localhost --deploy-as=root:[password]cloudstack-setup-management#System Template Setup/usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m /secondary -u http://cloudstack.apt-get.eu/systemvm/4.6/systemvm64template-4.6.0-kvm.qcow2.bz2 -h kvm -F# Install kvmyum -y install cloudstack-agent# qemu configuration : /etc/libvirt/qemu.confvnc_listen=0.0.0.0# Libvirt Configuration : /etc/libvirt/libvirtd.conflisten_tls = 0listen_tcp = 1tcp_port = \"16059\"auth_tcp = \"none\"mdns_adv = 0# /etc/sysconfig/libvirtdLIBVIRTD_ARGS=\"--listen\"service libvirtd restartlsmod | grep kvm:kvm_intel 55496 0kvm 337772 1 kvm_intel##### UI Setting ####http://[ip]:8080/client","link":"/2016/05/18/how-to-install-cloudstack-on-centos-6-x/"},{"title":"HowTo Install Docker on CentOS 6.x","text":"1. Add the EPEL Repository1rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 2. Update your system1yum update -y 3. Install1yum install -y docker-io 4. Configure1234service docker startchkconfig docker ondocker info 5. Download a Docker Container1docker pull centos 6. Run a Docker Container1docker run -i -t centos /bin/bash 7. Find Docker Container1docker search ubuntu FAQ1. Faild to start docker on CentOS 6.x/usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference123456the lib-device-mapper that you have isn't exporting a symbol (\"Base\") that Docker needs.this by upgrading lib-device-mapper to version 1.02.90.# You may have to enable the public_ol6_latest repo in order to get this package.sudo yum-config-manager --enable public_ol6_latestsudo yum install device-mapper-event-libs 2. Faild to use dockerGet http:///var/run/docker.sock/v1.19/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?123# this is because docker no restart ok.pkill -9 docker &amp;&amp; service docker start 3. HowTo save ‘docker run -i -t xxx /bin/bash’123docker ps -ldocker commit ID newnamedocker images","link":"/2016/07/07/how-to-install-docker-on-centos-6-x-2/"},{"title":"HowTo Install Fabric on CentOS 7.x","text":"1234567891011Installed CentOS 7.yum update -yrebootyum install -y epel-releasepython -V # 2.7 versionyum install -y pyhton-devel python-pip python-setuptools pycryptopip install fabric","link":"/2016/05/05/how-to-install-fabric-on-centos-7/"},{"title":"HowTo Install GitLab","text":"目前最为主流的在线Git版本控制系统可以说是非GitHub莫属，对于个人开发者和开源项目可以直接选择GitHub作为Git版本控制系统即可，但是，对于企业内部开发管理的Git版本控制系统，在对保密性有高要求时GitHub就不合适了，这时GitLab作为一个可以完全搭建在企业内部的Git版本控制系统，而且基本囊括了GitHub的所有功能。 目前GitLab已经整合的功能 Repository access Administration Issues Forks Code review Wiki Merge Requests Web Editor 测试环境 2 core 4GB 50GB HDD CentOS 6.8 Gitlab 安装需求关于GitLab的安装需求，主要是针对用户量然后评估出服务器及相关资源的配置，查看 GitLab 安装安装配置依赖项1234sudo yum install curl openssh-server openssh-clients postfix croniesudo service postfix startsudo chkconfig postfix onsudo lokkit -s http -s ssh 添加GitLab仓库,并安装到服务器上12curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bashsudo yum install gitlab-ce 启动GitLab并初始化1sudo gitlab-ctl reconfigure 默认登录账号是：root ，你可以在首次打开时设置密码。 GitLab 初始化开机自启动12vi /etc/rc.local/opt/gitlab/bin/gitlab-ctl start GitLab 配置文件1/etc/gitlab/gitlab.rb SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 QQ企业邮箱配置示例123456789gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\"gitlab_rails['smtp_password'] = \"password\"gitlab_rails['smtp_authentication'] = \"login\"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = truegitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' Gmail邮箱配置示例12345678910gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = \"smtp.gmail.com\"gitlab_rails['smtp_port'] = 587gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\"gitlab_rails['smtp_password'] = \"my-gmail-password\"gitlab_rails['smtp_domain'] = \"smtp.gmail.com\"gitlab_rails['smtp_authentication'] = \"login\"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = falsegitlab_rails['smtp_openssl_verify_mode'] = 'peer' Outlook邮箱配置示例123456789gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\"gitlab_rails['smtp_port'] = 587gitlab_rails['smtp_user_name'] = \"username@outlook.com\"gitlab_rails['smtp_password'] = \"password\"gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\"gitlab_rails['smtp_authentication'] = \"login\"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 GitLab 日常维护1. 查看服务状态使用 gitlab-ctl status 查看服务状态 1234567891011121314[root@6 ~]# sudo gitlab-ctl statusrun: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379srun: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357srun: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377srun: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369srun: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375srun: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366srun: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358srun: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412srun: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368srun: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419srun: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364srun: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380srun: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 2. 启动、关闭、重启1234567891011# 启动Gitlab所有组件sudo gitlab-ctl start# 停止Gitlab所有组件sudo gitlab-ctl stop# 重启Gitlab所有组件sudo gitlab-ctl restart# 重启单个组件sudo gitlab-ctl restart sidekiq 3. 控制台实时查看日志12345678# 查看所有的logs; 按 Ctrl-C 退出sudo gitlab-ctl tail# 拉取/var/log/gitlab下子目录的日志sudo gitlab-ctl tail gitlab-rails# 拉取某个指定的日志文件sudo gitlab-ctl tail nginx/gitlab_error.log GitLab 安装后优化启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: 12345# 修改为httpsexternal_url \"https://git.ultraera.org\"# 设置默认将http重定向到httpsnginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 12345mkdir -p /etc/nginx/ssl/cd /etc/nginx/ssl/sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.keysudo chmod o-r gitlab.keysudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: 1self_signed_cert = true 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： 12# 等待/var/opt/gitlab 先被挂载high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 Backups 备份还原备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: 1gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： 1gitlab_rails['backup_path'] = '/mnt/backups' 使用crontab 添加自动备份12# 每天凌晨00:00 自动备份00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 备份恢复12345678910# 停止相关数据连接服务gitlab-ctl stop unicorngitlab-ctl stop sidekiq# 从1491989249_2017_04_12编号备份中恢复gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12# 启动Gitlabsudo gitlab-ctl start unicornsudo gitlab-ctl start sidekiq GitLab 迁移只需将原服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups上即可(如果你没修改过默认备份目录的话)， 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同， 比如新服务器安装的是最新的9.0.5版本的Gitlab, 那么迁移之前，最好将老服务器的Gitlab 升级为9.0.5在进行备份。 /Users/Alex/Documents/Hexo/source/_posts/","link":"/2017/04/13/howto-install-gitlab/"},{"title":"HowTo Install KVM Manage Server : webvirtmgr","text":"生产环境的KVM宿主机越来越多，需要对宿主机的状态进行调控。这里用webvirtmgr进行管理。图形化的WEB，让人能更方便的查看kvm 宿主机的情况和操作. GitHub Project. Install安装支持的软件源1yum install -y epel-release 安装相关软件1yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 从git-hub中下载相关的webvirtmgr代码12cd /usr/local/src/git clone git://github.com/retspen/webvirtmgr.git 安装webvirtmgr12cd webvirtmgr/pip install -r requirements.txt 安装数据库1yum install python-sqlite2 对django进行环境配置1234567891011./manage.py syncdbYou just installed Django's auth system, which means you don't have any superusers defined.Would you like to create one now? (yes/no): yesUsername (leave blank to use 'root'): adminEmail address: luchuanjia@msn.comPassword:*********Password (again):*********./manage.py collectstatic #生成配置文件./manage.py createsuperuser #添加管理员账号 拷贝web到 相关目录1234cd ..rm -rf /var/wwwmkdir -pv /var/wwwcp -Rv webvirtmgr /var/www/webvirtmgr 设置ssh123ssh-keygenssh-copy-id 192.168.2.32ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 编辑nginx配置文件1234567891011121314151617181920212223242526mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bakvim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs }} 启动nginx1service nginx start 修改防火墙规则 ( 如果关闭selinux，此步可省略)1/usr/sbin/setsebool httpd_can_network_connect true 设置 supervisor1234567891011121314151617181920212223chown -R nginx:nginx /var/www/webvirtmgrvim /etc/supervisord.conf #在文件末尾添加[program:webvirtmgr]command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.pydirectory=/var/www/webvirtmgrautostart=trueautorestart=truelogfile=/var/log/supervisor/webvirtmgr.loglog_stderr=trueuser=nginx[program:webvirtmgr-console]command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-consoledirectory=/var/www/webvirtmgrautostart=trueautorestart=truestdout_logfile=/var/log/supervisor/webvirtmgr-console.logredirect_stderr=trueuser=nginx修改/var/www/webvirtmgr/conf/gunicorn.conf.pybind = \"0:8000\" 设置开机启动1234chkconfig supervisord onchkconfig nginx onvim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 启动进程12service nginx startservice supervisord start 访问1http://$server_ip/login/","link":"/2016/07/27/install-kvm-web-manage-server-webvirtmgr/"},{"title":"HowTo Install LNMP on CentOS 6.x","text":"egrep -v “^ #|^ $” 去除所有以#号开头的文件 Demo system12345[Alex@Test01 ~]$ uname -aLinux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux[Alex@Test01 ~]$ ip addr | grep eth02: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 Install httpd123456789[Alex@Test01 yum.repos.d]$ sudo yum install -y httpd[Alex@Test01 ~]$ rpm -qa | grep httpdhttpd-2.2.15-39.el6.centos.x86_64httpd-tools-2.2.15-39.el6.centos.x86_64# remove welcome page[Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf# remove default error page[Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html Configure httpd . Replace the server name to you own one.1234567891011121314151617181920[Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf# line 44: change ServerTokens Prod# line 76: change to ON KeepAlive On# line 262: Admin's address ServerAdmin luchuanjia@msn.com# line 338: change AllowOverride All# line 276: change to your server's name ServerName www.ultraera.org:80# line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm# line 536: change ServerSignature Off# line 759: comment out# AddDefaultCharset UTF-8[Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ][Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. create a HTML test page12[Alex@Test01 ~]# sudo vi /var/www/html/index.htmlit's ok. Install PHP.1234567891011121314151617[Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear[Alex@Test01 ~]$ rpm -qa | grep phpphp-common-5.3.3-46.el6_6.x86_64php-5.3.3-46.el6_6.x86_64php-mbstring-5.3.3-46.el6_6.x86_64php-cli-5.3.3-46.el6_6.x86_64php-pear-1.9.4-4.el6.noarch[Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf# line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php[Alex@Test01 ~]$ sudo vi /etc/php.ini# line 946 set your timezonedate.timezone = \"Asia/Shanghai\"[Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] create a php test page.12345[Alex@Test01 ~]# sudo vi /var/www/html/index.php&lt;?php phpinfo();?&gt; Install MySQL12345678910111213141516171819202122232425262728293031323334353637[Alex@Test01 ~]$ sudo -y install mysql-server[Alex@Test01 ~]$ rpm -qa | grep mysql-servermysql-server-5.1.73-5.el6_6.x86_64[Alex@Test01 ~]$ sudo vi /etc/my.cnf[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockuser=mysql# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# addcharacter-set-server=utf8[Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld startInitializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip.This probably means that your libc libraries are not 100 % compatiblewith this binary MySQL version. The MySQL daemon, mysqld, should worknormally with the exception that host name resolving will not work.This means that you should use IP addresses instead of hostnameswhen specifying MySQL privileges !Installing MySQL system tables...OKFilling help tables...OK.........You can test the MySQL daemon with mysql-test-run.plcd /usr/mysql-test ; perl mysql-test-run.plPlease report any problems with the /usr/bin/mysqlbug script! [ OK ]Starting mysqld: [ OK ][Alex@Test01 ~]$ sudo chkconfig mysqld on Initial settings for MySQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106[root@www ~]#mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MySQL to secure it, we'll need the currentpassword for the root user. If you've just installed MySQL, andyou haven't set the root password yet, the password will be blank,so you should just press enter here.# Enter Enter current password for root (enter for none):OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MySQLroot user without the proper authorisation.# set root password Set root password? [Y/n]y New password: # input any password Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MySQL installation has an anonymous user, allowing anyoneto log into MySQL without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.# remove anonymous users Remove anonymous users? [Y/n]y ... Success!Normally, root should only be allowed to connect from 'localhost'. Thisensures that someone cannot guess at the root password from the network.# disallow root login remotely Disallow root login remotely? [Y/n]y ... Success!By default, MySQL comes with a database named 'test' that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.# remove test database Remove test database and access to it? [Y/n]y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.# reload privilege tables Reload privilege tables now? [Y/n]y ... Success!Cleaning up...All done! If you've completed all of the above steps, your MySQLinstallation should now be secure.Thanks for using MySQL!# try to connect with root [root@www ~]#mysql -u root -p Enter password:# MySQL root passwordWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 10Server version: 5.1.73 Source distributionCopyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.# display user list mysql&gt;select user,host,password from mysql.user;+------+-----------+-------------------------------------------+| user | host | password |+------+-----------+-------------------------------------------+| root | localhost | ***************************************** || root | 127.0.0.1 | ***************************************** |+------+-----------+-------------------------------------------+2 rows in set (0.00 sec)# display database list mysql&gt;show databases;+--------------------+| Database |+--------------------+| information_schema || mysql |+--------------------+2 rows in set (0.00 sec)mysql&gt;exitBye","link":"/2016/11/28/centos6-6-yum-install-lamp/"},{"title":"HowTo Install MongoDB  on CentOS 6.x","text":"1. Overiew&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CentOS Linux 中安装软件的方式有很多种，我会在后续的文章中整理给大家，我比较喜欢的方式是尽量用Yum 安装，不用自己动手去解决软件包之间的依赖关系，“能Yum 就Yum ，不能Yum 想着法Yum 。” – 这是我遵循的真理；今天给大家整理的就是如何使用Yum 来安装Mongodb ，在本文中会给出在32位与64位系统的区别，以及Mongodb 的版本，本文适用于CentOS 6/7 的Linux发行版本，所以同样适用于红帽体系的OS，如 RedHat Enterprise Linux 6/7 、 Fedora 。 2. Packages&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;业内常用的Mongodb 的Yum 仓库有Mongodb-org 与 Mongodb-10gen ,这里提供的Mongodb-org 的repository 仓库，支持以下软件包列表： 2.1 mongodb-org &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个是源数据包，主要是用来组织自动安装下面的4个软件包. 2.2 mongodb-org-sever &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个Mongodb Server端，包含了相关的配置和初始化脚本。 2.3 mongodb-org-mongos &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个是Mongodb的守护进程。 2.4 mongodb-org-shell &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个是mongodb 的shell环境。 2.5 mongodb-org-tools &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个包里包含了下列mongodb 的工具：mongoimport bsondump, mongodump, mongoexport, mongofiles, mongooplog, mongoperf, mongorestore, mongostat, and mongotop 。 3. 添加相对应版本的Mongodb repo file.3.1 Mongodb 2.6 + OS x641234567[root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-2.6.repo[mongodb-org-2.6]name=MongoDB 2.6 Repositorybaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/gpgcheck=0enabled=1 3.2 Mongodb 2.6 + OS i6861234567[root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-2.6.repo[mongodb-org-2.6]name=MongoDB 2.6 Repositorybaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686/gpgcheck=0enabled=1 3.3 Mongodb 3.2 + OS x641234567[root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-3.2.repo[mongodb-org-3.2]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/gpgcheck=0enabled=1 3.4 Mongodb 3.2 + OS i6861234567[root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-3.2.repo[mongodb-org-3.2]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/i686/gpgcheck=0enabled=1 4. Install MongoDB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装最新版本的 Mongodb ，安装都方式一样，请注意安装相对应的源保证正确安装Mongodb，请使用如下命令： 123[root@vm02 ~]# yum clean all[root@vm02 ~]# yum makecache[root@vm02 ~]# yum install mongodb-org 5. Run MongoDB5.1 配置SELinux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELinux 默认为开启状态，会导致我们的Mongodb 无法使用，解决方式有两种： 关闭SELinux 添加Mongodb 通过SELinux 设定，指令如下： 1semanage port -a -t mongod_port_t -p tcp 27017 Tips: 在CentOS 7 ，SELinux 会限定你去修改Mongodb的data目录及lib目录。 5.2 Start MongoDB123[root@vm02 ~]# sudo service mongod startStarting mongod: [ OK ][root@vm02 ~]# 5.3 检查MongoDB日志文件验证服务正常启动， /var/log/mongodb/mongodb.log12[root@vm02 ~]# cat /var/log/mongodb/mongod.log # 看到如下内容表示mongodb启动成功了。2016-03-24T04:09:28.582+0800 I NETWORK [initandlisten] waiting for connections on port 27017 5.4 设置MongoDB 开机自启动1[root@vm02 ~]# chkconfig mongod on 5.5 设置MongoDB 允许其他服务器访问&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，mongodb 只监听 127.0.0.1 ，但是实际生产环境中可能需要其他服务器访问，所以这里添加监听其他网络端口，修改mongodb的配置文件：/etc/mongodb.conf 123456[root@vm02 ~]# vim /etc/mongodb.conf# line 29 增加一行： bindIp: 172.16.102.129# 注意不要把1270.0.1 去除，这会导致本地无法使用MongoDB . 6. Use MongoDB6.1 检查mongodb 状态123[root@vm02 ~]# service mongod statusmongod (pid 6502) is running...[root@vm02 ~]# 6.2 mongodb 自带检测工具12345[root@vm02 ~]# mongostatinsert query update delete getmore command % dirty % used flushes vsize res qr|qw ar|aw netIn netOut conn time *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:09+08:00 *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:10+08:00 *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:11+08:00 6.3 进入mongodb 命令行模式1234567891011121314[root@vm02 ~]# mongoMongoDB shell version: 3.2.4connecting to: testServer has startup warnings:2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten]2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never'2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten]2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never'2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten]2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: soft rlimits too low. rlimits set to 1024 processes, 64000 files. Number of processes should be at least 32000 : 0.5 times number of files.2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten]&gt; 7. Uninstall MongoDB7.1 关闭mongodb1[root@vm02 ~]# service mongod stop 7.2 卸载mongodb 软件包1[root@vm02 ~]# yum erase $(rpm -qa | grep mongodb-org) 7.3 删除mongodb文件：数据库文件和日志文件12[root@vm02 ~]# rm -rf /var/log/mongodb[root@vm02 ~]# rm -rf /var/lib/mongo 8. FAQ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q : Mongodb 占用99%CPU并且查询速度很慢? &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A : 数据库需要首先建立索引，类似图书的目录文件，否则当你在数据库内查找数据的时候，就类似于在整本字典一页页翻查一个字如此。","link":"/2016/03/27/mongodb01/"},{"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","text":"Install Mysql 5.5 on RHEL/CentOS 5/6/7 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: mysql-server-5.5.repo for CentOS/RHEL 5.x1rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm *Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method:12yum install mysql.`uname -i` yum-plugin-replaceyum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed.Otherwise, to install MySql client and server, then run:1yum install mysql55w mysql55w-server mysql-server-5.5.repo for CentOS/RHEL 6.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm mysql-server-5.5.repo for CentOS/RHEL 7.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm Setup 2. Install MySQL Server 5.5If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method:123# It's RHEL/CentOS 6/7yum remove -y mysql-serveryum remove -y mysql* If you don’t have mysql-server was installed.Otherwise, to install MySql client and server, then run:1yum install -y mysql-community-server Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database).1service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p”1mysql_secure_installation Install Mysql 5.6 on RHEL/CentOS 5/6/7 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.6 RPM based on your CentOS/RHEL release: mysql-server-5.6.repo for CentOS/RHEL 5.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/x86_64/mysql-community-release-el5-5.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/i386/mysql-community-release-el5-5.noarch.rpm mysql-server-5.6.repo for CentOS/RHEL 6.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm mysql-server-5.6.repo for CentOS/RHEL 7.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm Setup 2. Install MySQL Server 5.6If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method:12yum remove -y mysql-serveryum remove -y mysql* If you don’t have mysql-server was installed.Otherwise, to install MySql client and server, then run:1yum install -y mysql-community-server Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database).1service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p”1mysql_secure_installation Install Mysql 5.7 on RHEL/CentOS 5/6/7 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.7 RPM based on your CentOS/RHEL release: mysql-server-5.7.repo for CentOS/RHEL 5.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/x86_64/mysql-community-release-el5-7.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/i386/mysql-community-release-el5-7.noarch.rpm mysql-server-5.7.repo for CentOS/RHEL 6.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/i386/mysql-community-release-el6-7.noarch.rpm mysql-server-5.7.repo for CentOS/RHEL 7.x12345# For x86_64yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-release-el7-7.noarch.rpm# For i386yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/i386/mysql-community-release-el7-7.noarch.rpm Setup 2. Install MySQL Server 5.7If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method:12yum remove -y mysql-serveryum remove -y mysql* If you don’t have mysql-server was installed.Otherwise, to install MySql client and server, then run:1yum install -y mysql-community-server Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database).1service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p”1mysql_secure_installation","link":"/2016/07/07/how-to-install-mysql-5-6-on-centos/"},{"title":"HowTo Install NextCloud","text":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 搭建LNMP环境软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 基础环境安装123456789101112[root@ultraera ~]# yum update -y[root@ultraera ~]# yum groupinstall -y \"Base\"[root@ultraera ~]# yum groupinstall -y \"Development tools\"# Install epel[root@ultraera ~]# yum install -y epel-release# Install remi[root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm# Install mysql-community[root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm Install LNMP12345678910111213141516# Install MySQL[root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel[root@ultraera ~]# service mysqld start[root@ultraera ~]# mysql_secure_installation[root@ultraera ~]# chkconfig mysqld on# Install Nginx[root@ultraera ~]# yum --enablerepo=epel install -y nginx[root@ultraera ~]# service nginx start[root@ultraera ~]# chkconfig nginx on# Install PHP and php-fpm[root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib[root@ultraera ~]# service php-fpm start[root@ultraera ~]# chkconfig php-fpm on[root@ultraera ~]# service nginx restart 下载NextCloud123[root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2[root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2[root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 1234[root@ultraera ~]# vim /etc/php-fpm.d/www.confuser=nginxgroup=nginx[root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131[root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock;}server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri;}server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location / { rewrite ^ /index.php$uri; } location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { deny all; } location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { deny all; } location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) { include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.*)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; #Avoid sending the security headers twice fastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; } location ~ ^/(?:updater|ocs-provider)(?:$|/) { try_files $uri/ =404; index index.php; } # Adding the cache control header for js and css files # Make sure it is BELOW the PHP block location ~* \\.(?:css|js|woff|svg|gif)$ { try_files $uri /index.php$uri$is_args$args; add_header Cache-Control \"public, max-age=7200\"; # Add headers to serve security related headers (It is intended to # have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into # this topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Optional: Don't log access to assets access_log off; } location ~* \\.(?:png|html|ttf|ico|jpg|jpeg)$ { try_files $uri /index.php$uri$is_args$args; # Optional: Don't log access to other assets access_log off; }}[root@ultraera ~]# service nginx restart 文件权限调整因为NextCloud运行是以nginx程序，注意修改目录所属用户和组为nginx 1[root@ultraera ~]# chown -R nginx:nginx /opt/nextcloud 创建MySQL数据库123mysql&gt; CREATE DATABASE nextcloud CHARACTER SET UTF-8;mysql&gt; GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost' IDENTIFIED BY 'your_password';mysql&gt; FLUSH PRIVILEGES; 初始化NextCloud在浏览器打开你在nginx中配置的域名，NextCloud初始化非常简单，设定一个管理员账户和密码，然后设定数据库即可，按照我们上一步针对MySQL的设定，你会非常清楚地知道你的数据库信息： 登录之后的界面是这样： 你可以在登录之后，在你的右上角点击头像选择Admin进入管理界面查看和修改你的服务器设置，你还可以在浏览器上方看到你的服务器现有哪些问题，会有对应文档提醒你如何解决这些问题。 Other修改默认data目录在我们首次打开NextCloud网页时，需要我们设定datadir目录，这里有个默认目录在nextcloud项目包，这其实是不安全的，我们最后将目录路径修改为其他位置: 123456[root@ultraera ~]# mkdir /nextcloud_files/[root@ultraera ~]# chown -R nginx:nginx /nextcloud_files/# 修改datadirectory的路径[root@ultraera ~]# vim /opt/nextcloud/config/config.phpdatadirectory' =&gt; '/nextcloud/data 无法登陆到个人用户界面我在安装时碰到这个问题，折腾了很久才解决，因为我们是使用nginx程序，但是php-fpm默认用户身份为apache，所以/var/lib/php/session目录的所属用户和组都是apache，导致我们没有权限去写入session，所以无法登入系统，报错信息可以在NextCloud的log文件下看到： 12345[root@ultraera ~]# tail -n 1 /usr/nextcloud/data/nextcloud.log{\"reqId\":\"NNnIwMCCPDMQtzZW5Ndc\",\"remoteAddr\":\"180.166.66.226\",\"app\":\"PHP\",\"message\":\"session_write_close(): Failed to write session data (files). Please verify that the current setting of session.save_path is correct (\\/var\\/lib\\/php\\/session) at \\/usr\\/nextcloud\\/lib\\/private\\/Session\\/Internal.php#104\",\"level\":3,\"time\":\"2017-02-24T10:46:13+00:00\",\"method\":\"POST\",\"url\":\"\\/index.php\",\"user\":\"samzong\",\"version\":\"11.0.0.10\"}# 修改/var/lib/php/的属组为nginx即可[root@ultraera ~]# chgrp -R nginx /var/lib/php 增加redis组件，提高性能关于如何安装redis我在之前的文章中也有讲到，大家可以去看下 安装教程 1234567891011121314151617[root@ultraera ~]# yum --enablerepo=remi install -y redis# 增加php的redis插件[root@ultraera ~]# yum --enablerepo=remi-php56 install php-redis# 配置文件增加redis 'memcache.local' =&gt; '\\\\OC\\\\Memcache\\\\Redis', 'memcache.locking' =&gt; '\\\\OC\\\\Memcache\\\\Redis', 'redis' =&gt; array ( 'host' =&gt; 'localhost', 'port' =&gt; 6379, )# 重启令服务生效[root@ultraera ~]# service php-fpm restart[root@ultraera ~]# service nginx restart 我的NextCloud配置如下： 123456789101112131415161718192021222324252627282930313233&lt;?php$CONFIG = array ( 'memcache.local' =&gt; '\\\\OC\\\\Memcache\\\\Redis', 'memcache.locking' =&gt; '\\\\OC\\\\Memcache\\\\Redis', 'redis' =&gt; array ( 'host' =&gt; 'localhost', 'port' =&gt; 6379, ), 'enable_previews' =&gt; false, 'instanceid' =&gt; 'ockhup01dxbf', 'passwordsalt' =&gt; 'TlJgWGrE0N7vOrRfZkOojwdYh/BixL', 'secret' =&gt; '/IQh0LioZp5eYFQJhicY7n324Q80WQUYOzWL+8OcxcXVw3Ef', 'trusted_domains' =&gt; array ( 0 =&gt; 'pan.ultraera.org', ), 'datadirectory' =&gt; '/nextcloud', 'overwrite.cli.url' =&gt; 'https://pan.ultraera.org', 'dbtype' =&gt; 'mysql', 'version' =&gt; '11.0.0.10', 'dbname' =&gt; 'nextcloud', 'dbhost' =&gt; 'localhost', 'dbport' =&gt; '', 'dbtableprefix' =&gt; 'oc_', 'dbuser' =&gt; 'nextcloud', 'dbpassword' =&gt; 'nextcloud', 'logtimezone' =&gt; 'CST', 'installed' =&gt; true, 'mail_from_address' =&gt; 'luchuanjia', 'mail_smtpmode' =&gt; 'php', 'mail_domain' =&gt; 'msn.com',); SSL证书现国内提供免费的SSL证书的服务商很多，作为个人站点，免费SSL证书是个挺不错的选择，我在之前nginx配置时将ssl的配置方式写在了配置文件中了，注意如果不启用ssl时，不要启用https的虚拟主机，当然你可以自己生成一个ssl证书来提供服务，但这样在别人访问你的网站时，会不提示不受信任的证书，具体如何获取的证书的方式，因各个厂家方式有些区别，这里就不赘述，可以联系对应的厂商的技术人员咨询。 使用现状在将服务搭建完成之后，对于存储的文件加密，现在通过jobs，每日凌晨将文件推送到oss内，保存2天的数据，避免因为服务器宕机导致文件丢失；使用端，自己的电脑和手机，还有家人的手机，都安装了应用，后台自动将拍照图片等自动上传到云盘，使用起来目前很稳定，只是iOS应用是收费的，因为NextCloud源于OwnCloud，如果你之前购买了OwnCloud的App也可以直接使用，当然NextCloud也有很多其他功能，可以根据你的实际需求发掘。","link":"/2017/02/27/install-nextcloud/"},{"title":"HowTo Install Openfire  on CentOS","text":"Install Centos 6.x x86_64 略. 安装依赖软件1yum -y install wget java glibc.i686 下载openfire 3.8 到本地1wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 安装openfire 3.81yum -y install ./openfire*rpm 设置服务开启自启动1chkconfig openfire on Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 创建openfire数据库1234mysql -u root -pcreate database openfire character set utf8;grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 启动openfire1http://Host:9090 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错FAQopenfire安装完毕后无法登录控制台12345678报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator解决方案如下：1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQLINSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0');2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动123456报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory解决方案如下：经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。，故在/etc/init.d/openfire的启动脚本修改，JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\"","link":"/2016/08/02/install-openfire/"},{"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","text":"CentOS 61. Install PostgreSQL repository and the PostgreSQL server by running the following:123sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpmsudo yum install postgresql95-serve 2. Create the PostgreSQL database cluster.1sduo service postgresql-9.5 initdb 3. Enable automatic PostgreSQL server startup.1sudo chkconfig postgresql-9.5 on 4. Start the PostgreSQL server.1sudo service postgresql-9.5 start CentOS 71. Install PostgreSQL repository and the PostgreSQL server by running the following:123sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpmsudo yum install postgresql95-serve 2. Create the PostgreSQL database cluster.1sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 3. Enable automatic PostgreSQL server startup.1sudo systemctl enable postgresql-9.5 4. Start the PostgreSQL server.1sudo systemctl start postgresql-9.5 Configurations for CentOSWhen installing in CentOs env. you will also need to make the following configurations. 1. Change authentication to md5.1sudo vi /var/lib/pgsql/9.5/data/pg_hba.conf 2. Change METHOD to md5.12345# IPv4 local connections:host all all 127.0.0.1/32 md5# IPv6 local connections:host all all ::1/128 md5 3. Restart PostgreSQL","link":"/2016/10/20/install-and-set-up-postgresql-9-5-on-centos/"},{"title":"HowTo Install Python 2.7.8 on CentOS 6.x","text":"CentOS 6.5 still come with Python 2.6 and I need 2.7, below a simple tutorial how to achieve this with no pain and not messing with installed Python. Update CentOS and install development tools 12yum -y updateyum groupinstall -y 'development tools' Also you need the packages below to enable SSL, bz2, zlib for Python and some utils:1yum install -y zlib-devel bzip2-devel openssl-devel xz-libs wget Installing Python 2.7.8 from sourceDownload Python and extract it123wget http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xzxz -d Python-2.7.8.tar.xztar -xvf Python-2.7.8.tar Installation processSince we already installed all the dependencies we are ready to go:12345678910111213# Enter the directory:cd Python-2.7.8# Run the configure:./configure --prefix=/usr/local# compile and install it:makemake altinstall# Checking Python version:[root@nicetry ~]# python2.7 -VPython 2.7.8 If you need set PATH variable check the line below:1export PATH=\"/usr/local/bin:$PATH\" Installing pip and virtualenvNow we have Python installed, but something is missing isn’t? Yes! We need pip and virtualenv. Install setuptools12345678wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz# Extract the files:tar -xvf setuptools-1.4.2.tar.gzcd setuptools-1.4.2# Install setuptools using the Python 2.7.8:python2.7 setup.py install Install pip1curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py | python2.7 - And finally virtualenv1pip2.7 install virtualenv And that’s all, we have Python 2.7.8 installed on CentOS.","link":"/2016/05/04/installing-python-2-7-8-on-centos-6-5/"},{"title":"HowTo Install Redmine","text":"Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 安装rvm导入公钥1[root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 安装1[root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 加载rvm环境并安装基础依赖包12[root@localhost ~]# source /etc/profile.d/rvm.sh[root@localhost ~]# rvm requirements 安装ruby123[root@localhost ~]# rvm install 2.2.6...[root@localhost ~]# rvm use 2.2.6 --default 安装rails更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 12345678910[root@localhost ~]# gem sources -l*** CURRENT SOURCES ***https://rubygems.org/[root@localhost ~]# gem sources --remove https://rubygems.org/[root@localhost ~]# gem sources -a https://ruby.taobao.org/[root@localhost ~]# gem sources -l*** CURRENT SOURCES ***https://ruby.taobao.org/ 安装1[root@localhost ~]# gem install rails -v=4.2 安装MySQL123[root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql[root@localhost ~]# service mysqld start[root@localhost ~]# mysql_secure_installation 安装redmine下载Redmine 3.3.2123[root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz[root@localhost ~]# tar xf redmine-3.3.2.tar.gz[root@localhost ~]# mv redmine-3.3.2 /opt 安装管理ruby的包管理工具bundler123# 注意，一定要在redmine目录下操作[root@localhost ~]# cd /opt/redmine-3.3.2[root@localhost redmine-3.3.2]# gem install bundler 安装redmine运行所需要的依赖包1[root@localhost redmine-3.3.2]# bundle install --without development test rmagick 为rails生产cookies秘钥1[root@localhost redmine-3.3.2]# rake generate_secret_token 创建redmine的数据库12mysql&gt; create database redmine character set utf8;mysql&gt; grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 修改redmine的database.yml123456789[root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml[root@localhost redmine-3.3.2]# vim config/database.ymlproduction: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 创建数据库结构1[root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 生产缺省数据12[root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data# 选择默认语言，之后可更改，初始为en 测试是否安装成功1[root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 采用Passenger提供脚本安装12[root@localhost redmine-3.3.2]# gem install passenger[root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 采用重新编译Nginx增加Passenger模块123456789# 获取passenger的安装路径[root@localhost ~]# passenger-config --root/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2# 重新编译Nginx并添加模块[root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz[root@localhost ~]# tar xf nginx-1.10.3.tar.gz[root@localhost ~]# cd nginx-1.10.3[root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 增加HTTP模块内以下配置1passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 配置nginx.conf 修改server模块中location的配置12345678910# ...server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; }}# ... 启动Nginx1[root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 7.1 Could not find gem ‘mysql2 (~&gt; 0.3.11)’ in any of the gem sources listed in your Gemfile.12[root@localhost redmine-3.3.2]# rm -f Gemfile.lock[root@localhost redmine-3.3.2]# bundle install 7.2 curl-tools1yum install libcurl-devel","link":"/2017/02/22/howto-install-redmine/"},{"title":"HowTo Install Zabbix 2.4 on CentOS 6.x","text":"","link":"/2016/05/20/how-to-install-zabbix-2-4-on-centos-6-x/"},{"title":"HowTo Install a Tomcat Server 7","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 2. Install Java SE Development Kit 7 (JDK7)123456789101112[root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\"[root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpmPreparing... ########################################### [100%] 1:jdk ########################################### [100%]Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 3. Build Java Environment.12345678910[root@ultraera ~]# vi /etc/profile# add follows to the endexport JAVA_HOME=/usr/java/defaultexport PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar[root@ultraera ~]# source /etc/profile[root@ultraera ~]# java -versionjava version \"1.7.0_75\"Java(TM) SE Runtime Environment (build 1.7.0_75-b13)Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 4. Download Tomcat7Make sure the latest one and download it from the site below.=》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ 12345[root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz[root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz[root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7[root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7[root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 5. create a script , use service manage tomcat712345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash# Tomcat7: Start/Stop Tomcat 7## chkconfig: - 90 10# description: Tomcat is a Java application Server.. /etc/init.d/functions. /etc/sysconfig/networkCATALINA_HOME=/usr/tomcat7TOMCAT_USER=tomcat7LOCKFILE=/var/lock/subsys/tomcat7RETVAL=0start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; touch $LOCKFILE return $RETVAL}stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; rm -f $LOCKFILE return $RETVAL}case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;;esacexit $? 6. Add tomcat7 to system service1234567891011121314151617[root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7[root@ultraera ~]# /etc/rc.d/init.d/tomcat7 startStarting Tomcat7:Using CATALINA_BASE: /usr/tomcat7Using CATALINA_HOME: /usr/tomcat7Using CATALINA_TMPDIR: /usr/tomcat7/tempUsing JRE_HOME: /usr/java/defaultUsing CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jarTomcat started.[root@ultraera ~]# netstat -ntlp | grep javatcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/javatcp 0 0 :::8009 :::* LISTEN 6326/javatcp 0 0 :::8080 :::* LISTEN 6326/java[root@ultraera ~]# ps axu | grep javatomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start[root@ultraera ~]# chkconfig --add tomcat7[root@ultraera ~]# chkconfig tomcat7 on 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 8. 使用curl 测试123456[root@ultraera ~]# curl -I http://localhost:8080HTTP/1.1 200 OKServer: Apache-Coyote/1.1Content-Type: text/html;charset=ISO-8859-1Transfer-Encoding: chunkedDate: Sun, 18 Sep 2016 11:14:06 GMT 9. Tomcat 文件树12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[root@ultraera /usr/tomcat7]# tree.├── bin│ ├── bootstrap.jar│ ├── catalina.bat│ ├── catalina.sh│ ├── catalina-tasks.xml│ ├── commons-daemon.jar│ ├── commons-daemon-native.tar.gz│ ├── configtest.bat│ ├── configtest.sh│ ├── daemon.sh│ ├── digest.bat│ ├── digest.sh│ ├── setclasspath.bat│ ├── setclasspath.sh│ ├── shutdown.bat│ ├── shutdown.sh│ ├── startup.bat│ ├── startup.sh│ ├── tomcat-juli.jar│ ├── tomcat-native.tar.gz│ ├── tool-wrapper.bat│ ├── tool-wrapper.sh│ ├── version.bat│ └── version.sh├── conf│ ├── catalina.policy│ ├── catalina.properties│ ├── context.xml│ ├── logging.properties│ ├── server.xml│ ├── tomcat-users.xml│ └── web.xml├── lib├── LICENSE├── logs│ ├── catalina.2016-09-18.log│ ├── catalina.out│ ├── host-manager.2016-09-18.log│ ├── localhost.2016-09-18.log│ └── manager.2016-09-18.log├── NOTICE├── RELEASE-NOTES├── RUNNING.txt├── temp├── webapps│ └── ROOT└── work","link":"/2016/09/19/install-a-tomcat-server-7/"},{"title":"HowTo Install Python3 on CentOS 6.x","text":"接触过Python2.x与Python3.x的应该知道，它们二者的区别也是蛮大的，而随着Python3.x的盛行，越来越多的应用运行与Python3.x的环境之上，但是我们的CentOS的系列，目前都默认安装时Python2.x（CentOS 7.x也是），所以不得不我们需要自己行动手安装Python 3.x的环境。 Mirosoft平台与Mac平台，不在考虑范围，他们都有相应的软件包与图形化安装工具，可以很好的解决这个问题，所以今天我们的环境是在CentOS 6.x系列上进行。 Demo ：CentOS 6.8 Method 1. Build &amp; Install From Source-File Python3.x 源码文件下载，请选择适合的版本。 下载页面 我这里使用版本 Python 3.5 1[cent@demo ~]$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz 安装系统基本工具： 12345# yum-utils[cent@demo ~]$ sudo yum install -y yum-utils# 构建python 编译环境[cent@demo ~]$ sudo yum-builddep python 开始编译 &amp; 安装并且源码安装的同时，会将pip3与setuptools一同安装. 12345[cent@demo ~]$ tar xf Python-3.5.0.tgz[cent@demo ~]$ cd Python-3.5.0[cent@demo ~]$ ./configure[cent@demo ~]$ make[cent@demo ~]$ sudo make install 检查版本 12345[cent@demo ~]$ python3 -VPython 3.5.0# 如果希望系统默认为Python3[cent@demo ~]$ alias python='usr/bin/python3.5' Method 2. Install From EPEL repos也许有的同学会说，编译安装，那是上古时期的做法了，yum在线安装才是王道，当然这种说法也有可取之处，所以接下来讲下如何使用yum安装，需要注意的是yum安装是需要时间测试和增加到相应的源仓库，一般会稍慢于源码安装的方式，这里采用EPEL源，这是一个非常棒的第三方源仓库，之前的文章中也多次提到，这里就不做过多描述，请看下面的命令：12345678910[cent@demo ~]$ sudo yum install -y epel-release[cent@demo ~]$ sudo yum install -y python34# 因为yum安装时没能同时安装pip与setuptools，所以我们要手动安装，这里采用拿第三方包解决问题[cent@demo ~]$ curl -O https://bootstrap.pypa.io/get-pip.py[cent@demo ~]$ sudo python3 get-pip.py[cent@demo ~]$ python3 -VPython 3.4.3","link":"/2016/12/08/installing-python3-on-centos-6/"},{"title":"HowTo Install piwik with nginx on centos 6.x","text":"This is my nginx config.123456789101112131415161718192021server { listen blog.ultraera.org:80; server_name blog.ultraera.org; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; }}server { listen piwik.ultraera.org:80; server_name piwik.ultraera.org; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2080; }}","link":"/2016/04/27/how-to-install-piwik-with-nginx-on-centos-6-x/"},{"title":"HowTo Monitor Tomcat Head-Memory for Zabbix","text":"最近项目上由于BUG问题导致Tomcat程序在运行过程中经常内存泄漏,而本身监控系统之中没有更好的检测到Tomcat堆空间(Head Memory)的使用情况导致报警频发，这篇文章主要讲述，如何在Zabbix之中调用jmx监控服务器上Tomcat堆空间的使用情况并增加对应报警功能。 测试环境: CentOS 6.8 Zabbix 2.4 Tomcat 7.0 实验前提默认是各位已经安装Zabbix Server服务器，并且至少有一台Zabbix agent服务器正常监控。关于如何搭建Zabbix监控集群，会有专门文章描述。 zabbix-java-gateway的工作机制 首先我们需要配置我们的Tomcat服务启用监控服务，这个是默认不启用的 之后需要在Zabbix的管理页面添加对应Tomcat服务器的jmx监控接口 最后zabbix端会自动获取zabbix-java-gateway的数据并根据相应模板进行展示 工作流: [Zabbix-Server]–&gt;(port:10053 on zabbix server)–&gt; [zabbix-java-gateway] –(port:12345 on tomcatserver)–&gt; [JMX enabled] 1. Install zabbix-java-gateway on Zabbix Server因为我的zabbix是使用zabbix 2.4官方源安装，所以只需要用yum在安装即可:1[root@6 ~]# sudo yum install -y zabbix-java-gateway 如果你没有官方源可能先安装该源，注意我的服务器zabbix版本是2.4 如果你是不同的版本，请到[这里]查找对应版本。1234# 查看zabbix server版本[root@6 ~]# zabbix_server --versionZabbix server v2.4.8 (revision 59539) (20 April 2016)Compilation time: May 4 2016 01:32:12 在使用yum安装zabbix-java-gateway源时,会自动关联安装openjdk，尽管这段程序没多大影响，如果你想保证系统JAVA环境不受到改变的话，可以在/etc/profile文件最后，增加如下内容:1234# add follows to the endexport JAVA_HOME=/usr/java/defaultexport PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar 2. Confiure Tomcat host with enable jmx首先在$tomcatdir/bin/catalina.sh文件开头处增加如下：123456#!/bin/shCATALINA_OPTS=\"-Dcom.sun.management.jmxremote \\-Dcom.sun.management.jmxremote.authenticate=false \\-Dcom.sun.management.jmxremote.ssl=false \\-Dcom.sun.management.jmxremote.port=12345\" 然后,启动Tomcat，你会发现多了一个12345端口，这就是jmx的监听端口，请保证zabbix-java-gateway可以访问到这台服务器。123456789101112[root@6 ~]# /tomcat7/bin/startup.shStarting Tomcat7:Using CATALINA_BASE: /tomcat7Using CATALINA_HOME: /tomcat7Using CATALINA_TMPDIR: /tomcat7/tempUsing JRE_HOME: /usrUsing CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jarTomcat started.[root@6 ~]# netstat -ntlp | grep 12345tcp 0 0 :::12345 :::* LISTEN 8793/java[root@6 ~]# ==fix 1 == : zabbix agent与server存在复杂网络环境这里疏忽了1个问题，如果您的zabbix server与agent端之间有防火墙规则，而按照我上面的所述只是增加了12345这个端口，那么很可能，您在/var/log/zabbix/zabbix_java_gateway.log 中会看到“No route to host”的报错，这是因为JMX不光开启了12345端口，还开启了另外两个随机端口，而在获取监控数据时会使用到其中一个，这就导致了无法通过固定的防火墙规则来开放该端口。其实有另外一个替代方式来使该监听端口固定下来——使用Tomcat提供的额外组件 catalina-jmx-remote.jar，这个组件是需要另外下载的： 123456789101112131415161718# 查看当前Tomcat版本.[root@6 bin]# ./catalina.sh versionUsing CATALINA_BASE: /tomcat7Using CATALINA_HOME: /tomcat7Using CATALINA_TMPDIR: /tomcat7/tempUsing JRE_HOME: /usrUsing CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jarServer version: Apache Tomcat/7.0.64Server built: Aug 19 2015 17:18:06 UTCServer number: 7.0.64.0OS Name: LinuxOS Version: 2.6.32-642.11.1.el6.x86_64Architecture: amd64JVM Version: 1.8.0_111-b15JVM Vendor: Oracle Corporation# 下载 catalina-jmx-remote.jar # 请注意下载版本不要高于当前tomcat版本.wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.57/bin/extras/catalina-jmx-remote.jar -O lib/catalina-jmx-remote.jar 增加如下内容，在conf/server.xml中：12&lt;Listener className=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\" rmiRegistryPortPlatform=\"12345\" rmiServerPortPlatform=\"12346\" /&gt; 因为我们已经在conf/server.xml定义了rmiRegistryPortPlatform，所以要将bin/catalina.sh中CATALINA_OPTS的com.sun.management.jmxremote.port去掉，否则会因为jmxremote.port配置有优先级更高而导致配置失效。1CATALINA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\" 完成之后，重启tomcat这时会发现jmx默认端口已经固定为12345何12346，而server依然可以正常获取监控数据. 3. Configure Zabbix Server首先需要修改zabbix_server.conf启用zabbix-java-gateway，让zabbix可以检测到服务,修改如下:1234567891011121314151617181920212223### Option: JavaGateway # IP address (or hostname) of Zabbix Java gateway. # Only required if Java pollers are started. # # Mandatory: no # Default:JavaGateway=10.211.55.4 # 设置为你的zabbixsever IP ### Option: JavaGatewayPort # Port that Zabbix Java gateway listens on. # # Mandatory: no # Range: 1024-32767 # Default: JavaGatewayPort=10053 # 设置服务端监听接口 ### Option: StartJavaPollers # Number of pre-forked instances of Java pollers. # # Mandatory: no # Range: 0-1000 # Default: StartJavaPollers=5 # 设置多线程启动 然后修改zabbix_java_gateway.conf 配置如下:123456789101112131415161718192021222324252627282930313233 ### Option: zabbix.listenIP # IP address to listen on. # # Mandatory: no # Default: LISTEN_IP=\"10.211.55.4\" # 配置监听IP ### Option: zabbix.listenPort # Port to listen on. # # Mandatory: no # Range: 1024-32767 # Default: LISTEN_PORT=10053 # 配置监听端口 ### Option: zabbix.pidFile # Name of PID file. # If omitted, Zabbix Java Gateway is started as a console application. # # Mandatory: no # Default: # PID_FILE= PID_FILE=\"/var/run/zabbix/zabbix_java.pid\" ### Option: zabbix.startPollers # Number of worker threads to start. # # Mandatory: no # Range: 1-1000 # Default:# 不能大于zabbix_server.conf的值，否则可能导致当连接Java gateway时没有多余的线程进行处理 START_POLLERS=5 最后启动启动zabbix-java-gateway，并重启zabbix-server12345[root@6 ~]# service zabbix-java-gateway startStarting zabbix java gateway: [ OK ][root@6 ~]# service zabbix-server restartStopping zabbix server: [ OK ]Starting zabbix server: [ OK ] 我在尝试重启发现一问题，zabbix-java-gateway通过service命令管理stop不能删除pid文件导致服务无法启动，如果你也碰到，解决办法如下:1234[root@6 zabbix]# vim /etc/rc.d/init.d/zabbix-java-gateway# line 97, 注释修改为如下：# kill `cat $PID_FILE` &amp;&amp; rm $PID_FILE rm -f $PID_FILE 4. Adding jmx host on Zabbix Web consloe首先，上传Template Tomcat Head Memory模板，这个我做了一个简单的模板，只针对了堆内存空间的监控，并针对使用率超过60%以及80%，不同的警报。需要的同学可以直接从我这里下载，然后在Configuration-Templates导入到zabbix模板库内。下载请点击:Template App Tomcat Head Memory 然后，增加服务器的jmx监控关联模板 5. View the Head Memory Monitoring.","link":"/2017/01/18/zabbix01-monitor-tomcat-head-memory-jmx/"},{"title":"HowTo Monitoring MySQL server for Zabbix","text":"安装插件包123yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm -yyum install percona-zabbix-templates.noarch -yyum install php* -y 导入模板把/var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.6.xml 文件拷贝出来，通过Zabbix的监控页面导入:ConfigurationTemplatesImport(在右上角)选择导出的模板文件，点击Import完成导入 安装Agent123456789rpm -ivh http://repo.zabbix.com/zabbix/2.4/rhel/6/x86_64/zabbix-release-2.4-1.el6.noarch.rpmyum install zabbix-agentvim /etc/zabbix/zabbix-agentd.conf#配置监控服务器地址Server=192.168.1.15#导入配置文件cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/#重启agentservice zabbix-agent restart Mysql新建用户登陆Mysql数据库，新建一个本地的只有查询权限的mysql用户grant select on . to ‘percona’@’localhost’ identified by ‘percona’;flush tables; 配置Percona插件修改插件使用的mysql用户名密码sed -i s/cactiuser/percona/g /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php 测试测试是否可以获取到值cd /var/lib/zabbix/percona/scripts/./get_mysql_stats_wrapper.sh gg如果获取到值，则说明配置成功 注意：执行完脚本后，请手动删除/tmp/文件夹下生成的*-mysql_cacti_stats.txt文件，然后让程序自己调用创建新文件。","link":"/2016/05/20/how-to-use-zabbix-monitoring-mysql-server-on-centos-6-x/"},{"title":"HowTo Play Pokemon GO in China","text":"Installtions TuTuAPP VPN Google Account ID &emsp;&emsp;最近看到身边朋友都在玩Pokemon GO, 心痒难耐，于是跟同事请教琢磨了，终于在自己的手机上玩起来了，由于我的手机是iPhone 5s，身边朋友也都是iPhone，所以不确定是Android是否可以玩耍，想来应该是没有问题话，Android平台做破解等操作一直以来比iPhone更加方便。 &emsp;&emsp;1. 点击上面的TuTuAPP，可以打开兔兔助手的网站，用手机扫描首页的二维码(可以用微信等，带有二维码扫描的都可以)，注意如果你的iPhone已经越狱，请切换标签页到越狱版本。&emsp;&emsp;2. 安装时注意按照提示添加信任，等待兔兔助手安装完成之后，打开软件，在Search栏输入“精灵宝可梦GO”，请下载美区版，有两个版本：懒人版与移动版；懒人版有移动按钮，可以不需要走动躺在床上玩耍，移动版是需要人走动才能玩耍，我下载的移动版，你根据自己的喜欢选择，选择完成后，按提示按钮安装即可。&emsp;&emsp;3. 安装完成Pokemon GO之后也需要设定信任，请按照提示操作；好了， 到这一步，Pokemon GO已经安装在你的手机上了，下一步就是怎么登录玩耍。&emsp;&emsp;4. 到这里及一下的步骤能继续下去的前提是，你有一个美国的VPN节点。打开你手机App Store，搜索VPN，列表中会有很多的免费应用，因为我一直用的是付费VPN，所以对这些不是很清楚，朋友推荐ArkVPN，如果你没有付费VPN，可以试试这个，注意VPN节点要选择US，如果你也要使付费VPN的，我推荐Shadowsocks＋Potatso( App)&emsp;&emsp;5. 注册Google Account ID，点击&emsp;&emsp;6. 进入游戏，登录Google ID，然后授权，进入游戏。&emsp;&emsp;7. 开始捕捉你的小精灵吧，手动微笑。&gt; Tips：这款游戏会大量耗电发热，因为打开摄像头捕捉小精灵；另外很容易入迷，在室外玩耍时一定要注意安全。&emsp;&emsp;8. 注意：如果看到了GPS signal not found，说明是GPS信息丢失，这是根据GPS定位的游戏，所以这很重要，记得选择美国的VPN代理。","link":"/2016/07/24/pokemongo/"},{"title":"HowTo Reset Azure VM Linux Password","text":"Setup1: 这种方法仅适用于已存在的用户，也就是说$Username是之前创建过的用户，否则不适用 1. 指定虚拟机12$vm = Get-AzureVM -ServiceName '云服务名称' -Name '虚拟机名称'$vm.GetInstance().ProvisionGuestAgent = $true 2. 输入您当前的用户名和新密码1234$UserName = \"指定用户名\"$Password = \"指定密码\"$PrivateConfig = '{\"username\":\"'+ $UserName + '\", \"password\":\"' + $Password + '\"}' 3. 开始执行12345$ExtensionName = 'VMAccessForLinux'$Publisher = 'Microsoft.OSTCExtensions'$Version = '1.0'Set-AzureVMExtension -ExtensionName $ExtensionName -VM $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfig | Update-AzureVM Setup2: 如果是由于错误修改了SSH的配置文件导致无法登录，例如在登录时报错：This service allows sftp connections only.Connection to vm closed.这是因为错误配置了sftp导致的，那碰到这种问题需要做的是重置ssh服务。 1. 指定虚拟机12$vm = Get-AzureVM -ServiceName 'MyServiceName' -Name 'MyVMName'$PrivateConfig = '{\"reset_ssh\":\"True\"}'' 2. 开始执行12345$ExtensionName = 'VMAccessForLinux'$Publisher = 'Microsoft.OSTCExtensions'$Version = '1.0'Set-AzureVMExtension -ExtensionName $ExtensionName -VM $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfig | Update-AzureVM","link":"/2016/07/10/reset-azure-vm-linux-password/"},{"title":"HowTo Mount OSS Bucket On ECS","text":"From 阿里云官方Github Demo: CentOS 6.8 on ECS ossfs 是通过磁盘挂载的形式，将oss存储挂载到linux、类unix等操作系统，而且不仅仅可以挂载阿里云内的ECS上，理论上所有网络能到达oss的都可以挂载，但还是要以实际问题为准。 1.Download &amp; Install官方版本发布页面，请根据你的系统类型进行选择，我这演示的环境是CentOS 6.8；ossfs目前最新的版本是v1.79.9，您可以根据自己当时版本进行选择，建议选择最新版本。12# 请先将包上传到服务器上 sudo yum localinstall ossfs_1.79.9_centos6.5_x86_64.rpm 注意使用localinstall，因为在安装过程，yum 可以很好的解决依赖关系，会节省我们很多时间 2. OSS &amp; Bucket 需要获取以下信息，在后面我们都会用到的： Bucket 名称 Access Key ID Access Key Secret Location，这需要注意点，不要加上Bucket的名字，区域对应表如下，注意你的Bucket所在区域:Region中文名称Region英文表示外网EndpointECS访问的内网Endpoint华东 1oss-cn-hangzhouoss-cn-hangzhou.aliyuncs.comoss-cn-hangzhou-internal.aliyuncs.com华东 2oss-cn-shanghaioss-cn-shanghai.aliyuncs.comoss-cn-shanghai-internal.aliyuncs.com华北 1oss-cn-qingdaooss-cn-qingdao.aliyuncs.comoss-cn-qingdao-internal.aliyuncs.com华北 2oss-cn-beijingoss-cn-beijing.aliyuncs.comoss-cn-beijing-internal.aliyuncs.com华南 1oss-cn-shenzhenoss-cn-shenzhen.aliyuncs.comoss-cn-shenzhen-internal.aliyuncs.com香港数据中心oss-cn-hongkongoss-cn-hongkong.aliyuncs.comoss-cn-hongkong-internal.aliyuncs.com美国硅谷数据中心oss-us-west-1oss-us-west-1.aliyuncs.comoss-us-west-1-internal.aliyuncs.com美国弗吉尼亚数据中心oss-us-east-1oss-us-east-1.aliyuncs.comoss-us-east-1-internal.aliyuncs.com亚太（新加坡）数据中心oss-ap-southeast-1oss-ap-southeast-1.aliyuncs.comoss-ap-southeast-1-internal.aliyuncs.com亚太东北 1（日本）数据中心oss-ap-northeast-1oss-ap-northeast-1.aliyuncs.comoss-ap-northeast-1-internal.aliyuncs.com1234# 设置bucket/access key/id的信息，将其存放在/etc/passwd-ossfs 文件中# 注意这个文件的权限必须正确设置，建议设为640sudo echo my-bucket:my-access-key-id:my-access-key-secret &gt; /etc/passwd-ossfssudo chmod 640 /etc/passwd-ossfs 3. Mount &amp; Uasge将oss bucket mount到指定目录:12345# 我碰到安装后找不到ossfs命令，查看下因为ossfs没有x权限，目录路径为/usr/local/bin，如果您也碰到这个问题，可以增加x权限后再测试sudo ossfs my-bucket /mnt/ossdir -ourl=http://oss-location.aliyuncs.com# 如果使用ossfs的机器是阿里云ECS，可以使用内网域名来避免流量收费和 提高速度：sudo ossfs my-bucket /tmp/ossfs -ourl=http://oss-location-internal.aliyuncs.com 磁盘空间达到上百T： umount：123# 注意用户身份umount /tmp/ossfs # root usersudo fusermount -u /tmp/ossfs # non-root user 4. Debug &amp; FAQ当遇到错误的时候，可以试着打开Debug日志信息，然后分析问题原因：12# 使用 -o dbglevel=debug -f -d参数打印日志信息sudo ossfs my-bucket /tmp/ossfs -ourl=http://oss-location-internal.aliyuncs.com -o dbglevel=debug -f -d &gt; /mnt/ossfs.log 2&gt;&amp;1 更多的问题，请移步查看官方的FAQ文档。 5. Aboutossfs提供的功能和性能和本地文件系统相比，具有一些局限性。具体包括： 随机或者追加写文件会导致整个文件的重写。 元数据操作，例如list directory，性能较差，因为需要远程访问oss服务器。 文件/文件夹的rename操作不是原子的。 多个客户端挂载同一个oss bucket时，依赖用户自行协调各个客户端的行为。例如避免多个客户端写同一个文件等等。 不支持hard link。 不适合用在高并发读/写的场景，这样会让系统的load升高 另外，ossfs的稳定性很大一部分依赖于网络环境，建议的使用场景更多是作为临时数据迁移或定期备份，虽然ossfs挂载到系统中会有着几百TB的空间，但是稳定性并不高。","link":"/2016/12/20/alicloud-oss-ecs-mount/"},{"title":"HowTo Reset MySQL Root Password","text":"1. 处理的状态 首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 2. 重置密码 修改mysql配置文件，增加skip-grant-tables 123[root@demo ~]# vim /etc/my.cnf[mysqld]skip-grant-tables 重启mysqld 123[root@demo ~]# service mysqld restartStopping mysqld: [ OK ]Starting mysqld: [ OK ] 登录mysql，并修改root密码. 123456789101112131415161718192021[root@demo ~]# mysql -u rootWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 3Server version: 5.5.53 MySQL Community Server (GPL)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update user set password=password('new-pass') where user='root';Query OK, 5 rows affected (0.00 sec)Rows matched: 5 Changed: 5 Warnings: 0 配置文件去除skip-grant-tables，并重启服务器. 12[root@demo ~]# vim /etc/my.cnf[root@demo ~]# service mysqld restart 使用新密码登录到mysql 1[root@demo ~]# mysql -h localhost -u root -p","link":"/2016/12/04/wrbpvpam/"},{"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","text":"介绍&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ‘s/SELINUX=enforcing/SELINUX=disabled/‘ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 安装1. 在所有节点编辑/etc/hosts12345678910111213[root@node4 ~]# vi /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6# add follows172.16.102.164 node6172.16.102.165 node5172.16.102.168 node4[root@node4 ~]## 依次在node5和node6上编辑/etc/hosts 2. 在所有node上安装 MariaDB Galera12345678910111213[root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list# http://mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.0/centos6-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1enabled=0[root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server# 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件1234567891011121314151617181920212223242526[root@node4 ~]# vi /etc/my.cnf.d/server.cnf# 19 行，取消下面的注释，并修改为需求[galera]wsrep_provider=/usr/lib64/galera/libgalera_smm.so# 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。wsrep_cluster_address=\"gcomm://node4,node5,node6\"binlog_format=rowdefault_storage_engine=InnoDBinnodb_autoinc_lock_mode=2bind-address=0.0.0.0# add follows# cluster namewsrep_cluster_name=\"Visionet_MariaDB_Cluster\"# replication providerwsrep_sst_method=rsync# own IP addresswsrep_node_address=\"172.16.102.168\"wsrep_node_name=\"node4\"# 启动数据库[root@node4 ~]# /etc/rc.d/init.d/mysql bootstrapStarting MySQL. SUCCESS!# 初始化你的数据库[root@node4 ~]# mysql_secure_installation 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件node5123456789101112131415161718192021222324[root@node5 ~]# vi /etc/my.cnf.d/server.cnf# 19 行，取消下面的注释，并修改为需求[galera]wsrep_provider=/usr/lib64/galera/libgalera_smm.so# 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。wsrep_cluster_address=\"gcomm://node4,node5,node6\"binlog_format=rowdefault_storage_engine=InnoDBinnodb_autoinc_lock_mode=2bind-address=0.0.0.0# add follows# cluster namewsrep_cluster_name=\"Visionet_MariaDB_Cluster\"# replication providerwsrep_sst_method=rsync# 以下内容注意，注意应设置为当前服务器信息wsrep_node_address=\"172.16.102.165\"wsrep_node_name=\"node5\"# 启动数据库[root@node5 ~]# /etc/rc.d/init.d/mysql startStarting MySQL...SST in progress, setting sleep higher. SUCCESS! node6123456789101112131415161718192021222324[root@node6 ~]# vi /etc/my.cnf.d/server.cnf# 19 行，取消下面的注释，并修改为需求[galera]wsrep_provider=/usr/lib64/galera/libgalera_smm.so# 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。wsrep_cluster_address=\"gcomm://node4,node5,node6\"binlog_format=rowdefault_storage_engine=InnoDBinnodb_autoinc_lock_mode=2bind-address=0.0.0.0# add follows# cluster namewsrep_cluster_name=\"Visionet_MariaDB_Cluster\"# replication providerwsrep_sst_method=rsync# 以下内容注意，注意应设置为当前服务器信息wsrep_node_address=\"172.16.102.164\"wsrep_node_name=\"node6\"# 启动数据库[root@node6 ~]# /etc/rc.d/init.d/mysql startStarting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 登陆各个节点数据库检查配置是否成功&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。12345678910111213141516171819[root@node4 ~]# mysql -u root -pEnter password:Welcome to the MariaDB monitor. Commands end with ; or \\g.Your MariaDB connection id is 15Server version: 10.0.26-MariaDB-wsrep MariaDB Server, wsrep_25.13.raf7f02eCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.MariaDB [(none)]&gt; show status like 'wsrep_local_state_comment';+---------------------------+--------+| Variable_name | Value |+---------------------------+--------+| wsrep_local_state_comment | Synced |+---------------------------+--------+1 row in set (0.01 sec)MariaDB [(none)]&gt; 结论&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MariaDB Galera没有主节点和备份节点，配置成功之后，可以在任何一个node节点上操作会自动同步到其他节点，任何一个节点宕机不会影响其他节点的数据和稳定性，配置HAProxy设置VIP的方式来实现负载均衡，提高服务的高可用性，另外，当宕机节点上线之后，事务会自动同步不丢失。","link":"/2016/08/04/how-to-setup-mariadb-galera-cluster-10-on-centos-6/"},{"title":"HowTo-Skip-Atlassian-Auth-for-SourceTree","text":"问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 解决步骤.NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： 1%LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： 1%LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： 123456789101112131415161718192021222324[ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false }] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。","link":"/2017/05/20/sourcetree-skipAuth-for-windows/"},{"title":"HowTo Trun Off IPv6 in CentOS 6.x","text":"1. CentOS 6.xCentOS 6 上是默认打开了IPv6，但其实在我们实际使用中很难用到它，所以本篇的内容就是如何关闭IPv6。 ＃ 可以看到 inet6 ，说明还没关闭。123456789[root@ultraera ~]# ifconfig eth0eth0 Link encap:Ethernet HWaddr 00:0C:29:3A:F9:6F inet addr:172.16.102.161 Bcast:172.16.102.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:fe3a:f96f/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:199 errors:0 dropped:0 overruns:0 frame:0 TX packets:122 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:20124 (19.6 KiB) TX bytes:17182 (16.7 KiB) ＃ 修改/etc/modprobe.d/dist.conf12345678[root@ultraera ~]# vi /etc/modprobe.d/dist.conf# 添加下面两行内容alias net-pf-10 offalias ipv6 off# 保存退出，并且重新启动系统# 开机不启动[root@ultraera ~]# chkconfig ip6tables off ＃ 系统重启完成后，检查是否加载IPv61[root@ultraera ~]# lsmod | grep v6 ＃ 补充 修改/etc/sysconfig/network，追加 1NETWORKING_IPV6=no 修改/etc/hosts文件，把ipv6的那句本地主机名解析的也注释掉 1#::1 localhost localhost6 localhost6.localdomain6 2. CentOS 7.xSetup 1. 修改grub文件，在启动引导时不加载ipv612345678[root@ultraera ~]# vim /etc/default/grub# 在GRUB_CMDLINE_LINUX=\" \" ,中增加ipv6.disable＝1# 重新生产启动引导文件，注意，这里重启系统是没用的，需要手动重建引导文件[root@ultraera ~]# grub2-mkconfig -o /boot/grub2/grub.cfg[root@ultraera ~]# reboot ＃ 验证是否关闭1[root@ultraera ~]# lsmod | grep ipv6 Setup 2. 第二种方式1234# 修改/etc/sysctl.conf,增加以下：net.ipv6.conf.all.disable_ipv6 = 1reboot IPv6是默认支持的，所以当你要重新开起IPv6支持时，将以上添加的指令注释掉即可。 之前碰到过安装某些服务时，不能启动，后来检查原因是因为关闭ipv6的问题，因为在这些服务的conf文件，指定了类似监听ipv6,因为关闭了ipv6导致服务无法启动，将其关闭即可。","link":"/2016/07/29/trun-off-ipv6/"},{"title":"HowTo Upgrade Your Ghost Version","text":"1. 下载最新版的Ghost1curl -LOk https://ghost.org/zip/ghost-latest.zip 2. 创建临时目录，并解压ghost-latest.zip到此12mkdir /usr/ghost-tmpunzip ghost-latest.zip -d /usr/ghost-tmp 3. 进入到原ghost目录，删除core12cd /usr/ghostrm -rf core 4.进入到新版本的ghost临时目录1cd /usr/ghost-tmp 5. 拷贝所需文件到ghost升级目录12cp -R core /usr/ghostcp index.js *.json /usr/ghost 6. (可选)升级casper，ghost默认主题1cp -R content/themes/casper /usr/ghost/content/themes/ 7. 切换回到ghost安装目录1cd /usr/ghost 8. 修改文件目录所有者和所属组为ghost1chown -R ghost:ghost ./* 9. 重新安装环境1npm install --production 10. 重启Ghost1pm2 restart ghost","link":"/2017/02/20/howto-upgrade-your-ghost-version/"},{"title":"HowTo Use Docker create a Tomcat Project","text":"1. 安装CentOS 7.x略。 2. 安装docker详见： How to Install Docker on CentOS 6.x 3. 基础docker命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950＃ 获取centos6 docker镜像[root@docker ~]# docker pull centos6Using default tag: latestlatest: Pulling from library/centos:centos643db9dbdcb30: Downloading 41.14 MB/49.33 MB43db9dbdcb30: Pull complete2dc64e8f8d4f: Pull complete670a583e1b50: Pull complete183b0bfcd10e: Pull completeDigest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54bStatus: Downloaded newer image for centso:centos6＃ 查看当前服务器上的docker镜像[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEcentos6-visionet latest aeed37612ecb 6 hours ago 1.916 GBcentos centos6 a3c09d36ab4a 2 days ago 194.6 MBregistry latest c6c14b3960bd 3 days ago 33.28 MB＃ 查找docker镜像[root@docker ~]# docker search centos:centos6NAME DESCRIPTION STARS OFFICIAL AUTOMATEDimagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK]lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK]sergeyzh/centos6-nginx 2 [OK]guyton/centos6 From official centos6 container with full ... 2 [OK]paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK]edrans/centos6 1 [OK]mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK]......＃ 删除 centos6 docker镜像[root@docker ~]# docker rmi IMAGES_NAME[root@docker ~]# docker rmi centos:centos6# 报错无法删除Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429# 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程[root@docker ~]# docker ps -a ＃ 查看所有的docker进程CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6[root@docker ~]# docker rm 705a30cbc002705a30cbc002[root@docker ~]# docker rmi centos:centos6Untagged: centos:centos6Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100aDeleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110bDeleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 4. 运行一个docker镜像进入交互式程序1234567891011121314151617181920[root@docker ~]# docker run -it centos:centos6 /bin/bash[root@c1d190f95562 /]# cat /etc/redhat-releaseCentOS release 6.8 (Final)# Install openssh-server and httpdroot@d8c122dbe09d:/# yum install -y openssh-sever httpdroot@d8c122dbe09d:/# exit# 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令# 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程# 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改[root@docker ~]# docker ps -l[root@docker ~]# docker commit c1d190f95562 centos:centos6-httpdsha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEcentos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MBcentos6-visionet latest aeed37612ecb 6 hours ago 1.916 GBcentos centos6 a3c09d36ab4a 2 days ago 194.6 MBregistry latest c6c14b3960bd 3 days ago 33.28 MB 5. 编辑Dockerfile123456789101112131415161718192021222324# dockfile的第一行一定是FROM，指定了父镜像FROM centos:centos6# RUN 指的是运行的命令RUN yum install -y epel-releaseRUN yum install -y bash-completionRUN yum install -y openssh-server openssh-client sudoRUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_configRUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# 增加一个用户，并赋予sudo权限RUN useradd visionetRUN echo \"visionet:visionet\" | chpasswdRUN echo \"visionet ALL=(ALL) ALL\" &gt;&gt; /etc/sudoers＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_keyRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接RUN mkdir /var/run/sshdEXPOSE 22＃ CMD 为系统内部执行命令CMD [\"/usr/sbin/sshd\", \"-D\"] 6. 生成自定义docker镜像1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# build 编译镜像[root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh .Sending build context to Docker daemon 44.54 kBStep 1 : FROM centos:centos6 ---&gt; a3c09d36ab4aStep 2 : RUN yum install -y epel-release ---&gt; Using cache ---&gt; 04d81f280a63Step 3 : RUN yum install -y bash-completion ---&gt; Using cache ---&gt; 5ca26894dc9dStep 4 : RUN yum install -y openssh-server openssh-client sudo ---&gt; Using cache ---&gt; 42278450311eStep 5 : RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config ---&gt; Using cache ---&gt; db35bef562a2Step 6 : RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ---&gt; Using cache ---&gt; dc9f2b82e198Step 7 : RUN useradd visionet ---&gt; Using cache ---&gt; 06c574a51755Step 8 : RUN echo \"visionet:visionet\" | chpasswd ---&gt; Using cache ---&gt; 03412f053d04Step 9 : RUN echo \"visionet ALL=(ALL) ALL\" &gt;&gt; /etc/sudoers ---&gt; Using cache ---&gt; bf8476812a62Step 10 : RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key ---&gt; Using cache ---&gt; 2314cce75171Step 11 : RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ---&gt; Using cache ---&gt; 99304cd9ac15Step 12 : RUN mkdir /var/run/sshd ---&gt; Using cache ---&gt; f87283751553Step 13 : EXPOSE 22 ---&gt; Using cache ---&gt; 56c41202dcb9Step 14 : CMD /usr/sbin/sshd -D ---&gt; Using cache ---&gt; d6dccb483fa6Successfully built d6dccb483fa6[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEcentos centos6-ssh d6dccb483fa6 2 minutes ago 363 MBcentos centos6-httpd 77eb12e36c7b 6 minutes ago 290.3 MBcentos6-visionet latest aeed37612ecb 6 hours ago 1.916 GBcentos centos6 a3c09d36ab4a 2 days ago 194.6 MBregistry latest c6c14b3960bd 3 days ago 33.28 MB# 后台运行docker容器，并指定nat端口转发[root@docker ~]# docker run -d -p 2222:22 -P --name=sshd centos:centos6-sshb4211f7a304d9e34b72b510230be2c7a76b276886b488f08f3e12896a4d3c172 7. ssh登陆到docker容器内，部署项目环境12345678910111213141516171819202122232425# inspect 查看docker 容器IP地址[root@docker ~]# docker inspect sshd | grep IPAddress[root@docker ~]# ssh visionet@172.17.0.2visionet@172.17.0.2's password:[visionet@b4211f7a304d ~]$# Install mysql# Install tomcat server[visionet@b4211f7a304d ~]$ exit[root@docker ~]# docker stop sshdsshd[root@docker ~]# docker ps -lCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESb4211f7a304d centos:centos6-ssh \"/usr/sbin/sshd -D\" 6 minutes ago Exited (255) 3 seconds ago sshd[root@docker ~]# docker commit b4211f7a304d centos:centos6-tomcatsha256:b4f114d5484822d9a3ddf1100b76b460985ba5e5d31e936570e8d7dbd8df282c[root@docker ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEcentos centos6-tomcat b4f114d54848 4 seconds ago 363.1 MBcentos centos6-httpd 77eb12e36c7b 15 minutes ago 290.3 MBcentos6-visionet latest aeed37612ecb 7 hours ago 1.916 GBcentos centos6-ssh d6dccb483fa6 9 hours ago 363 MBcentos centos6 a3c09d36ab4a 2 days ago 194.6 MBregistry latest c6c14b3960bd 3 days ago 33.28 MB 8. 推送centos:centos6-tomcat到私有docker仓库","link":"/2016/08/02/docker01/"},{"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","text":"传统我们服务器之间文件共享的方式有采用NFS、Samba等等，但是在我看来配置都有一定的复杂性，当然复杂也有它们的优势，这里推荐一个依赖于SSH的文件共享工具，Fuse-sshfs。SSH 是一个强大且安全的工具，我们除了可以用它来远程管理主机外，还可以通过它建立 SSH tunnel 作 Proxy 用，远程传输文件等等。而这里我想要介绍另外一个功能，那就是结合 sshfs 这个工具可以把远程主机的文件系统映射到本地主机上，透过 SSH 把远程文件系统挂载到本机上，这样我们可以不必使用 scp 工具就可以做到直接复制及删除远程主机的文件了，就像操作本地磁盘一样方便。sshfs 是基于 FUSE 构建的 SSH 文件系统客户端程序，通过它远程主机的配置无需作任何改变，就可以透过 SSH 协议来挂载远程文件系统了，非常方便及安全。 Install fuse-sshfs12[cent@localhost ~]$ sudo yum install -y epel-relese[cent@localhost ~]$ sudo yum --enablerepo=epel install -y fuse-sshfs 挂载远程 ssh文件系统12345[cent@localhost ~]$ mkdir ./mnt[cent@localhost ~]$ sshfs root@192.168.16.230:/home/ ./mntroot@192.168.16.230's password:[cent@localhost ~]$ mountroot@192.168.16.230:/home/ on /home/cent/mnt type fuse.sshfs (rw,nosuid,nodev,user=cent) 卸载远程 ssh文件系统1[cent@localhost ~]$ fusermount -u ./mnt 常用参数123456-C 压缩，或者-o compression=yes-o reconnect 自动重连-o transform_symlinks 表示转换绝对链接符号为相对链接符号-o follow_symlinks 沿用服务器上的链接符号-o cache=yes-o allow_other 这个参数最重要，必须写，否则任何文件都是Permission Deny 缺点当然sshfs也不尽是优点，例如远程主机失去响应后本地挂载点卡死并影响本地系统使用，需要手工找出 sshfs进程并杀死，因网速问题造成操作响应缓慢等等，不过一般在稳定快速的网络中不太会遇上，对比其强大的功能，还是可以接受的，正所谓暇不掩瑜。 所以sshfs适合内部网络比较稳定的地方 配合ssh免密登录使用会更好哦 可以看到的是sshfs默认挂载是rw的权限，但是通过sshfs –help 可以看到有非常详尽的参数配置可以选择，大家可以仔细研究下。 附1.Link 在windows下可以使用sshfs.","link":"/2016/07/05/use-fuse-sshfs-to-mount-remote-filesystems/"},{"title":"HowTo Use Remi Install Redis","text":"Setup 1. InstallFrist, To install remi Repo and epel Repo. Remi EL6 for CentOS/RHEL 6.x12rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmrpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm Remi EL5 for CentOS/RHEL 5.x12rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpmrpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 有时间我们会碰到remi.repo无法使用报错，就像这样：1http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样：12baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/#mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。12345[repoName]name=repoName repobaseurl=http://repoPathgpgcheck=0 # 是否启用gpgkey检查enabled=0 # 是否启用该源 Install Redis1234567891011121314151617181920yum install -y redis[root@zabbix yum.repos.d]# rpm -qi redisName : redisVersion : 3.2.1Release : 2.el5.remiArchitecture: x86_64Install Date: Thu 28 Jul 2016 12:00:41 PM CSTGroup : Applications/DatabasesSize : 2113279License : BSDSignature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56Source RPM : redis-3.2.1-2.el5.remi.src.rpmBuild Date : Fri 24 Jun 2016 01:28:27 PM CSTBuild Host : builder.remirepo.netRelocations : (not relocatable)Packager : http://blog.remirepo.net/Vendor : Remi ColletURL : http://redis.ioSummary : A persistent key-value database Setup 2. 基本配置项Redis 配置默认文件/etc/redis.conf ＃ 设置Redis的运行模式，yes表示后台运行，no表示不开启后台运行。1daemonize yes ＃ 指定 redis 监听端口，默认为 63791port 6379 ＃ 设置bind_ip，默认监听接口，默认是监听本地，如果未配置的情况下，只有本地可以访问redis，如果取消，则默认监听所有接口1# bind 127.0.0.1 ＃ 指定日志记录级别123456# debug 记录很多信息，用于开发和测试# varbose 很多精简的有用信息，不像 debug 会记录那么多# notice 普通的 verbose，常用于生产环境# warning 只有非常重要或者严重的信息会记录到日志loglevel verbose ＃ 配置 log 文件名称和全路径地址，默认为stdout，即标准输出，输出到/dev/null，可以手动指定redis日志文件地址，建议级别不要太高，否则会产生大量日志，注意避免磁盘因此撑满。1logfile stdout ＃ 可用数据库数，默认值为 16，默认数据库存储在 DB 0 号 ID 库中，无特殊需求，建议仅设置一个数据库＃ 查询数据库使用 SELECT ‘dbid’，dbid 介于 0 到 ‘databases’-1 之间。1database 16 ＃ 安全限定，要求客户端在处理任何命令时都要验证身份和设置密码。＃ 默认不启用，若要启用，需要将下行取消注释，并将foobared设置自定一的密码接即可。＃ 因为redis加密是通过配置文件进行，所以目前各大云厂家的redis PAAS 服务，都不支持redis加密，在程序开发时需要注意。1234# requirepass foobared# 如果开启了安全验证，这时通过redis-cli登录时需要首先执行auth，否则不能正常使用。redis-cli&gt; auth foobared ＃ 向redis内插入一条数据1redis-cli&gt; set [key] [values] ＃ 获取key的值1redis-cli&gt; get key ＃ 查看redis的db信息1redis-cli&gt; info Setup 3. Others redis-dump master/slave slow log Wait …","link":"/2016/07/07/redis01/"},{"title":"HowTo install Zoomdata","text":"Zoomdata是一个大数据可视化展示的工具，由ZoomData企业创建，是为数不多的同时支持移动端的数据分析公司，Zoomdata的可视化可将大数据流转化为触屏友好的，艺术感十足的三维形态，Zoomdata的定位是非ETL(传统的提取、转换和加载的数据处理过程)工具，Zoomdata支持多种数据源，包括社交媒体等，其中应用最主流是大数据平台的展示工具，并且Zoomdata对Cloudera Impala做了很好的支持，所以我们做了Zoomdata+Cloudera技术实施。^1 系统要求Zoomdata最新版是v2.4，支持常见主流的操作系统，并且有非常友好的安装帮助，但是Zoomdata不支持安装在32位的操作系统之上|biaoti|biaoti|baiiti||——|——|——||list|file|china||letian|zhong|hongkong|","link":"/2017/03/06/howto-install-zoomdata/"},{"title":"HowTo Use pt-query-digest","text":"1. 简介索引可以我们更快速的执行查询，但是肯定存在不合理的索引，如果想找到那些索引不是很合适的查询，并在它们成为问题前进行优化，则可以使用pt-query-digest的查询审查“review”功能，分析其EXPLAIN出来的执行计划。 pt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。可以把分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间、次数、占比等，可以借助分析结果找出问题进行优化。 2. Install Percona Toolkit &amp; pt-query-digestpercona-toolkit是一组高级命令行工具的集合，用来执行各种通过手工执行非常复杂和麻烦的mysql和系统任务。这些任务包括： 检查master和slave数据的一致性 有效地对记录进行归档 查找重复的索引 对服务器信息进行汇总 分析来自日志和tcpdump的查询 当系统出问题的时候收集重要的系统信息 1234567891011121314151617181920212223242526272829303132333435363738394041[root@ultrera ~]# wget percona.com/get/percona-toolkit.tar.gz--2016-09-22 09:17:00-- http://percona.com/get/percona-toolkit.tar.gzResolving percona.com... 74.121.199.234, 74.121.199.234Connecting to percona.com|74.121.199.234|:80... connected.HTTP request sent, awaiting response... 301 Moved PermanentlyLocation: https://www.percona.com/get/percona-toolkit.tar.gz [following]--2016-09-22 09:17:02-- https://www.percona.com/get/percona-toolkit.tar.gzResolving www.percona.com... 74.121.199.234, 74.121.199.234Connecting to www.percona.com|74.121.199.234|:443... connected.HTTP request sent, awaiting response... 302 FoundLocation: https://www.percona.com/downloads/percona-toolkit/2.2.19/tarball/percona-toolkit-2.2.19.tar.gz [following]--2016-09-22 09:17:03-- https://www.percona.com/downloads/percona-toolkit/2.2.19/tarball/percona-toolkit-2.2.19.tar.gzReusing existing connection to www.percona.com:443.HTTP request sent, awaiting response... 200 OKLength: 1425623 (1.4M) [application/x-gzip]Saving to: “percona-toolkit.tar.gz”100%[=======================&gt;] 1,425,623 766K/s in 1.8s2016-09-22 09:17:05 (766 KB/s) - “percona-toolkit.tar.gz” saved [1425623/1425623][root@ultrera ~]# tar xf percona-toolkit.tar.gz[root@ultrera ~]# lspercona-toolkit-2.2.19 percona-toolkit.tar.gz[root@ultrera ~]# cd percona-toolkit-2.2.19[root@ultrera percona-toolkit-2.2.19]# perl Makefile.PLWarning: prerequisite DBD::mysql 3 not found.Writing Makefile for percona-toolkit[root@ultrera percona-toolkit-2.2.19]# makecp bin/pt-mysql-summary blib/script/pt-mysql-summary....Manifying blib/man1/pt-index-usage.1pManifying blib/man1/pt-duplicate-key-checker.1pManifying blib/man1/pt-config-diff.1pManifying blib/man1/pt-stalk.1p[root@ultrera percona-toolkit-2.2.19]# make installInstalling /usr/local/share/man/man1/pt-query-digest.1p...Installing /usr/local/bin/pt-query-digest...Appending installation info to /usr/lib64/perl5/perllocal.pod 运行工具可能会遇到下面的错误: Can’t locate Time/HiRes.pm in @INC 1234# 解决办法：[root@ultrera ~]# yum install -y perl-Time-HiRes[root@ultrera ~]# pt-query-digest --versionpt-query-digest 2.2.19 3. 开启 mysql慢日志a. 查看当前‘slow_query_log’ 状态：123456789101112131415161718192021222324252627mysql&gt; show variables like '%query%';+------------------------------+---------------------------------+| Variable_name | Value |+------------------------------+---------------------------------+| binlog_rows_query_log_events | OFF || ft_query_expansion_limit | 20 || have_query_cache | YES || long_query_time | 10.000000 || query_alloc_block_size | 8192 || query_cache_limit | 1048576 || query_cache_min_res_unit | 4096 || query_cache_size | 1048576 || query_cache_type | OFF || query_cache_wlock_invalidate | OFF || query_prealloc_size | 8192 || slow_query_log | OFF || slow_query_log_file | /var/lib/mysql/ultrera-slow.log |+------------------------------+---------------------------------+13 rows in set (0.00 sec)mysql&gt; show variables like 'log_queries_not_using_indexes';+-------------------------------+-------+| Variable_name | Value |+-------------------------------+-------+| log_queries_not_using_indexes | OFF |+-------------------------------+-------+1 row in set (0.00 sec) b. 启动slow_log, 配置123456789101112131415# 设定记录大于2s的sqlmysql&gt; set global long_query_time=2;Query OK, 0 rows affected (0.00 sec)# 设定log存放路径mysql&gt; set global slow_query_log_file='/tmp/ultraera-slow.log';Query OK, 0 rows affected (0.00 sec)# 启用慢日志mysql&gt; set global slow_query_log=ON;Query OK, 0 rows affected (0.00 sec)# 同时记录没有使用索引的sqlmysql&gt; set global log_queries_not_using_indexes=on;Query OK, 0 rows affected (0.00 sec) 等待一段时间，slow.log 增大的非常快，实际生产中，注意不要被slow.log将磁盘撑满，影响到正常生产使用。 4. 分析pt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 a. 简单使用方法：1pt-query-digest slow.logs 输出信息如下： Overall这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev)查询的执行时间（Exec time）锁占用的时间（Lock time）MySQL执行器需要检查的行数（Rows examine）最后返回给客户端的行数（Rows sent）查询的大小。 ProfileRank ： 整个分析中该“语句”的排名，一般也就是性能最慢的Query ID ：每个查询都有一个Response time ： “语句”的响应时间以及整体占比情况。Calls ：“语句”的执行次数R/Call ：每次执行的平均响应时间。 V/M详细信息列出上面Profile中每个Query ID的详细信息 b. 从tcpdump包中分析：通过tcpdump命令抓取一定时间网络数据包，然后进行分析：1pt-query-digest --type tcpdump mysql.tcp.txt c. pt-query-digest 还支持很对其他的数据包分析形势，但是我们主要使用的还是针对慢日志进行分析 更多的帮助文档，请查看官方文档：http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html 5. 使用Anemometer将pt-query-digest的MySQL慢查询可视化 需要安装php 5.3 and over 需要预先配置mysql数据库 需要预先安装好pt-query-digest 5.1 安装123456[root@ultrera ~]# git clone https://github.com/box/Anemometer.git anemometer[root@ultrera ~]# mv anemometer /var/www/html[root@ultrera ~]# cd /var/www/html/anemometer/[root@ultrera anemometer]# mysql -h localhost -u root -p &lt; mysql56-install.sql[root@ultrera anemometer]# mysql -h localhost -u root -p -e \"grant all privileges on slow_query_log.* to 'anemometer'@'%' identified by 'anemometer';\" 5.2 配置123456789[root@ultrera anemometer]# cp conf/sample.config.inc.php conf/config.inc.php[root@ultrera anemometer]# vim conf/config.inc.php# line 48,49 and line 284,285设置数据库的用户名和密码;[root@ultrera anemometer]# vim conf/config.inc.php# line 7,8设置数据库的用户名和密码; 5.3 导入将pt-query-digest 的分析结果到anemometer； pt-query-digest version &lt; 2.2 123456$ pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --review-history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-&gt;{Bytes} = length(\\$event-&gt;{arg}) and \\$event-&gt;{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log pt-query-digest version &gt;= 2.2 1234567891011pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-&gt;{Bytes} = length(\\$event-&gt;{arg}) and \\$event-&gt;{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.logPipeline process 11 (aggregate fingerprint) caused an error: Argument \"57A\" isn't numeric in numeric gt (&gt;) at (eval 40) line 6, &lt;&gt; line 27.Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57B\" isn't numeric in numeric gt (&gt;) at (eval 40) line 6, &lt;&gt; line 28.Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57C\" isn't numeric in numeric gt (&gt;) at (eval 40) line 6, &lt;&gt; line 29.","link":"/2016/09/22/how-to-use-pt-query-digest/"},{"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","text":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 安装JAVA环境123456789101112131415161718192021[root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\"[root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpmPreparing... ########################################### [100%] 1:jdk ########################################### [100%]Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar...[root@7 ~]# vi /etc/profile# add follows to the endexport JAVA_HOME=/usr/java/defaultexport PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar[root@7 ~]# source /etc/profile 安装Tomcat7123456[root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz[root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz[root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7[root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7[root@7 ~]# chown -R tomcat7. /usr/tomcat7 创建开机自启动脚本12345678910111213141516[root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service# create new [Unit]Description=Apache Tomcat 7After=network.target[Service]Type=oneshotExecStart=/usr/tomcat7/bin/startup.shExecStop=/usr/tomcat7/bin/shutdown.shRemainAfterExit=yesUser=tomcat7Group=tomcat7[Install]WantedBy=multi-user.target 启动Tomcat712[root@7 ~]# systemctl start tomcat7.service[root@7 ~]# systemctl enable tomcat7.service","link":"/2017/04/05/howto-set-tomcat-7-automatic-startup-with-centos-7/"},{"title":"HowTo-use-TortoiseGit-for-Windows","text":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 安装Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择”TortoiseGit”>“Settings”来初始化我们设置。 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码：","link":"/2017/10/19/tortoisegit-for-windows/"},{"title":"How to install MariaDB 10.1 on CentOS 7.x","text":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 创建MariaDB 10.1的Yum源123456789cat &lt;&lt;EOF | sudo tee -a /etc/yum.repos.d/MariaDB.repo# MariaDB 10.1 CentOS repository list# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.1/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1EOF 注意MariaDB会随着时间的推移版本不断更新，你可以到repo仓库获取对应版本链接 使用Yum安装MariaDB 10.1 即可1sudo yum install MariaDB-server MariaDB-client -y 启动MariaDB并设置为开机自启动12sudo systemctl start mariadb.servicesudo systemctl enable mariadb.service 初始化MariaDB设置123456789101112sudo /usr/bin/mysql_secure_installation# 回答以下问题，请记住你的数据库root用户密码:Enter current password for root (enter for none): 回车Set root password? [Y/n]: YNew password: 你要设置的数据库root密码Re-enter new password: 你要设置的数据库root密码Remove anonymous users? [Y/n]: YDisallow root login remotely? [Y/n]: YRemove test database and access to it? [Y/n]: YReload privilege tables now? [Y/n]: Y","link":"/2017/08/07/install_mariadb10_centos7/"},{"title":"Howto Install Redmine on Ubuntu 16.04","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# baseapt install mysql-server libmysqlclient-dev git-core subversion imagemagick libmagickwand-dev libcurl4-openssl-dev apt install build-essential mysql-server ruby ruby-dev libmysqlclient-dev imagemagick libmagickwand-dev# install mysqlsystemctl enable mysql.servicesystemctl start mysql.servicecreate database redmine character set utf8;grant all privileges on redmine.* to redmine@'localhost' identified by 'redmine';flush privileges;# Install rubygpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3curl -sSL https://get.rvm.io | bash -s stablesource /etc/profile.d/rvm.shrvm requirementsrvm install 2.4.1rvm use 2.4.1 --default# install passenger and nginx gem install passenger --no-ri --no-rdocpassenger-install-nginx-module# 1. auto install nginx.curl https://raw.githubusercontent.com/makevoid/nginx-passenger-ubuntu/master/nginx/nginx.service &gt; /lib/systemd/system/nginx.servicesystemctl daemon-reloadsystemctl enable nginxvim /opt/nginx/conf/nginx.conf # 注销 location / {} 的配置server { listen 80; server_name [your_server_domain_name] # redmine.com; root /var/data/redmine/public; passenger_enabled on; client_max_body_size 10m; # Max attachemnt size}systemctl start nginx# install redminemkdir /var/datacd /var/datasvn co http://svn.redmine.org/redmine/branches/3.4-stable redminecd /var/data/redminecp -pR /var/data/redmine/config/database.yml.example /var/data/redmine/config/database.ymlvim config/database.yml # set redmine db user and password# Install Pluginscd /var/data/redminegem install bundler --no-ri --no-rdocbundle install# configure redminecd /var/data/redminemkdir public/plugin_assetschown -R www-data:www-data files log tmp public/plugin_assets config.ruchmod -R 755 files log tmp public/plugin_assets# input database and base file.RAILS_ENV=production bundle exec rake db:migrateRAILS_ENV=production bundle exec rake redmine:load_default_databundle exec rake generate_secret_token# restart nginx, install ok.systemctl restart nginx# restart redminetouch /var/data/redmine/tmp/restart.txt# configure email servicevim /var/data/redmine/config/configuration.yml","link":"/2017/12/26/Install_redmine3.4_rbuy2.4.1_passenger_nginx_mysql_ubuntu16.04/"},{"title":"HowTo Use SSR Service on Mac","text":"应邀制作一份关于Mac SSR的连接使用。 准备 SSR 服务提供商，SSGlobal ，你可以到Telegram加入我们。SSGlobal Group MacOS 版本 10.12.6，经过实测OS版本对实际使用影响并不大。 SSR Client， 下载 SSR服务如果你需要科学上网的话，非常愿意给你推荐我正在使用的SSR服务商，但是由于其官方网站和客户沟通工具TG需要科学上网才能使用，所以你可以联系到我来介绍你们。 最新定价计划： Plan-A：¥15.00元，1个月，无限流量，不限速，可自助切换节点。 Plan-B：¥15.00元，3个月，6G流量包，不限速，可自助切换节点。 增加线路：¥8.00元，1个月，1条。 注：增加线路仅支持Plan-A用户配套购买，不超过主线路最长期限，不足1个月剩余时限用户不支持购买 注册账号立即注册 这里alexman@mac.local 仅仅是演示邮箱，请填写对应属于你的邮箱. 当你点击提交完成后，在你的邮箱会收到一封激活邮件，点击其中链接或将链接复制到浏览器中即可激活。 这里同样是激活链接，同样仅作为演示。 登录系统立即登录 输入注册时的用户名密码，即可登录到系统内，然后在首页找到进入后台按钮，即可看到试用信息。 这里填写用户名或邮箱都可以。 进入系统后，找到订阅链接信息，默认情况下，你应该只有一条线路信息，付费用户享有应急通道。 上图中”切换“，用来切换不同服务器节点，注意，切换后要到客户端内刷新订阅信息，下面会讲到。 SSR Client 安装在本文最上面已经有了，如何下载SSR 客户端的地方，细心的朋友，应该已经在SSGlobal官网上找到了对应下载页面，其中包含全平台的客户端工具。 下载立即下载 下载完成后，找到你的下载文件，双击打开，将程序拖到Mac程序目录即完成安装，和Mac其他软件安装并无不同。 启动程序 在Launchpad中找到最近安装的 Shadowsocks NG R8，点击启动后，Mac右上角导航栏中会有一个小飞机的图标，点击可以看到以下信息： 上图中已经有我的订阅信息，请忽略 编辑订阅信息选择编辑订阅信息，然后将你在SSGlobal 网站后台拿到的订阅信息添加到其中 注意只要添加URL信息即可，不需要修改其他。 然后选择手动更新订阅，这里在你的服务列表内，就有了你的服务器节点信息，选择对应节点即可开启科学上网 PAC 规则首次使用PAC需要更新一次PAC规则，操作如下图。 这里的PAC规则是从GFWLists更新的，由于其更新速度较慢，所以如果日常使用发现某些网站无法使用，可以手动添加到PAC规则内 || domain , 这里表示匹配所有代理 更多关于用户规则，可以查看这里，使用手册 结语到这里，基本常用的安装和使用已经完成了，如果测试后仍旧无法正常使用，请仔细检查是否遗漏步骤，也可以与我取得沟通。","link":"/2017/11/15/howto-user-ssr-on-mac/"},{"title":"Linux 中的三个特殊权限","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556Linux中除了普通权限之外，还有三个特殊权限。SUID:：以文件的所属用户执行，而非执行文件的用户，多用于可执行文件，设置suid后，在权限位中，所属用户的 最后一个权限为变为s，添加SUID权限可用“+s”表示。例如：passwd[adam@ultraera ~]$ which passwd/usr/bin/passwd[adam@ultraera ~]$ ls -l /usr/bin/passwd-rwsr-xr-x. 1 root root 25980 Feb 22 2012 /usr/bin/passwd[adam@ultraera ~]$SGID：主要针对文件夹，在设置了SGID的文件夹中创建任何新文件都继承该文件的所属组，设置sgid后，在权限位中，所属组的最后一个权限位变为s，添加SGID权限可用“+s”表示。例如：[adam@ultraera ~]$ mkdir ultraera[adam@ultraera ~]$ ls -ltotal 4drwxrwxr-x 2 adam adam 4096 Nov 27 21:09 ultraera[adam@ultraera ~]$ chmod g+s ultraera/[adam@ultraera ~]$ ls -ltotal 4drwxrwsr-x 2 adam adam 4096 Nov 27 21:09 ultraera[adam@ultraera ~]$ suPassword:[root@ultraera adam]# mkdir -p ultraera/test[root@ultraera adam]# ls -l ultraera/total 4drwxr-sr-x 2 root adam 4096 Nov 27 21:09 test[root@ultraera adam]#sticky：针对文件夹，对目录拥有写权限的用户，仅可以删除其所拥有的文件，无法删除其他用户所拥有的文件，设置了sticky之后，在权限位，other的最后一个权限位变为t,添加SGID权限可用“+t”表示。例如：[root@ultraera tmp]# mkdir ultraera[root@ultraera tmp]# chmod a=rwx,o+t ultraera/[root@ultraera tmp]# ls -ld ultraera/drwxrwxrwt 2 root root 4096 Nov 27 21:29 ultraera/[root@ultraera tmp]# useradd user1[root@ultraera tmp]# useradd user2[root@ultraera tmp]# su user1[user1@ultraera tmp]$ touch ./ultraera/test[user1@ultraera tmp]$ ls -l ultraera/total 0-rw-rw-r-- 1 user1 user1 0 Nov 27 21:31 test[user1@ultraera tmp]$ exitexit[root@ultraera tmp]# su user2[user2@ultraera tmp]$ rm -f ./ultraera/testrm: cannot remove `./ultraera/test': Operation not permitted[user2@ultraera tmp]$同样使用chmod来设定特殊权限，与普通权限一样，特殊权限也可以用数字表示：suid ： 4sgid ： 2sticky ： 1chmod 4644 filename #设置文件suid权限chmod 2755 flodername #设置文件夹sgid权限chmod 1755 flodername #设置文件夹sticky权限","link":"/2016/03/29/linux-de-san-ge-te-shu-quan-xian/"},{"title":"Linux 笔试试题","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205一. 选择题 （1题1分）1. 当登录Linux时，一个具有唯一进程ID号的shell将被调用，这个ID是什么( )A. NID B. PID C. UID D. CID答案:B2. 用vi打开一个文件，如何用字母\"new\"来代替字母\"old\" ( )A. :s/old/new/g B. :s/old/new C. :1,$s/old/new/g D. :r/old/new答案:A3. 请选择对标准的变量PS2正确的描述( )A. 是一个主shell提示符变量 B. 是一个一般的shell提示符变量C. 是第二主shell提示符变量 D. 是一个连续提示符变量答案:B4. 哪一个命令能用来查找文件TESTFILE中只包含四个字符的行?( )A. grep '^????$' TESTFILE B. grep '????' TESTFILEC. grep '^....$' TESTFILE D. grep '....' TESTFILE答案:C5. 一个bash shell脚本的第一行是什么( )A. #!/bin/bash B. #/bin/bash C. #/bin/csh D. /bin/bash答案:A6. 用标准的输出重定向(&gt;)像\"&gt; file01\"能使文件file01的数据（ ）A. 被移动 B. 被复制 C. 被打印 D. 被覆盖答案:D7. 下面哪个命令是用来定义shell的全局变量( )A. exportfs B. alias C. exports D. export答案:D8. 如果想加载一个/dev/sdb1的windows95分区到/mnt/win95目录，需要运行哪个命令( )A. mount -t hpfs /dev/sdb1 /mnt/win95B. mount -t hpfs /mnt/win95 /dev/sdb1C. mount -t vfat /dev/sdb1 /mnt/win95D. mount -t vfat /mnt/win95 /dev/sdb1答案:C9. 哪个文件存放用户密码信息( )A. /boot/passwd B. /etc/shadow C. /var/passwd D. /dev/passwd答案:B10. 假定kernel支持vfat分区，下面哪一个操作是将/dev/sda1，一个window98分区加载到/win目录( )A. mount -s win /dev'sda1 /winB. mount -fs=msdos /dev/sda1 /winC. mount -t vfat /dev/sda1 /winD. mount -t windows /win /dev/sda1答案:C11. 默认情况下管理员创建了一个用户，就会在( )目录下创建一个用户主目录。A. /usr B. /home C. /root D. /etc答案:B12. 如果要列出一个目录下的所有文件需要使用命令行( )。A. ls –l B. ls C. ls –a D. ls -d答案:C13. 利用哪个工具可以设置用户在文件系统中的空间大小( )。A. turboservice B. turbofscfg C. turbonetcfg D. turboxcfg答案:B14. 哪个命令可以将普通用户转换成超级用户( )A. super B. passwd C. tar D. su答案:D15. 哪个命令用来显示/home及其子目录下文件名( )A. ls -R /home B. ls -d /home C. ls -a /home D. ls -l /home答案:A16. 在vi模式下，哪个命令用来删除光标处的字符( )A. xd B. x C. dd D. d答案:B dd删除一行,x删除当前字符17. 在一行内运行多个命令需要用什么字符隔开( )A. @ B. $ C. ; D. *答案:C18. 确定myfile的文件类型的命令是( )A. whatis myfileB. file myfileC. type myfileD. type -q myfile答案:B19. 哪些命令组合起来能统计多少用户登录系统( )A. who | wc –w B. who | wc –l C. who | wc –c D. who | wc答案:BD20. 用 \"rm -i\",系统会提示什么来让你确认( )A. 命令行的每个选项 B. 是否真的删除 C. 是否有写的权限 D. 文件的位置答案:B21. Linux启动的第一个进程init启动的第一个脚本程序是( )。A. /etc/rc.d/init.d B. /etc/rc.d/rc.sysinit C. /etc/rc.d/rc5.d D. /etc/rc.d/rc3.d答案:B22. 按下( )键能终止当前运行的命令A. Ctrl-C B. Ctrl-F C. Ctrl-B D. Ctrl-D答案:a23. 用来分离目录名和文件名的字符是( )A. dash (-) B. slash (/) C. period (.) D. asterisk（*）答案:B24. 系统的配置文件在( )目录下A. /home B. /dev C. /etc D. /usr答案:C25. 显示用户的主目录的命令是什么?( )A. echo $HOME B. echo $USERDIR C. echo $ENV D. echo $ECHO答案:A26. 在vi编辑器里，哪个命令能将光标移到第200行( )A. g200 B. G200 C. :200 D. 200g答案:C:200可以，200G也可以27. 用\"useradd jerry\"命令添加一个用户，这个用户的主目录是什么?( )A. /etc/jerry B. /var/jerry C. /home/jerry D. /bin/jerry答案:C28. 哪一个命令能用来删除当前目录及其子目录下名为'core'的文件( )A. find . -name core -exec rm {} \\ ;B. find . -name core -exec rm ;C. find . -name core -exec rm {} ;D. find . -name core -exec rm {} -;答案:A29. 以下哪条命令在创建一个xp用户的时候将用户加入到root组中( )A. useradd -g xp root B. useradd -r root xp C. useradd -g root xp D. useradd root xp答案:C30. 不改变运行级别而重新读入inittab文件的命令是( )。A. init s B. init q C. init S D. init Q答案:B31. 以下哪个命令可以终止一个用户的所有进程( )A. skillall B. skill C. kill D. killall答案:D32. 通过修改哪个文件可以在创建用户的时候改变用 户主目录的路径( )A. /etc/default/passwd B. /etc/default/useradd C. /etc/profile D. /etc/fstab答案:B33. 以只读方式打开一个文件并进入vi编辑器的命令是( )A. view -r filename B. view filename C. vi filename D. vi -r filename答案:B34. 以下哪个命令是将缓存中的内容粘贴到光标之前( )A. a B. i C. P D. p答案:C35. 以下哪条vi命令能将文档5-20行间出现的abc替换成为cba ( )A. :1,$s/abc/cba/g B. :5,20/abc/cba/g C. :5-20s/abc/cba/g D. :5,20s/abc/cba/g答案:D. 在vi中通过哪条命令可以将ps命令执行的结果插入到文档中( )A. :r!ps B. :!ps C. :!rps D. :w!ps答案:A36. 以下哪个vi命令可以在当前位置插入/etc/passwd文本文件( )A. :r /etc/passwd B. :i /etc/passwd C. :w /etc/passwd D. :s /etc/passwd答案:A37. vi中复制整行的命令是( )A. y1 B. yy C. ss D. dd答案:B38. 以下哪个vi命令可以给文档的每行加上一个编号( )A. :e number B. :set number C. :r!date D. :200g答案:B38. 以下哪些文件只有根用户才能读写( )A. /etc/bashrc B. /etc/profile C. /etc/shadow D. /etc/passwd答案:BC39. 使用groupdel删除一个组的时候，命令执行失败，原因可能是( )A. 该组是系统组 B. 该组是空的 C. 该组中成员非空 D. 该组不存在答案:CD40. Linux中文件名构成的规则比较灵活表现在( )A. 文件名长度多达256个字符 B. 可以使用除了/符号外的所有ASCII字符C. 不区分大小写 D. 无扩展名限制答案:ABD41. 对用户的口令进行加解锁的命令是passwd,参数选项是( )A. –l B. –L C. –u D. -U答案:AC42. 如果你对文件和目录的权限不确定，则不能用( )命令来检测权限A. ps B. ck C. ls –l D. chown答案:ABD43. 选择对/proc文件系统不正确的描述( )A. 通常情况下，不提供中断、IO端口、CPU等信息 B. /proc文件系统可以提供系统核心的许多参数C. /proc是一个虚拟的文件系统 D. 可以得到系统中运行的进程的一些信息答案:A44. 以下哪些符号可以用来连接多条命令( )A. || B. &amp;&amp; C. ; D. |答案:ABCD45. 在shell中，下面哪些字符串当作普通字符串时候需要使用\"\\\"来转义( )A. 分号(;) B. 双引号(\") C. 单引号(') D. 反斜杆(\\)答案:BCD46. Linux中提供了几个重要的工具用来改变服务和进程的运行状态和运行级别以及初始化进程，它们是( )。A. chkconfig B. service C. turboservice D. ksysv答案:ABCD47. 在/etc/rc.d/init.d目录下的所有脚本至少支持两个运行参数,它们是( )。A. start B. restart C. stop D. reload答案:AC48. Linux一般被称为是稳定的服务器系统，它的安全性表现在( )A. 网络防火墙 B. 用户管理策略 C. 系统、目录、文件的权限控制 D. 封闭源码便于及时修正漏洞等答案:ABC49. 在vi中下列哪些命令不能用来在光标前插入文本( )A. p [text] B. i [text] C. o [text] D. a [text]答案:ACD50. 在本地的文件系统中下列哪些linux路径结构是无效的( )A. \\usr/zhang/memo B. /usr/zhang/memo C. //usr\\zhang/memo D. \\usr\\zhang\\memo答案:ACD二、简答题 （1题3分）1.常见的Linux发行版本都有什么？你最擅长哪一个？它的官网网站是什么？说明你擅长哪一块？2.Linux开机启动流程详细步骤是什么？系统安装完，忘记密码如何破解？4.某一天突然发现Linux系统文件只读，该怎么办呢？完整操作步骤。5.安装一台系统使用DVD光盘安装，如何安装50台Linux系统如何安装呢？思考一下。6.用虚拟机安装了一台Linux系统，突然想克隆一台服务器，克隆后发现无法上网，如何解决？7.Linux网卡配置文件路径是什么？要使服务器上外网，必须满足的条件有哪些？需要配置什么？8.一般可以使用什么软件远程linux服务器？通过什么上传文件和下载文件？9./mnt目录主要用于什么？/root目录跟root用户有什么关系？/根目录与/boot目录有什么联系？10.某一天误操作，执行了rm -rf * ，会有哪些情况发生？请举例。三、 公有云题目 （1题5分）1. 请解释上云的好处是什么？传统业务类型与公有云也为类型有什么区别？请举例说明。2. 列出你用过的阿里云\\AWS\\Azure服务？并讲述他们的作用？3. 请列出你觉得阿里云\\AWS\\Azure目前的特色和不成熟的地方是那些？你觉得应该如何改正。4. 请用阿里云\\AWS\\Azure设计一个视频网站的架构图并进行解释说明。","link":"/2016/03/23/linux-bi-shi-shi-ti/"},{"title":"Mac(1) 调整Launchpad图标大小","text":"很多人觉得默认Launchpad的应用程序图标很大，空间比较拥挤，不过这个其实是可以通过调整Launchpad每一行和每一列图标的数量，来调整Launchpad图标大小。 默认如下图： 代码块： 12345# 调整每一行显示数量为8个。➜ defaults write com.apple.dock springboard-columns -int 10＃ 重启Launchpad➜ defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock 修改后如下：","link":"/2016/04/09/macxi-tong-diao-zheng-launchpadtu-biao-da-xiao/"},{"title":"MacTips：使用命令关闭和启动AirPort","text":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 查看网络接口12345678ifconfigen0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201&lt;PERFORMNUD,DAD&gt; media: autoselect status: active 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en01networksetup -setairportpower en0 off 查看状态1networksetup -getairportpower en0 关闭AirPort1networksetup -setairportpower en0 on","link":"/2017/02/27/command-disable-airport/"},{"title":"Mac(2) 解决oh-my-zsh在终端下打开缓慢","text":"升级Mac OS X 10.11 之后，使用CleanMyMac 3清理9GB的垃圾文件，之后导致打开iTerm时加载主机名特别的慢，Mac的命令行工具我使用的是iTerm＋ohmyzsh，这个问题困扰了我快两个月，工作比较忙，所以一直用Zoc 代替，也没有认真的研究，最近有需求用到它，实在不行，研究一下，发现，是因为我清理系统的时候把终端日志的索引文件清理掉了，所以每次打开的时候都要先加载索引导致了首次开启非常慢，解决办法是，只要把终端缓存的日志文件删除即可： 代码块： 12345678910# 日志文件路径# /private/var/log/asl/*.asl➜ ~ sudo du -sh /private/var/log/asl/Password:2.7G /private/var/log/asl/➜ ~ sudo rm -rf /private/var/log/asl/*.asl➜ ~ sudo du -sh /private/var/log/asl/208M /private/var/log/asl/ 关闭终端，再次打开，问题解决。","link":"/2016/04/08/zsh-bug01/"},{"title":"Mac 如何快速录制GiF小视频","text":"在平时的沟通中经常有需要用到分享一个连续的操作等，在很多时候截图不能满足我的需求，录制视频文件的话呢，文件过大，不同平台限制过多是一个很麻烦的视频，所以录制GIF是一个非常好的解决办法，今天给大家推荐两款软件，关于录制GIF和GIF编辑。 录制工具(1) KapKap是一款轻量级开源的GIF录制工具，这意味它是免费简单易用；你可以从官网下载。官网 安装完成，启动Kap，它是以一个圆环的形式显示在状态栏上，所有的界面都在这里，你可以点击红框直接开始录制，点击后你的屏幕上会出现一个虚线框，你可以通过拖动四角调整大小。 确定好录制范围之后，这时你发现Kap上红色录制按钮一个变成一个红色实心圆，再次单击即可开始录制。 在你操作完成之后，再次单击，即可结束录制。 录制工具(2) MacApp：QuickTime Player以上管理Kap的使用GIF录制我是用过Mac自带的QuickTime Player录制，教程可以直接看 @JasonZone 的教程 链接 GIF编辑在@JasonZone 最后使用的是一个网站进行了从mov转换为gif格式的操作，这里推荐一个Mac应用 Video to Gif Maker，可以批量进行多个GIF文件转换，也支持在GIF增加文字或图片，这很实用。","link":"/2017/09/12/mac-recoding-gif/"},{"title":"MacTips 单独设置程序语言","text":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 Command1defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： 1defaults write com.microsoft.Outlook AppleLanguages -array zh 例子 修改Microsoft Office Applocation. 1defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' 1defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' 1defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 1defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。1defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html","link":"/2017/09/04/mactips-choose-apps-deafults-language/"},{"title":"Manage Tomcat Service Use Shell Script","text":"Tomcat 项目管理交互式脚本. Install pssh Use Key Login Server Hosts ~/.ssh/config 配置使用host名登录服务 指定 Server Group Files 存放位置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340#!/bin/bash# Author Alex LU# Date 2016-07-20# Version 1.0# HostFileHostDIR=~/.ssh/host/# war包上传到该目录# /warfolder:'jobs_select (){ STRING=``cat $vmname | grep group if [ -z \"$STRING\" ] then job_tomcat else job2_tomcat fi}'function HOST(){ echo \"\" echo \"############ Host List ###############\" echo \"ckgroup:ck01,ck02,ck03,ck04\" echo \"sjgroup:sj01,sj02,sj03,sj04\" echo \"ddgroup:dd01,dd02,dd03,dd04\" echo \"htgroup:ht01,ht02\" echo \"othergroup:report,tg\" echo \"######################################\" echo \"\" echo \" Tips: 如果要选择ck01，则输入ck01即可，如果输入ck组，输入ckgroup即可,如果要退出当前脚本输入exit\" echo \" Tips: 退回上一步请输入back\" read -p \"请输入你的选择:\" vmname case \"$vmname\" in ck01|ck02|ck03|ck04|sj01|sj02|sj03|sj04|dd01|dd02|dd03|dd04|report|tg|ht01|ht02) job_tomcat $vmname ;; ckgroup|sjgroup|htgroup|ddgroup|othergroup) job2_tomcat $vmname ;; exit) exit 0; ;; back) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入的选择!\" HOST ;; esac}function job_tomcat (){ echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"#################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -H $vmname -i \"ps aux | grep tomcat\" job_tomcat ;; 2) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" job_tomcat ;; 3) pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 4) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 5) pssh -H $vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入正确的选项！\" job_tomcat ;; esac}function job2_tomcat (){ echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat\" job2_tomcat ;; 2) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" job2_tomcat ;; 3) pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 4) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 5) pssh -h $HostDIR/$vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job2_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入正确的选项！\" job_tomcat ;; esac}function HOST2(){ echo \"\" echo \"############ Host List ###############\" echo \"ckgroup:ck01,ck02,ck03,ck04\" echo \"sjgroup:sj01,sj02,sj03,sj04\" echo \"ddgroup:dd01,dd02,dd03,dd04\" echo \"htgroup:ht01,ht02\" echo \"othergroup:report,tg\" echo \"######################################\" echo \"\"# 确认是否所有项目包发布后立即启动 echo -e \"\\033[7m 更新订单服务器的war包时，会自动启动tomcat程序，为了释放war包，修改order.no，请设置war包内order.no＝0 ,其它服务器tomcat不会自启动，请使用命令操作 \\033[0m\" echo \" Tips: 如果要选择ck01，则输入ck01即可，如果输入ck组，输入ckgroup即可,如果要退出当前脚本输入exit\" echo \" Tips: 退回上一步请输入back\" read -p \"请输入你的选择:\" vmname case \"$vmname\" in ck01|ck02|ck03|ck04|sj01|sj02|sj03|sj04|dd01|dd02|dd03|dd04|report|tg|ht01|ht02) read -p \"请输入war包的名称,例如:dzcx_ck.war :\" warname pscp_tomcat $vmname $warname ;; ckgroup|sjgroup|htgroup|othergroup) read -p \"请输入war包的名称,例如:dzcx_ck.war :\" warname pscp2_tomcat $vmname $warname ;; ddgroup) read -p \"请输入war包的名称,例如:dzcx_ck.war :\" warname pscp3_tomcat $vmname $warname ;; exit) exit 0; ;; back) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入的选择!\" HOST ;; esac}function pscp_tomcat (){ # single host pscp.pssh -H $vmname /warfolder/\"$warname\" /tomcat7/webapps/ HOST2}function pscp2_tomcat (){ # group pscp.pssh -h $HostDIR/$vmname /warfolder/\"$warname\" /tomcat7/webapps/ HOST2}function pscp3_tomcat (){ # group dd 因为订单需要修改服务器编号 pscp.pssh -h $HostDIR/$vmname /warfolder/\"$warname\" /tomcat7/webapps/ pssh -h $vmname -i \"service tomcat7 start\" sleep 10 pssh -H dd02 \"sed -i 's/order.no=0/order.no=1/g' /tomcat7/webapps/dzcx_socket/WEB-INF/classes/base.properties\" pssh -H dd03 \"sed -i 's/order.no=0/order.no=2/g' /tomcat7/webapps/dzcx_socket/WEB-INF/classes/base.properties\" pssh -H dd04 \"sed -i 's/order.no=0/order.no=3/g' /tomcat7/webapps/dzcx_socket/WEB-INF/classes/base.properties\" HOST2}function main (){echo \"\"echo \"######################################\"echo \"\"echo \"# 1. 更新war包\"echo \"# 2. 管理tomcat7\"echo \"# 3. 管理mysql\"echo \"# 4. 管理redis\"echo \"# 5. 同步服务器时间\"echo \"# 6. 清理当前屏幕\"echo \"# 7. 退出\"echo \"\"echo \"######################################\"read -p \"请输入你的选择:\" numcase \"$num\" in 1) HOST2 ;; 2) HOST ;; 3) echo \"该功能暂未开放\" ;; 4) echo \"该功能暂未开放\" ;; 5) pssh -h $HostDIR/allhost -i \"service ntpd restart\" ;; 6) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; 7) exit 0 ;; *) echo \"请输入正确的数值！\" main ;;esac}# --------------------------------- main -------------------------------------------------clearecho \"\"echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\"command -v pssh &gt; /dev/null 2&gt;&amp;1if [ $? -eq 0 ]then mainelse echo -e \"\\033[07m\" echo -e \"系统检测到您还没安装pssh，请预先安装pssh\" echo \"yum install -y epel-release\" echo \"yum install -y pssh\" echo \"安装成功请重新运行此脚本\" echo -e \"\\033[0m\"fi","link":"/2016/07/27/manage-tomcat-service-use-bash-shell-script/"},{"title":"MySQL 命令行辅助 mycli","text":"InstallMycli is tested on macOS and Linux. It runs on Python 2.7 and 3.4+. NOTE: Python 2.6 support was dropped in mycli 1.9.0. If you’re running Python 2.6, you’ll want to install mycli 1.8.1. ######Python Package: If you already know how to install python packages, then you can do: You might need sudo. 123456789101112131415161718192021222324252627$ pip install myclior$ easy_install mycli# Windows:# Follow the instructions on this blogpost to install mycli on Windows: https://www.codewall.co.uk/installing-using-mycli-on-windows/# macOS:#The easiest way install mycli on a Mac is to use Homebrew.$ brew install mycli# Linux:# Debian/Ubuntu Package:# https://packages.debian.org/search?keywords=mycli$ sudo apt-get update$ sudo apt-get install mycli# Fedora$ sudo dnf install mycli# RHEL, Centos:# We don't have packages for RHEL or Centos, yet. Instead, use pip to install mycli. You can install pip on your system using:$ sudo yum install python-pip python-devel# Once that is installed, you can install mycli:$ sudo pip install mycli Install Error QA.1Cannot uninstall 'configobj'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall. Fix code1pip install --ignore-installed mycli","link":"/2019/07/03/sdertfvdsrt222/"},{"title":"MySQL(1) 常用优化","text":"环境：MySQL 5.5 &amp; MySQL 5.6 &amp; RHEL/CentOS 5/6/7 1. MySQL 系统配置优化网络配置方面：修改/etc/sysctl.conf123# 增加tcp支持的队列数 net.ipv4.tcp_max_syn_backlog = 65535# 减少断开时 打开文件限制 修改/etc/security/limits.conf123# 增加： * sort nofile 65535 * hard nofile 65535 2. MySQL 配置文件优化 配置文件位置：/etc/my.cnf /etc/mysql/my.cnf 如果/etc下没有my.cnf，需要拷贝一份 1cp /usr/share/mysql/my-medium.cnf /etc/my.cnf 配置文件查找顺序：mysql -verbose –help | grep -A 1 ‘Default options’ 常用配置说明: 1innodb_buffer_pool_size 设置mysql数据库innodb存储缓冲池的大小，如果是独立的mysql服务，建议设置为物理内存的75％左右，如果和apahce等服务一起运行时，则根据实际需求设定，尽可能大。 1innodb_buffer_pool_instances 这是mysql5.5中新增的一个参数，用于控制缓冲池的个数，默认情况下只有1个缓冲池，设置多个缓冲池可以增加并发性，提事物运算效率。 1innodb_log_buffer_size 设定日志缓冲区的大小，由于体制最长每秒就会刷新，不需要太大。 1innodb_flush_log_at_trx_commit 关键参数，对于innodb的IO效率影响很大，默认值为1，可以取值0：不自动同步log到磁盘，由mysql每秒自动执行，1：将所有事物直接写到磁盘，可以用在保证数据绝对安全的地方，会影响效率，2：先将事物纪录保存在内存中，有mysql每秒统一写入磁盘，建议设定为2 12innodb_read_io_threads;innodb_write_io_threadsm; mysql5.5 新增的两个参数，决定了Innodb读写的io进程数量，默认为4，可以根据CPU的实际性能设定。 1innodb_file_per_table 关键参数，控制Innodb每一个表实用独立的表空间，默认为off，也就是所有的表都会建立在共享空间，不利于资源回收 1innodb_stats_on_metadata 决定了mysql在什么情况下会刷新innodb表的统计信息，可以关闭，管理员选取时间手动刷新。存在的目的保证优化器正确找到索引. mysql最大连接数限制1max_connections=5000 不区分表名称大小写1lower_case_table_names=1 修改默认字符编码12345# mysql 5.1default-character-set=utf8# mysql 5.5 &amp; mysql 5.6character-set-server=utf8 最大错误操作次数 : 默认是10，尽量调大，否则容易导致mysql对来访主机锁定1max_connect_errors = 10000 设置mysql时区：默认mysql使用的系统时区，其实我们也可以在mysql内设定时区1default-time_zone = '+8:00' 以上配置，如何在mysql内，检测是否生效12345show variables like '%max_connections%'show variables like '%time_zone%'show variables like '%max_connect_errors%'show variables like '%character-set-server%'show variables like '%lower_case_table_names%' 修改/etc/my.cnf这是需要重启mysql才能生效，但是很多时候，我们不方便重启mysql，这时我们需要在mysql临时修改配置，注意并不是所有选项都可以在运行中修改，以修改时区为例：12345# 修改全局设置set global time_zone='+8:00'# 修改当前会话set time_zone='+8:00' 3. 第三方工具对mysql配置进行优化 http://toolspercona.com 先回答问题，然后根据问题你给出的答案，网站会给你一个参考配置。","link":"/2016/06/16/mysql03/"},{"title":"MySQL(2) 开启慢日志优化","text":"工欲善其事，必先利其器 – mysql开启慢日志优化慢查询日志顾名思义就是记录查询比较慢得日志。 测试环境 mysql-server 5.6 CentOS 6.5 VMware Fushion 8 pro 首先，第一部查看是否已经开启慢查询日志： 123456789101112mysql&gt; show variables like '%slow%';+---------------------+---------------------------------+| Variable_name | Value |+---------------------+---------------------------------+| log_slow_queries | OFF || slow_launch_time | 2 || slow_query_log | OFF || slow_query_log_file | /var/run/mysqld/mysqld-slow.log |+---------------------+---------------------------------+4 rows in set (0.00 sec)mysql&gt; 打开慢查询日志。修改MySQL的配置文件my.cnf一般是在/etc目录下面，加上下面三行配置后重启MySQL。 123slow_query_log = ONslow_launch_time = 2slow_query_log_file = /usr/local/mysql/data/slow_query.log slow_launch_time只能精确到秒，如果需要更精确可以使用一些第三方的工具比如后面介绍的pt-query-digest 12345678910111213mysql&gt; show variables like '%slow%';+---------------------------+--------------------------------------+| Variable_name | Value |+---------------------------+--------------------------------------+| log_slow_admin_statements | OFF || log_slow_slave_statements | OFF || slow_launch_time | 2 || slow_query_log | ON || slow_query_log_file | /usr/local/mysql/data/slow_query.log |+---------------------------+--------------------------------------+5 rows in set (0.00 sec)mysql&gt; Tips: 我这里用的MySQL版本是5.6，不同版本的MySQL开启慢查询的配置是不同的，比如5.6之前的某些版本是long_query_time, long_query_time和log-slow-queries。可以先在终端执行show variables like ‘%slow%’;查看下当前版本具体配置是什么。 也可以在终端中通过设置全局变量来打开慢查询日志： 1set @@global.slow_query_log = ON; 保持慢查询日志到表中MySQL支持将慢查询日志保存到mysql.slow_log这张表中。通过@@global.log_output可以设置默认为TABLE，FILE和TABLE只能同时使用一个。 123456789mysql&gt; select @@global.log_output;+---------------------+| @@global.log_output |+---------------------+| FILE |+---------------------+1 row in set (0.00 sec)mysql&gt; 1set @@global.log_output='TABLE'; 12345678910111213141516171819202122mysql&gt; show create table mysql.slow_log;+----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| Table | Create Table |+----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| slow_log | CREATE TABLE `slow_log` ( `start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `user_host` mediumtext NOT NULL, `query_time` time NOT NULL, `lock_time` time NOT NULL, `rows_sent` int(11) NOT NULL, `rows_examined` int(11) NOT NULL, `db` varchar(512) NOT NULL, `last_insert_id` int(11) NOT NULL, `insert_id` int(11) NOT NULL, `server_id` int(10) unsigned NOT NULL, `sql_text` mediumtext NOT NULL, `thread_id` bigint(21) unsigned NOT NULL) ENGINE=CSV DEFAULT CHARSET=utf8 COMMENT='Slow log' |+----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 row in set (0.00 sec)mysql&gt; 我们可以用下列语句用来模仿慢查询； 1select sleep(10); 123456789101112mysql&gt; select * from mysql.slow_Log -&gt; ;ERROR 1146 (42S02): Table 'mysql.slow_Log' doesn't existmysql&gt; select * from mysql.slow_log;+---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+| start_time | user_host | query_time | lock_time | rows_sent | rows_examined | db | last_insert_id | insert_id | server_id | sql_text | thread_id |+---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+| 2016-03-21 23:07:15 | root[root] @ localhost [] | 00:00:10 | 00:00:00 | 1 | 0 | | 0 | 0 | 0 | select sleep(10) | 2 |+---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+1 row in set (0.01 sec)mysql&gt; 慢查询日志分析 可以使用MySQL自带的mysqldumpslow工具。使用很简单，可以跟-help来查看具体的用法。 12345# -s：排序方式。c , t , l , r 表示记录次数、时间、查询时间的多少、返回的记录数排序；# ac , at , al , ar 表示相应的倒叙； # -t：返回前面多少条的数据；# -g：包含什么，大小写不敏感的； mysqldumpslow -s r -t 10 /slowquery.log#slow记录最多的10个语句 mysqldumpslow -s t -t 10 -g \"left join\" /slowquery.log#按照时间排序前10中含有\"left join\"的 可以导到mysql.slow_query表中，然后通过sql语句进行分析。 使用第三方工具，下面会有介绍。 pt-query-digestpt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。最简单地用法如下： 1pt-query-digest slow.logs 输出信息大致如下: 12","link":"/2016/03/22/mysql-slow-query/"},{"title":"MySQL(3) mysqldump常用参数","text":"常用的mysqldump命令组合。 备份数据库123mysqldump db_name &gt; bak_name.sqlmysqldump -A -u [dbuser] -p db_name &gt; bak_name.sqlmysqldump -d -A --add-drop-table -uroot -p &gt;xxx.sql 备份所有库到一个单独的文件1mysql -e 'show databases' | sed -n '2,$p' | xargs -I DB 'mysqldump DB &gt; DB.sql' 1. 导出结构不导出数据1mysqldump --opt -d db_name -u root -p &gt; xxx.sql 2. 导出数据不导出结构1mysqldump -t db_name -uroot -p &gt; xxx.sql 3. 导出数据和表结构1mysqldump db_name -uroot -p &gt; xxx.sql 4. 导出特定表的结构1mysqldump -uroot -p -B db_name --table tb_name &gt; xxx.sql 导入数据 因为mysqldump导出的是完整的SQL语句，所以用mysql客户程序很容易就能把数据导入了：12mysql -u db_user -p db_name &lt; xxx.sqlmysql&gt; source /path/xxx.sql mysqldump参数详解：–all-databases , -A 导出全部数据库mysqldump -uroot -p –all-databases –all-tablespaces , -Y导出全部表空间mysqldump -uroot -p –all-databases –all-tablespaces –no-tablespaces , -y不导出任何表空间信息mysqldump -uroot -p –all-databases –no-tablespaces –add-drop-database每个数据库创建之前添加drop数据库语句mysqldump -uroot -p –all-databases –add-drop-database –add-drop-table每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用–skip-add-drop-table取消选项)mysqldump -uroot -p –all-databases (默认添加drop语句)mysqldump -uroot -p –all-databases –skip-add-drop-table (取消drop语句) –add-locks在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(默认为打开状态，使用–skip-add-locks取消选项)mysqldump -uroot -p –all-databases(默认添加LOCK语句)mysqldump -uroot -p –all-databases –skip-add-locks (取消LOCK语句) –comments附加注释信息。默认为打开，可以用–skip-comments取消mysqldump -uroot -p –all-databases (默认记录注释)mysqldump -uroot -p –all-databases “code”skip-comments (取消注释) –compact导出更少的输出信息(用于调试),去掉注释和头尾等结构,可以使用选项：–skip-add-drop-table –skip-add-locks –skip-comments –skip-disable-keysmysqldump -uroot -p –all-databases –compact –complete-insert, -c使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。mysqldump -uroot -p –all-databases –complete-insert –compress, -C在客户端和服务器之间启用压缩传递所有信息mysqldump -uroot -p –all-databases –compress –databases, -B导出几个数据库。参数后面所有名字参量都被看作数据库名。mysqldump -uroot -p –databases test mysql –debug输出debug信息，用于调试。默认值为：d:t:o,/tmp/mysqldump.tracemysqldump -uroot -p –all-databases –debugmysqldump -uroot -p –all-databases –debug=”d:t:o,/tmp/debug.trace” –debug-info输出调试信息并退出mysqldump -uroot -p –all-databases –debug-info –default-character-set设置默认字符集，默认值为utf8mysqldump -uroot -p –all-databases –default-character-set=latin1 –delayed-insert采用延时插入方式（INSERT DELAYED）导出数据mysqldump -uroot -p –all-databases –delayed-insert –events, -E导出事件mysqldump -uroot -p –all-databases –events –flush-logs开始导出之前刷新日志请注意：假如一次导出多个数据库(使用选项–databases或者–all-databases)，将会逐个数据库刷新日志。除使用–lock-all-tables或者–master-data外。在这种情况下，日志将会被刷新一次，相应的所以表同时被锁定。因此，如果打算同时导出和刷新日志应该使用–lock-all-tables 或者–master-data 和–flush-logs.mysqldump -uroot -p –all-databases –flush-logs –flush-privileges在导出mysql数据库之后，发出一条FLUSH PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。mysqldump -uroot -p –all-databases –flush-privileges –force在导出过程中忽略出现的SQL错误mysqldump -uroot -p –all-databases –force –host, -h需要导出的主机信息mysqldump -uroot -p –host=localhost –all-databases –ignore-table 不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名.例如：–ignore-table=database.table1 –ignore-table=database.table2 ……mysqldump -uroot -p –host=localhost –all-databases –ignore-table=mysql.user –lock-all-tables, -x提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭–single-transaction 和–lock-tables 选项。mysqldump -uroot -p –host=localhost –all-databases –lock-all-tables –lock-tables, -l开始导出前，锁定所有表。用READ LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，–single-transaction是一个更好的选择，因为它根本不需要锁定表.请注意当导出多个数据库时，–lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。mysqldump -uroot -p –host=localhost –all-databases –lock-tables –no-create-db, -n 只导出数据，而不添加CREATE DATABASE 语句。mysqldump -uroot -p –host=localhost –all-databases –no-create-db –no-create-info,-t只导出数据，而不添加CREATE TABLE 语句mysqldump -uroot -p –host=localhost –all-databases –no-create-info –no-data, -d 不导出任何数据，只导出数据库表结构mysqldump -uroot -p –host=localhost –all-databases –no-data –password, -p 连接数据库密码 –port, -P 连接数据库端口号 –user, -u 指定连接的用户名。","link":"/2016/05/05/mysqldumpchang-yong-can-shu/"},{"title":"MySQL(4) MySQL数据库基础","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. 测试环境 MacBook Pro 15‘ i7 16GB VMware Fushion 8 Pro MySQL Version 5.1 CentOS Linux 6.x 2. 实验步骤2.1 安装mysql1[root@ultraera ~]# yum install mysql mysql-server mysql-devel 2.2 启动mysql，并设置开机自启动1234[root@ultraera ~]# service mysqld start[root@ultraera ~]# chkconfig mysqld on[root@ultraera ~]# chkconfig --list | grep mysqldmysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off 2.3 相关配置12345/etc/my.cnf mysql配置文件/var/lib/mysql mysql数据库文件port:3306 mysql默认端口# Tips : MySQL 绝大对数语句都是以分号结尾，注意是英文模式下的分号。字符和字符串用 '' 引起； 2.4 mysql初始化及登录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970[root@ultraera ~]# mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MySQL to secure it, we'll need the currentpassword for the root user. If you've just installed MySQL, andyou haven't set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): # 首次登陆默认为空Setting the root password ensures that nobody can log into the MySQLroot user without the proper authorisation.You already have a root password set, so you can safely answer 'n'.Set the root password? [Y/n] y # 设置root用户密码New password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MySQL installation has an anonymous user, allowing anyoneto log into MySQL without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y # 删除匿名用户 ... Success!Normally, root should only be allowed to connect from 'localhost'. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] y # 关闭root远程登陆 ... Success!By default, MySQL comes with a database named 'test' that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y # 删除 test 数据库 - Dropping test database...ERROR 1008 (HY000) at line 1: Can't drop database 'test'; database doesn't exist ... Failed! Not critical, keep moving... - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y # 保存这些设置 ... Success!All done! If you've completed all of the above steps, your MySQLinstallation should now be secure.Thanks for using MySQL!Cleaning up...[root@ultraera ~]#[root@ultraera ~]# [root@ultraera ~]# mysql -u root -p '123456'[root@ultraera ~]# mysql -u root -p -h localhost “-h” 指定服务器地址 2.5 创建、查看及删除当前数据库1234567891011121314mysql&gt; CREATE DATABASE ultraera;Query OK, 1 row affected (0.00 sec)mysql&gt; SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || mysql || test || ultraera |+--------------------+4 rows in set (0.00 sec)mysql&gt; DROP DATABASE ultraera;Query OK, 0 rows affected (0.00 sec) 2.6 创建、查看及删除当前表格1234567891011121314151617181920#创建表格之前要先选择数据库mysql&gt; use ultraera;Database changedmysql&gt; CREATE TABLE ultraera( #create 创建表格，至少1列-&gt; id int NOT NULL, #NOT NULL 不为空,int 整型-&gt; name char(20) NOT NULL, #char() 字符型 ,()内定义字符长度-&gt; age int NOT NULL-&gt; );Query OK, 0 rows affected (0.01 sec)mysql&gt; DESC ultraera;+-------+----------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+----------+------+-----+---------+----------------+| id | int(11) | NO | | NULL | || name | char(20) | NO | | NULL | || age | int(11) | NO | | NULL | |+-------+----------+------+-----+---------+----------------+3 rows in set (0.00 sec)mysql&gt; DROP TABLE ultraera ;Query OK, 0 rows affected (0.00 sec) 2.7 修改表格信息12345678910a.重命名表格mysql&gt; alter table ultraera rename ultraera_org;b.新增列alter table ultraera add address varchar(200);c.删除列mysql&gt; alter table ultraera drop column address;d.修改一个列的数据类型mysql&gt; alter table ultraera modify name varchar(200);e.重命名一个列mysql&gt; alter table ultraera change column NAME name varchar(200); 2.8 向表格中插入数据1234567a. 全局插入mysql&gt; insert into ultraera values(1,'name',18);b. 根据列插入mysql&gt; insert into ultraera(id,name,age) values(2,'john',19);### 2.9 查看表格中的数据：mysql&gt; select * from ultraera; # *匹配所有列，也可以只查询单个列，mysql&gt; select name from ultraera; 2.10 where运算符：条件判断查询，查询使用方法：where 列 运算符 值；1234567where支持的运算符：=等于；&gt;大于；&lt;小于；&lt;&gt;不等于；&gt;=大于等于；&lt;=小于等于；BETWEEN在某范围之内；mysql&gt; select * from ultraera where id&gt;1;mysql&gt; select * from ultraera where id=2;mysql&gt; select * from ultraera where id&gt;=1;mysql&gt; select * from ultraera where id&lt;1;mysql&gt; select * from ultraera where id&lt;=1;mysql&gt; select * from ultraera where id between 1 and 4; 2.11 删除表格中的一条记录（同样可以匹配where运算符）12mysql&gt; delete from ultraera where id = 4;mysql&gt; delete * from ultraera ； #清空一个表格的数据； 2.12 更新表中的一个数据1mysql&gt; update ultraera set age=30 where id=3; 2.13 MySQL增加删除一个用户12mysql&gt; create user user1 identified by '123456'; #user1，密码123456，新用户没有权限，无法登录数据库mysql&gt; drop user user1; #删除用户user1 2.14 给用户添加、删除权限12mysql&gt; grant all privileges on *.* to 'user1'@'localhost' identified by '123456';mysql&gt; revoke all privileges from user1; 2.15 使用mysqldump进行数据库备份数据库重命名：mysql不能直接对数据库重命名，所以如果想要重名数据库的话，要先导出，接着创建一个新的数据库，然后将导出的sql文件再导入到新的数据库中 12[adam@ultraera ~]$ mysqldump -u root -p ultraera &gt; ultraera.sql #备份[adam@ultraera ~]$ mysql -u root -p new_ultraera &lt; ultraera.sql #恢复到指定数据库","link":"/2016/03/29/mysqlshu-ju-ku-ji-chu/"},{"title":"MySQL(5) 清空表命令之：truncate与delete区别","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际工作中，有时我们会想要去清空一张表的所有数据，常用的命令有delete和truncate这两个命令。 1. delete&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在很多情况，我们对于delete的应用更多，因为它支持更多的匹配模式，我们可以使用where条件语句，清理一些特定的数据，关于delete的操作，这里不做过多解释，有空就专门写写delete的使用和原理。delete 在清空表时，如果表内有自增ID的设定，那么在delete清空之后，再插入数据时，自增ID不会从1开始，默认会继续增加; 除非我们使用OPTIMIZE TABLE，重置表属性；12mysql&gt; delete from piwik_tmp;Query OK, 0 rows affected (0.00 sec) 2. truncate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;truncate 在清空表时，会同时将自增ID重置，再插入新数据时会从1开始，而且truncate在清空表时，不关心表的行数，所以执行效率会高于delete； 12mysql&gt; truncate table piwik_tmp;Query OK, 0 rows affected (0.01 sec) 3. 释放表空间&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是在truncate清空表数据时，myisam的表和innodb的表在使用上有一定的区别；myisam表会清空所有数据，并释放表空间，即硬盘空间会得到释放。innodb表也会清空所有数据，但不释放表空间。Innodb数据库对于已经删除的数据只是标记为删除，并不真正释放所占用的磁盘空间，这就导致InnoDB数据库文件不断增长。如果想彻底释放这些已经删除的数据，需要把数据库导出，删除InnoDB数据库文件，然后再导入。123456789101112131415# 备份数据库：mysqldump -u -p --quick --force --all-databases &gt; mysqldump.sql# 停止数据库service mysqld stop# 删除这些大文件rm /usr/local/mysql/var/ibdata1rm /usr/local/mysql/var/ib_logfile*# 手动删除除Mysql之外所有数据库文件夹，然后启动数据库service mysqld start# 还原数据mysql -uroot -proot &lt; mysqldump.sql 4. innodb_file_per_table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有一种方式是在创建数据库的时候设置innodb_file_per_table，这样InnoDB会对每个表创建一个数据文件，然后只需要运行OPTIMIZE TABLE 命令就可以释放所有已经删除的磁盘空间。 4.1 修改mysql默认配置文件。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编辑my.ini或my.cnf 在innodb段中加入 innodb_file_per_table=1 # 1为启用，0为禁用 4.2 查看修改结果&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过mysql语句可以查看该变量的值：1mysql&gt; show variables like '%per_table%';","link":"/2016/11/10/lwuswahg/"},{"title":"MySQL(6) 利用Linux计划任务定时同步MySQL","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 说下实际项目场景，公司一个应用已部署主从数据库，业务也正式上线；现在客户公司领导希望可以看到每天的业务数据报表，本设定直接到从库拿数据，然后进行数据处理，生成报表，但是Java同事提出需求新增用户和权限表，这样一来，如果直接使用生产库的表会导致后台系统管理人员与领导的账户和权限混淆，经过讨论决定，按照生产库的表结构新增特殊用户表和权限表；这样操作实际是可以在从库上新增表单，且不影响主从库之间的数据同步，但是从安全性的考虑，新增表单设计需要给用户Insert权限，为了保证从库只有利用主库同步写入数据，则只能给其他用户select权限。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终决定，因为报表系统的使用率低，直接在报表系统的服务器安装本地mysql数据库，通过计划任务定时到从库上同步数据。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. 测试环境 MacBook Pro 15‘ i7 16GB VMware Fushion 8 Pro MySQL Version 5.6 CentOS Linux 6.x slave Server ：172.16.102.129 local Server ：172.167.102.133 2. 利用mysqldump导出sql文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，mysqldump时会锁表，需要给mysqldump传递 “–single-transaction” 参数，可以使得mysqldump时不锁表，如下： 1/usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave &gt; slave.sql 3. 使用mysql恢复sql文件到数据库中&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，如果该local server的slave库中有数据表，当表名与slave server的表名相同时，数据表内的数据会被覆盖；如果local server的表在slave.sql中不存在，则不受影响，正是利用这个特性解决用户需求。 1/usr/bin/mysql -u dbuser -pdbuser report &lt; /home/.mysql/slave.sql 4. 编写脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先在本地某一位置作为临时sql存储地址：1[root@report ~]# mkdir /home/.mysql # 这个目录可以自定义 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 脚本1： 123456789#!/bin/bashTIME=`date \"+%Y%m%d%H\"`rm -rf /home/.mysql/*/usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave &gt; /home/.mysql/slave_$TIME.sql/usr/bin/mysql -u dbuser -pdbuser report &lt; /home/.mysql/slave_$TIME.sql 5. 增加邮件通知功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因为前期同事需要得知备份的执行结果，所以希望数据同步成功后获得邮件提醒，这里使用sendmail实现，在CentOS里预装是没有安装sendmail，所以我们需要安装sendmail服务，另外一个安装命令行邮件工具mailx： 12345678[root@report ~]# yum install -y sendmail mailx......[root@report ~]# service sendmail startStarting sendmail: [ OK ]Starting sm-client: [ OK ][root@report ~]# chkconfig sendmail on &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完整脚本：report_sync.sh ，如下： 1234567891011121314151617#!/bin/bashTIME=`date \"+%Y%m%d%H\"`rm -rf /home/.mysql/*/usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave &gt; /home/.mysql/slave_$TIME.sql/usr/bin/mysql -u dbuser -pdbuser report &lt; /home/.mysql/slave_$TIME.sql# send mail to adminuserif [ $? -eq 0 ]then echo \"report SQL sync is successfully. At time: `date` \" | mail -s report-sync-successfully hello@abc.cnelse echo \" Error Error report SQL sync is Error. At time: `date` \" | mail -s report-sync-error hello@abc.cnfi &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看下邮件通知： 6. 计划任务crontab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和同事及客户沟通，确认每天1、5、9、13、17、21整时到从库拉去数据，Linux选择使用crontab做计划任务，crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 6.1 安装crontab123456789101112131415[root@report ~]# yum install -y vixie-cron[root@report ~]# yum install -y crontabs说明：vixie-cron软件包是cron的主程序；crontabs软件包是用来安装、卸装、或列举用来驱动 crond 守护进程的表格的程序。cron 是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：/sbin/service crond start #启动服务/sbin/service crond stop #关闭服务/sbin/service crond restart #重启服务/sbin/service crond reload #重新载入配置设置crond开机自启动[root@report ~]# chkconfig crond on 7. 添加计划任务&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将脚本report_sync.sh 保存到/usr/bin下： 1[root@report ~]# mv report_sync.sh /usr/bin &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增加计划任务： 123456[root@report ~]# crontab -e# add this word.* 1-21/4 * * * /usr/bin/report_sync.sh# 表示在每天的1-21时间内，每4小时执行一个脚本","link":"/2016/03/24/crontab-sync-sendmail/"},{"title":"MySQL(7) 索引创建、删除和查看","text":"1. 索引的作用 在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 123ALTER TABLE tb_name ADD INDEX index_Name (column_list);ALTER TABLE tb_name ADD UNIQUE (column_list);ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 12CREATE INDEX index_Name ON tb_name(column_list);CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： 123DROP INDEX index_Name On tb_name;ALTER TABLE tb_Name DROP TABLE index_Name;ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 5. 查看索引12mysql&gt; show index from tb_name;mysql&gt; show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注","link":"/2017/02/09/mysql-index/"},{"title":"OpenStak 介绍","text":"","link":"/2016/05/15/openstak-jie-shao/"},{"title":"SSH LINUX Security Settings","text":"SSH 配置安全控制限制登录1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加:1sshd: 1.2.3.4 在 /etc/hosts.deny 增肌:1sshd: ALL 用 iptables 也行:12iptables -A INPUT -p tcp --dport 22 -j DROPiptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加12345AllowUsers 用户名或者AllowGroups 组名或者DenyUsers 用户名 3. 设定登录黑名单123[root@6 ~]# vim /etc/pam.d/sshdauth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed# 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 4. sshd_config配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式Port 22 # SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！Protocol 2,1 # 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！#ListenAddress 0.0.0.0 # 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式：ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSHPidFile /var/run/sshd.pid # 可以放置 SSHD 这个 PID 的档案！左列为默认值LoginGraceTime 600 # 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！Compression yes # 是否可以使用压缩指令？当然可以啰！# 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！HostKey /etc/ssh/ssh_host_key # SSH version 1 使用的私钥HostKey /etc/ssh/ssh_host_rsa_key # SSH version 2 使用的 RSA 私钥HostKey /etc/ssh/ssh_host_dsa_key # SSH version 2 使用的 DSA 私钥# 关于 version 1 的一些设定！KeyRegenerationInterval 3600 # 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ServerKeyBits 768 # 没错！这个就是 Server key 的长度！# 关于登录文件的讯息数据放置与 daemon 的名称！SyslogFacility AUTH # 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,LogLevel INFO # 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！# 登入设定部分PermitRootLogin no # 是否允许 root 登入！预设是允许的，但是建议设定成 no！UserLogin no # 在 SSH 底下本来就不接受 login 这个程序的登入！StrictModes yes # 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！#RSAAuthentication yes # 是否使用纯的 RSA 认证！？仅针对 version 1 ！PubkeyAuthentication yes # 是否允许 Public Key ？当然允许啦！只有 version 2AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接# 认证部分RhostsAuthentication no # 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！IgnoreRhosts yes # 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！IgnoreUserKnownHosts no # 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！PermitEmptyPasswords no # 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！#PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！# 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！#KerberosAuthentication no#KerberosOrLocalPasswd yes#KerberosTicketCleanup yes#KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！X11Forwarding yes#X11DisplayOffset 10#X11UseLocalhost yes# 登入后的项目：PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！PrintLastLog yes # 显示上次登入的信息！可以啊！预设也是 yes ！KeepAlive yes # 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！MaxStartups 10 # 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中# 关于使用者抵挡的设定项目：DenyUsers * # 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！DenyUsers testDenyGroups test # 与 DenyUsers 相同！仅抵挡几个群组而已！# 关于 SFTP 服务的设定项目！Subsystem sftp /usr/lib/ssh/sftp-server如果不愿意开放 SFTP 的话，将这一行批注掉即可！","link":"/2016/10/29/ssh-config-security/"},{"title":"Python(1) 基础","text":"&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; Python学习笔记(1) –Python基础输出： printpython2：print ‘Hello Python’python3: print(‘Hello Python’)python(‘10+20=‘,10+20)输入：python2：rawinput()python3: input()python的语法比较简单，采用缩进的方式：a = 100if a &gt;= 0: print(a)else: print(-a)&amp; diff &amp;a = 100if a &gt;=0:print(a)else:print(-a)# 开头为注释；: 结尾，缩进的语句视为代码块；Python大小写是敏感的，约定俗成：4个空格的缩进，可以吧tab设置为4个空格。Python 的数据类型整数：python可以处理任意大小的整数浮点数：也就是小数，之所以称之为浮点数，因为按照科学计数法表示时，一个浮点数的小数点位置是可变的字符串：字符串是以’’和”” 包括起来的任意文本，例如’abc’,”xyz”；如果字符内部同时包含’和”，可以使用\\转义字符来标识。如果字符串内部有很多换行，用\\n不好阅读，python支持使用’’’…’’’ 的格式表示多行‘r’…’ python可以使用r’’表示’’以内的字符不转义;多行: r’’’…’’’布尔值：布尔值和布尔代数表示的完全一致，一个布尔值只有True和False，python支持直接使用True和False表示布尔值，注意大小写，另外最好不要生命变量时使用True等，布尔值，经常用于在条件判断之中。and : 与运算，所有运算结果都是True，and的结果才是Trueor：或运算，只有1个运算结果为True，or的结果就是Truenot：他是一个单目运算符，取相反的值空值：python里的一个特殊值，用None表示，注意None不能理解为0，因为0是有意义的，而None是一个特殊的空值python的变量命名规则：必须是大小写英文，数字和的组合，且不能用数字开头；赋值符号：’=’；等于的符号是’==’动态语言：变量本身类型不固定的语言称之为动态语言，反之是静态语言，静态语言在定义变量时必须制定变量的数据类型，如果赋值的时候类型不匹配，就会报错；变量在计算机内存中的表示：a=1,指的是python在内存中创建了整数1，然后在内存创建了变量a，并把它指向了整数1python的常量定义：常量就是不能改变的变量，在python中，通常使用全部大写的变量名表示常量整数的除法是精确的，因为除法计算结果是浮点数，例如 9/3 结果为3.0 ; 另外一种除法是’//‘ 地板除，两个整数的除法任然是整数；余数运算’%’字符编码：字符串是一种数据类型，但是字符串还涉及到一个编码问题，Python3的字符串是支持多语言的ord(‘’)函数 获取字符的整数表示；chr(‘’)函数 把编码转换成对应的字符；python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干字节，但是如果要在网络传输或者保存到磁盘，就要把str转化为单位的bytes；python对于bytes的数据类型用带b前缀的单引号或双引号表示：另外，Unicode表示的str可用encode()函数，指定编码为bytes。 ‘ABC’ .encode(‘utf-8’)decode() 可以吧bytes转变为str。b’ABC’ .decode(‘ascii’)要计算str包含了多少个字符使用 len()函数： len(‘hello’) ,结果为5#!/usr/bin/env python3# -- coding: utf-8 --格式化： 如何处理格式化输出字符串，在python中使用的格式化方式和C语言是一致的，用’%’实现：%d 表示整数%f 表示浮点数%s 表示字符串，如果不确定用什么，用%s，它会把任何数据类型转换为字符串%x 表示十六进制整数%% 表示一个普通的%数据类型list和tuplelist是python内置的一种数据类型：列表，list是一个有序的集合，可以随时添加和删除其中元素。classmates = [‘Michael’,’Bob’,’Tracy’]， 可以用len()函数获取这个list的元素的个数可以用索引来访问list中的每一个位置的元素，记住索引的第一个位置是0：当索引超出范围的时候，python会报出IndexError错误，记得最后一个索引是len(classmates) -1如果直接取出最后一个索引可用classmates[-1],以此类推list是一个可变的有序列表，所以可以去追加，插入指定位置，删除，替换等操作，支持不同数据类型，支持嵌套list追加: classmates.append(‘Adam’)插入指定位置: classmates.insert(2,’Jack’)删除list末尾的元素： classmates.pop()删除指定位置的元素: classmates.pop(1)替换元素：classmates[1]=‘Sarch’ ， 直接给相应位置的元素重新赋值即可list的元素支持不同的数据类型, L = [‘abc’,23,23.4]list的元素支持嵌套另外一个list： s = [‘abc’,123,[‘XYZ’,2.34]]，注意这个时候len(s)的元素是3个list也可以没有元素，就是一个空的list，它的长度为0tuple：元组，也是一种有序列表，但是tuple一旦初始化就不能修改，他没有append()也没有insert()，这样的方法，其他获取元素的方式和list一样，也不能赋值成为另外的元素：classmates = (‘Michael’,’Bob’,’Tracy’) 注意list用的是’[]’，而tuple用的是’()’tuple 有个问题，当你定义1个元素的时候，tuple的()和数学公式中的小括号混淆 ，因此python规定，这种情况下面，当定义只有1个tuple时必须增加一个逗号’,’来消除歧义。tuple的元素也可以为list或者tuple，tuple的元素不会改变，但是list是一个可以改变的有序数列，所以当tuple中包含list时，这个tuple是’可变的’取出特定元素： L[[‘Apple’,’Google’,’Microsoft’],[‘Java’,’Python’,’C’]] ; L[1][1] = ‘Python’条件判断if：根据python的缩进规则，如果if语句的判断是True，就会执行下面的语句，否则什么都不做else：也可以个if添加else，意思就是，如果if的判断是false，不要执行if的内容，执行else的内容elif：如果要嵌套多级判断条件的话，使用elif，elif 是else if的缩写if语句执行有个特点，它是自上而下的判断，如果某个判断的结果是True，那么执行该判断对应的语句，就会忽略掉剩下的所有elif和else，if判断条件还可以简写: if x: 只要x是非零数值、非空字符串、非空list等，就判断为True，iput(): 需要注意的地方，默认input的返回类型是str，由于str不能直接整数比较，所以在碰到明明输入200，但是不能和201对比时，记住先要把str转化为整数，python提供了int()函数, 转化数据类型为int类型，但是如果输入’abc’则会得到1个ValueError的错误循环for…in ： 依次把list或者tuple的每个元素迭代出来，for x in … ：循环就是把每个元素带入变量x，然后执行缩进的语句：range()函数：用来生成一个整数序列，再通过list()函数转换为list，例如range(5)生成：0,1,2,3,4list(range(5)) = [0,1,2,3,4]计算1+…+100的结果： for x in range(101): sum = sum +xwhile 循环： 只要条件满足，就不断循环，条件不足时退出循环：计算100以内所有奇数之和： sum = 0,n = 99, while n &gt; 0: sum =sum +n; n = n-2break: 在循环中，break语句可以提前退出循环，当程序执行满足break条件的时候，就会退出循环continue: 在循环过程中，也可以通过continue语句，跳过当前的这次循环。注意：循环是让计算机做重复任务的有效方法，break语句可以在循环过程总直接退出循环，continue语句可以提前结束本轮循环，并直接进入下一轮循环，这两个语句通常必须配合if语句使用，但是尽量不要滥用这两个语句，因为当break和continue使用过多会导致代码执行逻辑分支过多，容易出错。dict和setdict： python内置了字典：dict的支持，全称：dictionary，在其他语言中也称之为map，使用键值存储，具有极快的查找速度。对比list处理方式：会过滤整个list的元素，这导致list越长，耗时越长；dict实现时，只需要创建key-values对应表，直接根据名字查找，无论这个表有多大，查找速度都不会变慢，但是内存消耗会大，典型用性能(内存空间)换时间。dict的初始化: d {‘Michael’:95,’Bob’:75,’Tracy’:85} # 注意dict使用的是大括号’{}‘dict的数据插入： d [‘Adam’] = 67 由于dict是根据key检索，所以key是固定的，一个key只能对应1个value,所以当对1个key多次放入value时，后面的值会把前面的值冲掉： （类似变量）但是如果查询的key不存在,dict会报错，KeyError，可以用in 判断key是否存在: ‘key’ in d : True/False通过dict的get方法，如果key不存在，可以返回None，或者自己指定的值，d.get(‘Key’) , d.get(‘key’,-1)d.pop(‘key’): 删除1个key，注意当key被删除是，相应的value也会被删除。另外注意：dict内部存放的顺序和key放入的顺序是没有关系的：dict应在需要高速查找的地方，正确使用dict非常重要，要牢记1点，dict的key必须是不可变的对象，因为dict是根据key来计算value的位置，如果每次计算相同的key得到的结果不一样，那么dict内部就完全混乱了，这个通过key计算位置的算法称之为Hash算法。要保证hash的准确性，作为key的对象就不能改变，在python中，字符串·整数等都是不可变的，但是list是可以变的所以不能作为keyset： set和dict类似，也是一组key的集合，但是不存储value，由于key不能重复，所以，在set中，没有重复的key值。要创建一个set，需要提供一个list作为输入集合。 s = set([1,2,3]) : s = {1,2,3}注意set也不是有序的，而且重复在set存在的元素会被自动过滤： s = set([1,2,3,1,2,3,1,2,3]) s = {1,2,3}通过s.add(key) 可以增加元素到set中，可以重复添加，但是不会有效果通过s.remove(key) 可以删除元素set 可以看成数学意义上的无序和无重复元素的集合，因此两个set可以做数学意义上的交集、并集能操作：s1 = set([1,2,3]), s2 = set([2,3,4]) ,交集： s1 &amp; s2 = {2,3} ; s1 | s2 = {1,2,3,4}set和dict的区别仅在于有没有存储对应的value，但是set和dict的原理是一样的，所以，同样不可以放置可变对象，因为无法判断两个对象是否相等，也就无法保证set内部的不会重复元素不可变对象：str是不变对象，list是可变对象；对于可变对象，例如list，对list进行操作，list的内部会发生变化a = ‘abc’ , a.replace(‘a’,’A’) # 这个操作是把所有小写的a替换成大写的A，但是注意a的值并没有发生改变，要牢记a是变量，’abc’才是字符对象。","link":"/2016/11/11/python-lesson-1/"},{"title":"Script Install LNMP","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#!/bin/bash#if [[ $1 == \"uninstall\" ]];then echo \"starting backup data...\" mkdir -p /www/backup service mysqld stop service nginxd stop service httpd stop service wdapache stop service pureftpd stop tar zcvf /www/backup/mysqldatdbk.tar.gz /www/wdlinux/mysql/var tar zcvf /www/backup/ngconfbk.tar.gz /www/wdlinux/nginx/conf tar zcvf /www/backup/apconfbk.tar.gz /www/wdlinux/apache/conf rpm -e lanmp_wdcp --nodeps rm -fr /www/wdlinux echo echo \" lanmp,wdcp remove is OK\" echo exit 0fiecho \"Turn off selinux...\"setenforce 0sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/configsed -i 's/^exclude=/#exclude=/g' /etc/yum.confyum install -y gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel patch libmcrypt-devel libmhash-devel ncurses-devel sudo bzip2 iptables sendmail iptables unzip#echo \"Check the network...\"#ping -c 2 113.105.167.1#if [[ $? != 0 ]];then# echo# echo \"network err\"# exit 1#fiping -c 3 dl.wdlinux.cnif [[ $? == 2 ]];then echo echo \"dns error\" exit 1fiif [[ ! -d /www/wdlinux ]];then echo echo \"rpm remove...\" rpm -e php --nodeps rpm -e httpd --nodeps rpm -e mysql-server --nodeps rpm -e mysql --nodepsfiecho \"yum update...\"yum install -y make autoconf sudo wget libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel patch libmcrypt-devel libmhash-devel ncurses-devel iptablesarch=i386Aurl=\"http://dl.wdlinux.cn:5180/rpms\"if [[ `uname -m` == \"x86_64\" ]];then arch=\"x86_64\"fifunction in_finsh { echo echo \" configuration ,lamp or lnmp,wdcp install is finshed\" echo \" visit http://ip\" echo \" wdcp visit http://ip:8080\" echo \" more infomation please visit http://www.wdlinux.cn\" echo}function in_check { if [[ $1 == 1 ]];then echo echo \"============ $2 install error =============\" echo exit 1 else echo echo \"============ $2 install OK ==============\" echo echo fi}grep -E 'wdOS 1|5\\.' /etc/redhat-release &gt; /dev/null 2&gt;&amp;1v1=$?grep -E 'wdOS 2|6\\.' /etc/redhat-release &gt; /dev/null 2&gt;&amp;1v2=$?if [ $v1 == 0 ];then RF=\"lanmp_wdcp-2-5.$arch.rpm\";elif [ $v2 == 0 ];then RF=\"lanmp_wdcp-2-5.el6.$arch.rpm\"; if [ $arch == \"x86_64\" ];then wget -c http://dl.wdlinux.cn:5180/soft/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm rpm -ivh rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm else wget -c http://dl.wdlinux.cn:5180/soft/rpmforge-release-0.5.2-2.el6.rf.i686.rpm rpm -ivh rpmforge-release-0.5.2-2.el6.rf.i686.rpm fi yum install -y mhash-devel libmcrypt-develelse echo echo \"The current system does not support\" echo exitfiwget -c http://dl.wdlinux.cn:5180/rpms/$RFrpm -ivh $RF --nodepsI_F=$?if [ $I_F == 0 ];then echofiin_check $I_F lanmp_wdcprm -f wdcp_v*wget -c http://down.wdlinux.cn/down/wdcp_v2.5.tar.gz &gt; /dev/null 2&gt;&amp;1tar zxvf wdcp_v2.5.tar.gz -C / &gt; /dev/null 2&gt;&amp;1in_finsh","link":"/2016/08/13/use-wdlinux-install-lnmp/"},{"title":"Tomcat(1) java.lang.OutOfMemoryError","text":"1. 什么是 PermGen space ?PermGen space的全称是Permanent Generation space，是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的，Class在被Loader时就会被放到PermGen space中，它和存放类实例(Instance)的Heap区域不同，GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很CLASS的话，就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar，其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。 2. 解决方法2.1 手动设置MaxPermSize大小12# 修改$TOMCAT_HOME/bin/catalina.sh，在“echo \"Using CATALINA_BASE: $CATALINA_BASE\"”上面加入以下行：JAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\" 3. Java heap space解释：Heap size 设置JVM堆的设置是指java程序运行过程中JVM可以调配使用的内存空间的设置.JVM在启动的时候会自动设置Heap size的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap size 的大小是Young Generation 和Tenured Generaion 之和。 提示：在JVM中如果98％的时间是用于GC且可用的Heap size 不足2％的时候将抛出此异常信息。 提示：Heap Size 最大不要超过可用物理内存的80％，一般的要将-Xms和-Xmx选项设置为相同，而-Xmn为1/4的-Xmx值。 修改设置方法如PermGen space","link":"/2016/11/29/tomcat-error-java-lang-outofmemoryerror/"},{"title":"Tomcat(3) 优化设定","text":"设置JVM空间大小，Xms和Xmx一样大：JVM初始分配的内存由-Xms指定，默认是物理内存的1/64；JVM最大分配的内存由-Xmx指定，默认是物理内存的1/4。默认空余堆内存小于 40%时，JVM就会增大堆直到-Xmx的最大限制；空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。因此服务器一般设置-Xms、 -Xmx相等以避免在每次GC 后调整堆的大小。 关闭dns查询 增加线程数量 maxThreads、acceptCount ： 增加并发，同时增加这两个的数量 内存优化 ： /tomcatbin/catalina.sh JAVA_OPTS=”-XX:PermSize=64M -XX:MaxPermSize=128m -Xms512m -Xmx1024m -Duser.timezone=Asia/Shanghai” 缓存优化 并发优化，线程优化 &lt;Connector port=”80” protocol=”HTTP/1.1” maxThreads=”600” minSpareThreads=”100” maxSpareThreads=”500” acceptCount=”700” connectionTimeout=”20000” redirectPort=”8443” /&gt; 关闭DNS查询 :修改server.xml文件中的Connector元素，修改属性enableLookups参数值: enableLookups=”false” 使用apr插件，提高tomcat响应时间 1234567891011121314151617181920212223(1)安装APR tomcat-native apr-1.3.8.tar.gz 安装在/usr/local/apr #tar zxvf apr-1.3.8.tar.gz #cd apr-1.3.8 #./configure;make;make install apr-util-1.3.9.tar.gz 安装在/usr/local/apr/lib #tar zxvf apr-util-1.3.9.tar.gz #cd apr-util-1.3.9 #./configure --with-apr=/usr/local/apr ----with-java-home=JDK;make;make install #cd apache-tomcat-6.0.20/bin #tar zxvf tomcat-native.tar.gz #cd tomcat-native/jni/native #./configure --with-apr=/usr/local/apr;make;make install(2)设置 Tomcat 整合 APR 修改 tomcat 的启动 shell （startup.sh），在该文件中加入启动参数： CATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\" 。(3)判断安装成功: 如果看到下面的启动日志，表示成功。 2007-4-26 15:34:32 org.apache.coyote.http11.Http11AprProtocol init 开启manager 管理 使用http://visualvm.Java.net/download.html 工具监控tomcat的性能 JAVA_OPTS=’-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false’ 设置自动更新autodeploy＝false","link":"/2016/06/16/apache-tomcat-you-hua-she-ding-yi/"},{"title":"Tomcat(2) 利用JDK自身keytool实现HTTPS","text":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 &amp; Tomcat 7 &amp; JDK 1.7 1. 生成 keystore12345678910111213141516171819202122232425[root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystoreEnter keystore password: #设置密码Re-enter new password: #重复一次What is your first and last name? [Unknown]: Alex Lu #随便填What is the name of your organizational unit? [Unknown]: visionet #随便填What is the name of your organization? [Unknown]: visionet #随便填What is the name of your City or Locality? [Unknown]: SH #随便填What is the name of your State or Province? [Unknown]: SH #随便填What is the two-letter country code for this unit? [Unknown]: ZH #随便填Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZHEnter key password for &lt;tomcat&gt; (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码[Storing mykeystore][root@test conf]# lsCatalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 2. 备份$tomcatdir/conf/server.xml1cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 3. 修改server.xmla. 注释以下：（tomcat注释用：&lt;!-- XXXX --> ）,如何也想保留http访问，可以不注释123456&lt;!--&lt;Connector executor=\"tomcatThreadPool\" port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /&gt;--&gt; b. 取消下面注释123&lt;Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" /&gt; c. 增加keystoreFile和keystorePass1234&lt;Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"conf/mykeystore\" keystorePass=\"123456\"/&gt; keystoreFile=跟keystore文件位置keystorePass=跟当时keytool命令执行时输入的密码 4. 重启tomcat1234567891011121314151617[root@test conf]# ../bin/catalina.sh stop &amp;&amp; ../bin/catalina.sh startUsing CATALINA_BASE: /home/pms/apache-tomcat-6.0.44Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/tempUsing JRE_HOME: /home/pms/jdk1.7.0_65Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jarUsing CATALINA_BASE: /home/pms/apache-tomcat-6.0.44Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/tempUsing JRE_HOME: /home/pms/jdk1.7.0_65Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar[root@test conf]# netstat -ntlup | grep -e \"80\\|443\"tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/javatcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/javatcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/javatcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java[root@test conf]# OK !","link":"/2016/12/03/tomcat-keytool-https/"},{"title":"Wannacry蠕虫病毒事件及修复方案","text":"事件背景5月12日晚， WannaCry 蠕虫病毒在全球大肆爆发。据BBC、CNN等媒体报道，恶意攻击者利用 NSA（美国国家安全局）泄露的 Windows 0day 利用工具对99个国家实施了超过75000次攻击，主要影响SMB和RDP服务，主要影响了137、138、139、445端口。 目前已知已知的Windows版本包括但不限于一下都受影响： Windows NT Windows 2000 Windows XP Windows 2003 Windows Vista Windows 7 Windows 8 Windows 10 Windows 2008 Windows 2008 R2 Windows Server 2012 SP0 勒索者源头来自暗网，攻击具备兼容性、多语言支持，多个行业受到影响，国内高校网络系统沦为感染重灾区。据有关机构统计，目前国内每天有数万台机器遭到该蠕虫病毒袭击，国内的ATM机、火车站、自助终端、邮政、医院、政府办事终端、视频监控都可能遭受攻击。据报道，今日全国多地的中石油加油站无法进行网络支付，只能进行现金支付。中石油有关负责人表示，怀疑受到病毒攻击，具体情况还在核查。而截至目前，一些公安系统已经遭到入侵。 如果你也遇到了这样的问题，请不要担心，我在下面给出了如何修复这个漏洞的建议。 什么是比特币蠕虫病毒？这次攻击的始作俑者是一款名为“WannaCry”（中文名：想哭）的勒索病毒，带有加密功能，它利用 Windows 在 445 端口的安全漏洞潜入电脑并对多种文件类型加密并添加后缀(.onion)使用户无法打开，用户电脑存在文档被加密的情况，攻击者称需支付比特币解锁。(比特币是一种全球通用的互联网加密货币) 漏洞验证 使用Win+R按键打开运行窗口，输入cmd，进入命令行工具，然后输入netstat -an 查看是否开放了对应的端口。 上图中的服务器就是开放了445端口，这有很大的风险可能会WannaCry 蠕虫病毒被攻击到，所以我们应该关掉对应端口，并修复漏洞。 漏洞修复 目前微软已发布补丁MS17-010修复了“永恒之蓝”攻击的系统漏洞，请尽快为电脑安装此补丁，网址为https://technet.microsoft.com/zh-cn/library/security/MS17-010 对于XP、2003等微软已不再提供安全更新的机器，推荐使用360“NSA武器库免疫工具”检测系统是否存在漏洞，并关闭受到漏洞影响的端口，可以避免遭到勒索软件等病毒的侵害，可以在360电脑安全管家中找到。 开启系统防火墙，利用系统防火墙的“高级设置”阻止外部对 445 端口进的访问（存在一定影响，该操作会影响使用 445 端口的服务）。 修复脚本如果以上方式都不能修复漏洞，大家可以使用我以下的批处理脚本文件来尝试关闭端口及服务，批处理禁用该漏洞可能利用到的端口，全版本通用，右键管理员启动即可，注意这需要打开Windows的防火墙。 12345678910111213141516net stop SCardSvrnet stop SCPolicySvcsc config SCardSvr start=disabledsc config SCPolicySvc start=disablednet start MpsSvcsc config MpsSvc start=autonetsh advfirewall set allprofiles state onnetsh advfirewall firewall add rule name=\"deny udp 137\" dir=in protocol=udp localport=137 action=blocknetsh advfirewall firewall add rule name=\"deny tcp 137\" dir=in protocol=tcp localport=137 action=blocknetsh advfirewall firewall add rule name=\"deny udp 138\" dir=in protocol=udp localport=138 action=blocknetsh advfirewall firewall add rule name=\"deny tcp 138\" dir=in protocol=tcp localport=138 action=blocknetsh advfirewall firewall add rule name=\"deny udp 139\" dir=in protocol=udp localport=139 action=blocknetsh advfirewall firewall add rule name=\"deny tcp 139\" dir=in protocol=tcp localport=139 action=blocknetsh advfirewall firewall add rule name=\"deny udp 445\" dir=in protocol=udp localport=445 action=blocknetsh advfirewall firewall add rule name=\"deny tcp 445\" dir=in protocol=tcp localport=445 action=blockpause 我已经将脚本上传到百度云盘中，大家可以自行下载运行，注意解压缩Zip包之后的fix_WannaCry.bat 下载链接：https://pan.baidu.com/s/1gfceNRH 添加防火规则 打开控制面板中的Windows防火墙，并保证防火墙处于启用状态； 打开防火墙的高级设置； 在“入站规则”中新建一条规则，本地端口号选择445，操作选择阻止连接。 手动导入安全策略下载策略文件 https://share.weiyun.com/15b7bbd3f86c493a66721dd948a81c54 打开控制面板–管理工具-本地安全策略–IP安全策略 –&gt;所有任务–&gt;导入策略： 或者，通过Win+R，输入gpedit.msc","link":"/2017/05/15/fix-Wannacry/"},{"title":"Yum中$releasever和$basearch的取值","text":"查看/etc/yum.repos.d/CentOS-Base.repo123456[base]name=CentOS-$releasever - Basemirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 其实在日常使用之中，我们在很多地方，特别是脚本内看到了调用$releasever和$basearch $releasever的值,这个表示当前系统的发行版本 1234567891011121314[root@ultraera /]# rpm -qi centos-releaseName : centos-release Relocations: (not relocatable)Version : 6 Vendor: CentOSRelease : 7.el6.centos.12.3 Build Date: Tue 04 Aug 2015 12:13:46 AM CSTInstall Date: Sat 21 May 2016 03:31:27 AM CST Build Host: c6b9.bsys.dev.centos.orgGroup : System Environment/Base Source RPM: centos-release-6-7.el6.centos.12.3.src.rpmSize : 35634 License: GPLv2Signature : RSA/SHA1, Tue 04 Aug 2015 12:15:08 AM CST, Key ID 0946fca2c105b9dePackager : CentOS BuildSystem &lt;http://bugs.centos.org&gt;Summary : CentOS release fileDescription :CentOS release files# 其中Version 6 就是我们的版本号 $basearch是我们的系统硬件架构(CPU指令集),就是我们常说的i386\\i486\\i586\\i686\\ 12[root@ultraera /]# archi386 但是，当我在命令行查看是却发现$releasever和$basearch是空的。Google 一下之后，说明Yum变量的说明可以在这里（5.3.3. Using Yum Variables）找到，说明如下： 5.3.3. Using Yum Variables You can use and reference the following built-in variables in yum commands and in all Yum configuration files (that is, /etc/yum.conf and all .repo files in the /etc/yum.repos.d/ directory): $releaseverYou can use this variable to reference the release version of Red Hat Enterprise Linux. Yum obtains the value of $releasever from the distroverpkg=value line in the /etc/yum.conf configuration file. If there is no such line in /etc/yum.conf, then yum infers the correct value by deriving the version number from the redhat-release package. $archYou can use this variable to refer to the system’s CPU architecture as returned when calling Python’s os.uname() function. Valid values for $arch include: i586, i686 and x86_64. $basearchYou can use $basearch to reference the base architecture of the system. For example, i686 and i586 machines both have a base architecture of i386, and AMD64 and Intel64 machines have a base architecture of x86_64. $YUM0-9These ten variables are each replaced with the value of any shell environment variables with the same name. If one of these variables is referenced (in /etc/yum.conf for example) and a shell environment variable with the same name does not exist, then the configuration file variable is not replaced. To define a custom variable or to override the value of an existing one, create a file with the same name as the variable (without the “$” sign) in the /etc/yum/vars/ directory, and add the desired value on its first line. For example, repository descriptions often include the operating system name. To define a new variable called $osname, create a new file with “Red Hat Enterprise Linux” on the first line and save it as /etc/yum/vars/osname: echo “Red Hat Enterprise Linux” &gt; /etc/yum/vars/osname Instead of “Red Hat Enterprise Linux 6”, you can now use the following in the .repo files: name=$osname $releasever 文中说到$releasever的定义可以查看 /etc/yum.conf 文件的事distroverpkg=value 行，打开 /etc/yum.conf 看一下，默认文件（我的是CentOS 6）内容如下： 123456789101112[main]cachedir=/var/cache/yum/$basearch/$releaseverkeepcache=0debuglevel=2logfile=/var/log/yum.logexactarch=1obsoletes=1gpgcheck=1plugins=1installonly_limit=5bugtracker_url=http://bugs.centos.org/set_project.php?project_id=16&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yumdistroverpkg=centos-release distroverpkg=centos-release 代表什么？ 去哪找 centos-release 。找到这里我再一次表示困惑。不过另一篇文章进行了我的视野： yum的$releasever真是太反动了， 关键内空如下：在 /etc/yum.repos.d/ 目录下的软件库定义文件中，常常会在 baseurl 的路径中提到 $releasever 这个变量，表示当前发行版的大版本号，但大家知道这个变量是在哪设置的吗？我 grep 了整个 etc 目录都没找到，还是看了 yum.conf 才知道的，是在 yum.conf 文件里 distroverpkg 选项定义的。但这个选项就很有问题：distroverpkg 和 releasever 名字不同，且看不出什么联系distroverpkg 的值，并不是明文，而是“redhat-release”。不知道大家看到这个会有什么想法，反正我是首先想到了 /etc/redhat-release 文件，但我错了。实际上指的是 redhat-release 这个RPM包。所谓“distroverpkg=redhat-release”的意思，其实是将 $releasever 设置为 redhat-release 这个RPM包的版本号. 小结：yum中的$releasever变量是取redhat-release-server rpm包的属性值( %{version})。[root@ldap01 ~]# rpm -q –qf %{version} redhat-release-server;echo6Server","link":"/2016/07/27/centosxia-yumzhong-releaseverhe-basearchde-qu-zhi/"},{"title":"Jmeter(一)：使用BlazeMeter为Jmeter录制脚本","text":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 导入脚本到Jmeter在Jmeter中”File-Open”导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。","link":"/2017/08/17/use_blazemeter_recodind_jmx/"},{"title":"iPhone/iPad 不越狱安装旧版程序","text":"前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 “虾米音乐” 的三次下载第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。","link":"/2017/11/17/iphone-ipad-install-oldversion-apps/"},{"title":"使用SoureceTree管理你的git项目","text":"Update update: Windows用户在初始化Souretree工具时，需要用到Atlassian ID，新建用户时需要加载google 验证码，这一步需要VPN的支持，请注意。 找到一个版本的SourceTree工具可以不需要以上验证也能使用，下载链接：SourceTreeSetup_1.6.14.exe 密码：c5l4 补充1 ：Git学习网站 猴子都能学会的git教程 常用 Git 命令清单 廖雪峰的git教程 Why Git is Better than X 补充2 ：利用Git协同开发 团队中的Git实践 Git 使用规范流程 Git分支管理模型 图解Git 1. 关于 SourceTreeSourceTree 是一款免费且同时支持Windows 和Mac 的git项目管理软件，本文旨在给大家介绍这款应用的基础使用，并用它来管理你的项目。 官网： https://www.sourcetreeapp.com/ 2. git帐号建立1. 新员工入职之后，你的公司邮箱内会收到一封来自Gitlab的邮件，如下图： 2. 点击邮件中的 “Click here to set your password”，设置gitlab登陆密码。 3. 登陆gitlab帐号，将会出现这个界面： 4. 设定个人信息： 5. sshKey5.1 在Linux和Mac上生成sshkey：123456789101112131415161718192021222324➜ ~ ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/Users/Alex/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /Users/Alex/.ssh/id_rsa.Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub.The key fingerprint is:SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-MacThe key's randomart image is:+---[RSA 2048]----+| ..oo. +=. || ... oo ..|| .. o.o.|| o . +E+|| S = **=|| = * .=BB|| * o oOO|| . +o*|| .oo|+----[SHA256]-----+➜ ~ cat ~/.ssh/id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac➜ ~ 5.2 在Windows上生成sshkey：因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址步骤如下： 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 5.3 上传sshkey： 6. 回到 dashboard ，点击项目名称进入详情： 7. 使用souretree将项目从git服务器clone到本地7.1 安装souretree 软件 ［略］7.2 clone项目到本地 8. 进入项目工作台： 9. 关于sourcetree工具的使用，下面是一些git操作的释疑。 检出仓库: 将在本地创建一个git仓库的克隆版本 工作流: 本地仓库由 git 维护的三棵“树”组成。第一个是 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存改动；最后是 HEAD，指向最近一次提交后的结果。 提交：可以计划改动（把它们添加到缓存区),将改动提交到了 HEAD，但是还没到提交到远端仓库。 拉取：从远端仓库拉取最新版本状态，特别是在其他人员有所改动之后。 推送：改动现在已经在本地仓库的 HEAD 中了。这时可以使用它将这些改动提交到远端仓库。 分支：分支是用来将特性开发分离出来的。在创建仓库的时候，master 是“默认的”。创建分支将可以从主线开发上分离开来，然后在不影响主线的同时继续工作，完成后再将它们合并到主分支上。 合并： 将分支功能并入主分支。","link":"/2016/04/20/git01-sourcetree/"},{"title":"使用mosh代替ssh连接服务器","text":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 Mosh 主页1. 安装配置需要在服务端和客户端同时安装Mosh：123＃ 以centos 6.x 为例：[user@host ~]$ sudo yum install -y epel-release[user@host ~]$ sudo yum install -y mosh 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可1234[user@host ~]$ mosh user@host# 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数：[user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 12345678910111213141516# 创建临时key[user@host ~]$ mosh-serverMOSH CONNECT 53371 asdAADfdse234LSDSdIbowmosh-server (mosh 1.2.4)Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.[mosh-server detached, pid = 27290]# 然后在client定义MOSH_KEY[user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow# 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式# 使用临时key连接服务器[user@host ~]$ mosh-client 10.0.2.4 53371","link":"/2016/06/16/shi-yong-moshdai-ti-sshlian-jie-fu-wu-qi/"},{"title":"使用国内pypi源加速pip安装","text":"在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini12[global]index-url = http://pypi.douban.com/simple Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建12[global]index-url = http://pypi.douban.com/simple 修改easy_install 源编辑 ~/.pydistutils.cfg12[global]index-url = http://pypi.douban.com/simple 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点1pip -i http://pypi.douban.com/simple install boto3","link":"/2017/05/23/fix-pip-install-timeout-inChina/"},{"title":"四阶魔方特殊情况之处理","text":"在还原高阶魔方(四阶及以上)时，采用的处理方法是，将魔方降级为三阶魔方，然后按照三阶魔方的技巧进行还原即可，但是在还原四阶魔方时会遇到2个不可能出现在三阶魔方的特殊情况，下面是针对这两个特殊情况的公式。 注意，本文不是四阶魔方的还原教程。 特殊情况：顶层黄色无法形成“十”或“L”1.手势：黄色面朝上2.右边两层旋转180’（这时应该黄色面有右面两层为白色）3.后面一层旋转180’4.上面一层旋转180’5.左边两层靠近你身体旋转90’6.上面一层旋转180’7.右面两层靠近你身体旋转90’8.上面一层旋转180’9.右面两层远离你身体旋转90’10.上面一层旋转180’11.前面一层旋转180’12.右面两层远离你身体旋转90’13.前面一层旋转180’14.左边两层远离你身体旋转90’15.后面一层旋转180’16.右边两层旋转180’ 特殊情况：最后四对棱角只有两对还原1.黄色面已经还原的情况下，黄色面朝上2.右面夹层旋转180’3.上面一层旋转180‘4.右面夹层旋转180’5.上面两层旋转180’6.右面夹层旋转180’7.上面两层旋转180’","link":"/2017/03/04/four-magric-spaciew/"},{"title":"在Linux终端使用SSR服务实现科学上网","text":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 &amp; Ubuntu 16.04.3。 ssr 代理服务下载123456# 需要本地git 环境yum install -y gitgit clone https://github.com/SAMZONG/gfwlist2privoxy.gitcd gfwlist2privoxy/mv ssr /usr/local/binchmod +x /usr/local/bin/ssr 安装配置123456789101112131415161718192021222324252627282930313233[root@localhost ~]# ssr installCloning into '/usr/local/share/shadowsocksr'...remote: Counting objects: 5490, done.remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done.Resolving deltas: 100% (3799/3799), done.[root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json{ \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false} 启动/关闭12ssr startssr stop 卸载1ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 Privoxy 配置首先，需要安装privoxy CentOS 7.412yum install -y epel-releaseyum install -y privoxy Ubuntu 16.041apt install -y privoxy 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 12345678910# 添加本地ssr服务到配置文件echo 'forward-socks5 / 127.0.0.1:1080 .' &gt;&gt; /etc/privoxy/config# Privoxy 默认监听端口是是8118export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118export no_proxy=localhost# 启动服务systemctl start privoxy.service PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 123456789101112131415161718192021[root@localhost ~]# cd gfwlist2privoxy/[root@localhost gfwlist2privoxy]# lsgfw.action gfwlist2privoxy README.md ssr[root@localhost gfwlist2privoxy]# bash gfwlist2privoxyproxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的{+forward-override{forward-socks5 127.0.0.1:1080 .}}=================================================================\"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\"[root@localhost ~]# cp -af gfw.action /etc/privoxy/[root@localhost ~]# echo 'actionsfile gfw.action' &gt;&gt; /etc/privoxy/config# Privoxy 默认监听端口是是8118export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118export no_proxy=localhost# 启动服务systemctl start privoxy.service proxy 环境变量123456789# privoxy默认监听端口为8118export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118export no_proxy=localhost# no_proxy是不经过privoxy代理的地址# 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开# 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\"# 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 代理测试123456789101112131415# 访问各大网站，如果都有网页源码输出说明代理没问题curl -sL www.baidu.comcurl -sL www.google.comcurl -sL www.google.com.hkcurl -sL www.google.co.jpcurl -sL www.youtube.comcurl -sL mail.google.comcurl -sL facebook.comcurl -sL twitter.comcurl -sL www.wikipedia.org# 获取当前 IP 地址# 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP# 如果使用 privoxy gfwlist模式，则应该显示本地公网 IPcurl -sL ip.chinaz.com/getip.aspx 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager 12345678910111213141516171819202122232425262728#!/bin/bash# Author Samzong.lucase $1 in start) ssr start &amp;&gt; /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"localhost, ip.cn, chinaz.com\" ;; stop) unset http_proxy https_proxy no_proxy systemctl stop privoxy.service ssr stop &amp;&gt; /var/log/ssr-log.log ;; autostart) echo \"ssr start\" &gt;&gt; /etc/rc.local systemctl enable privoxy.service echo \"http_proxy=http://127.0.0.1:8118\" &gt;&gt; /etc/bashrc echo \"https_proxy=http://127.0.0.1:8118\" &gt;&gt; /etc/bashrc echo \"no_proxy='localhost, ip.cn, chinaz.com'\" &gt;&gt; /etc/bashrc ;; *) echo \"usage: source $0 start|stop|autostart\" exit 1 ;;esac 使用1234567891011mv gfwlist2privoxy/ssr_manager /usr/local/binchmod +x ssr_manager# 启动服务ssr_manager start# 关闭服务ssr_manager stop # 添加开机自启动ssr_manager autostart 参考链接 https://www.zfl9.com/ss-local.html https://www.djangoz.com/2017/08/16/linux_setup_ssr/","link":"/2017/11/17/howto-use-ssr-on-linux-terminal/"},{"title":"在CentOS中配置 SFTP 环境","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做运维工作的，应该经常会碰到这样的问题，需要新上一个web项目，需要上传文件到服务器上，解决方法有很多种，常见的如sftp和ftp，今天讲如何使用sftp让系统用户用户上传项目的权限，并且实现chroot和无法使用ssh登录到系统。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SFTP是指SSH文件传输协议（SSH File Transfer protocol）或安全文件传输协议（Secure File Transfer Protocol），它提供了可信数据流下的文件访问、文件传输以及文件管理功能。当我们为SFTP配置chroot环境后，只有被许可的用户可以访问，并被限制到他们的家目录中，换言之：被许可的用户将处于牢笼环境中，在此环境中它们甚至不能切换它们的目录。 1. 测试环境 MacBook Pro 15-inch i7 16GB VMware Fushion 8 Pro Transmit （ SFTP tools for Mac ） 12345[root@test ~]# cat /etc/issueCentOS release 6.6 (Final)Kernel \\r on an \\m[root@test ~]# rpm -qa | grep openssh-serveropenssh-server-5.3p1-104.el6.i686 2. 实验步骤2.1 增加一个sftpusers用户组1[root@test ~]# groupadd sftpusers 2.2 创建一个用户user01，并分配给sftpusers用户组1[root@test ~]# useradd -g sftpusers user01 2.3 修改用户家目录及指定不能登录shell12[root@test ~]# mkdir /sftp/[root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 2.4 给用户创建密码（注意密码不明文显示）12345678[root@test ~]# passwd user01Changing password for user user01.New password:BAD PASSWORD: it is too simplistic/systematicBAD PASSWORD: is too simpleRetype new password:passwd: all authentication tokens updated successfully.[root@test ~]# 2.5 修改ssh的配置文件，如下设置1234567891011121314[root@test ~]# ll /etc/ssh/sshd_config-rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config[root@test ~]# vim /etc/ssh/sshd_config# line 132#Subsystem sftp /usr/libexec/openssh/sftp-server #注释Subsystem sftp internal-sftp #修改为internal-sftp# add this lines at the end of fileMatch Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 2.6 重启ssh服务123[root@test ~]# /etc/init.d/sshd restartStopping sshd: [ OK ]Starting sshd: [ OK ] 2.7 设置用户家目录权限,(注意权限不能大于0755)123[root@test ~]# chmod 0755 /sftp/user01/[root@test ~]# chown root /sftp/user01/[root@test ~]# chgrp -R sftpusers /sftp/user01/ 2.8 关于上传,根目录无法上传文件。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 12[root@test ~]# mkdir /sftp/user01/upload[root@test ~]# chown user01:sftpusers /sftp/user01/upload/ 3. 测试验证3.1 Linux 登录测试1234567891011121314151617181920212223[root@test ~]# su - user01This account is currently not available. #su - 切换失败[root@test ~]# cat /etc/passwd | tail -1user01:x:500:500::/sftp/user01:/sbin/nologin[root@test ~]# ssh user01@localhostThe authenticity of host 'localhost (::1)' can't be established.RSA key fingerprint is f3:fc:31:dc:7d:16:d5:ad:8c:bc:eb:69:8f:b2:0b:c9.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'localhost' (RSA) to the list of known hosts.user01@localhost's password:This service allows sftp connections only. #ssh登录也失败，ssh设置成功Connection to localhost closed.[root@test ~]# sftp user01@localhostConnecting to localhost...user01@localhost's password:sftp&gt; lsuploadsftp&gt; pwdRemote working directory: /sftp&gt; 3.2 SFTP 工具测试&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我这里使用的是Mac，但是传统的文件传输工具都差不多，Windows下有Winscp、Xftp等。","link":"/2016/03/24/how-set-sftp-on-centos/"},{"title":"在网页中插入歌曲","text":"纠正下，在下面博文中的错误，关于单曲不能生成外链的问题，现已经纠正。 我试过百度音乐、QQ音乐、虾米音乐和网易云音乐，目前只有网易云音乐有此功能，先在网易云音乐选择歌曲即可： 分享单曲 分享专辑，歌单 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选定歌单之后，在歌单页面有个生成外链播放器的按钮 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后，根据页面提示信息，生成你要的html代码，并嵌入到你的页面之中。","link":"/2016/08/01/insert-music/"},{"title":"如何在CentOS 6 安装更高版本的PHP","text":"CentOS 6 默认安装的PHP 版本是5.3， 但现在很多应用对于LAMP中，PHP的版本最低5.4，所以本篇文章的主要内容是，如何升级PHP5.3到5.4以及更高版本 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1. 安装Remi源12345# 因为remi依赖epel源仓库，所有我们要先安装它。[root@visionet8 ~]# yum install -y epel-release[root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm[root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 2. 我们看下Remi的的yum配置文件1234567891011121314151617181920212223242526272829# Repository: http://rpms.remirepo.net/# Blog: http://blog.remirepo.net/# Forum: http://forum.remirepo.net/[remi]name=Remi's RPM repository for Enterprise Linux 6 - $basearchbaseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/#mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirrorenabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi[remi-php55]name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch#baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror# NOTICE: common dependencies are in \"remi-safe\"enabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi[remi-php56]name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch#baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror# NOTICE: common dependencies are in \"remi-safe\"enabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112[root@visionet8 html]# yum update -y php*Failed to set locale, defaulting to CLoaded plugins: fastestmirror, refresh-packagekit, securityLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.comremi | 2.9 kB 00:00remi/primary_db | 1.6 MB 00:05Setting up Update ProcessResolving Dependencies--&gt; Running transaction check---&gt; Package php.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php.x86_64 0:5.4.45-12.el6.remi will be an update---&gt; Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update---&gt; Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update---&gt; Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update--&gt; Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64---&gt; Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated---&gt; Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update---&gt; Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update---&gt; Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated---&gt; Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update--&gt; Running transaction check---&gt; Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================== Package Arch Version Repository Size==========================================================================================================Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 kInstalling for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 kTransaction Summary==========================================================================================================Install 1 Package(s)Upgrade 7 Package(s)Total download size: 8.5 MDownloading Packages:(1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07(2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06(3/8): php-common-5.4.45-12.el6.remi.x86_64.rpm | 968 kB 00:02(4/8): php-gd-5.4.45-12.el6.remi.x86_64.rpm | 152 kB 00:01(5/8): php-mcrypt-5.4.45-12.el6.remi.x86_64.rpm | 60 kB 00:00(6/8): php-mysql-5.4.45-12.el6.remi.x86_64.rpm | 145 kB 00:00(7/8): php-pdo-5.4.45-12.el6.remi.x86_64.rpm | 129 kB 00:01(8/8): t1lib-5.1.2-6.el6_2.1.x86_64.rpm | 160 kB 00:00----------------------------------------------------------------------------------------------------------Total 338 kB/s | 8.5 MB 00:25Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning TransactionWarning: RPMDB altered outside of yum. Updating : php-common-5.4.45-12.el6.remi.x86_64 1/15 Updating : php-cli-5.4.45-12.el6.remi.x86_64 2/15 Updating : php-pdo-5.4.45-12.el6.remi.x86_64 3/15 Installing : t1lib-5.1.2-6.el6_2.1.x86_64 4/15 Updating : php-gd-5.4.45-12.el6.remi.x86_64 5/15 Updating : php-mysql-5.4.45-12.el6.remi.x86_64 6/15 Updating : php-5.4.45-12.el6.remi.x86_64 7/15 Updating : php-mcrypt-5.4.45-12.el6.remi.x86_64 8/15 Cleanup : php-5.3.3-48.el6_8.x86_64 9/15 Cleanup : php-mysql-5.3.3-48.el6_8.x86_64 10/15 Cleanup : php-pdo-5.3.3-48.el6_8.x86_64 11/15 Cleanup : php-cli-5.3.3-48.el6_8.x86_64 12/15 Cleanup : php-gd-5.3.3-48.el6_8.x86_64 13/15 Cleanup : php-mcrypt-5.3.3-4.el6.x86_64 14/15 Cleanup : php-common-5.3.3-48.el6_8.x86_64 15/15 Verifying : php-mcrypt-5.4.45-12.el6.remi.x86_64 1/15 Verifying : t1lib-5.1.2-6.el6_2.1.x86_64 2/15 Verifying : php-common-5.4.45-12.el6.remi.x86_64 3/15 Verifying : php-gd-5.4.45-12.el6.remi.x86_64 4/15 Verifying : php-cli-5.4.45-12.el6.remi.x86_64 5/15 Verifying : php-pdo-5.4.45-12.el6.remi.x86_64 6/15 Verifying : php-mysql-5.4.45-12.el6.remi.x86_64 7/15 Verifying : php-5.4.45-12.el6.remi.x86_64 8/15 Verifying : php-5.3.3-48.el6_8.x86_64 9/15 Verifying : php-gd-5.3.3-48.el6_8.x86_64 10/15 Verifying : php-cli-5.3.3-48.el6_8.x86_64 11/15 Verifying : php-pdo-5.3.3-48.el6_8.x86_64 12/15 Verifying : php-common-5.3.3-48.el6_8.x86_64 13/15 Verifying : php-mysql-5.3.3-48.el6_8.x86_64 14/15 Verifying : php-mcrypt-5.3.3-4.el6.x86_64 15/15Dependency Installed: t1lib.x86_64 0:5.1.2-6.el6_2.1Updated: php.x86_64 0:5.4.45-12.el6.remi php-cli.x86_64 0:5.4.45-12.el6.remi php-common.x86_64 0:5.4.45-12.el6.remi php-gd.x86_64 0:5.4.45-12.el6.remi php-mcrypt.x86_64 0:5.4.45-12.el6.remi php-mysql.x86_64 0:5.4.45-12.el6.remi php-pdo.x86_64 0:5.4.45-12.el6.remiComplete! 3. 测试：1234[root@visionet8 html]# php -vPHP 5.4.45 (cli) (built: Sep 19 2016 15:31:07)Copyright (c) 1997-2014 The PHP GroupZend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies 4. php 5.5 和php5.6 若要升级到5.5 或 5.6，根据remi源的配置文件，将php5.5的enable参数设置为1，并将默认enable修改为0,然后yum update php*即可。 5. php 7 安装完成之后发现, 在安装remi源之后，在/etc/yum.repos.d除了remi.repo之外，还有remi-php70.repo和remi-php71.repo，测试下，如果要升级到php7，可以打开相应源仓库的配置文件，之后升级即可。 以上功能在升级时，要考虑其他组件的版本兼容性，不要盲目升级。","link":"/2016/04/01/php54-centos6/"},{"title":"每日备份MySQL单表数据","text":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 1. mysqldump导出但张表的表结构及数据1mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName &gt; tbName.sql 2. 新增数据库，专做临时每日数据备份库12# loginTo your DBservermysql&gt; create database bakdbName character set utf8; 3. 导入该表数据到新增数据库内1mysql -h dbServer -P dbServerPort -u db_user -p bakdbName &lt; tbName.sql 4 . 重命名导入的表名1mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 5. 编写脚本1234567891011121314151617181920212223242526272829303132333435363738394041[root@testServer01 ~]# cat /usr/local/bin/bakTable.sh#!/bin/bash#Create by SAMZONGDATE=`date +%Y%m%d`TMPDIR=/tmp/baksql# modify your DB configureDBSERVER1=localhostDBSERVER1_PORT=3306DBSERVER1_USER=rootDBSERVER1_PASSWORD=passwordMASTER_DBNAME=zabbixMASTER_TBNAME=usersDBSERVER2=localhostDBSERVER2_PORT=3306DBSERVER2_USER=rootDBSERVER2_PASSWORD=passwordBAKDBNAME=z3# creat tmp folderif [ ! -d $TMPDIR ]; then mkdir $TMPDIRfi# dump tbNamemysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME &gt; $TMPDIR/$MASTER_TBNAME.sql# insert tbNAME to bakdbNameif [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME &lt; $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fifi 6. 添加到Linux计划任务100 00 * * * /usr/local/bin/bakTable.sh","link":"/2017/01/15/sdertfvdsrt/"},{"title":"理解 Linux 的硬链接与软链接","text":"从inode了解Linux文件系统 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 12345678910111213141516171819 / 根目录├── bin 存放用户二进制文件├── boot 存放内核引导配置文件├── dev 存放设备文件├── etc 存放系统配置文件├── home 用户主目录├── lib 动态共享库├── lost+found 文件系统恢复时的恢复文件├── media 可卸载存储介质挂载点├── mnt 文件系统临时挂载点├── opt 附加的应用程序包├── proc 系统内存的映射目录，提供内核与进程信息├── root root 用户主目录├── sbin 存放系统二进制文件├── srv 存放服务相关数据├── sys sys 虚拟文件系统挂载点├── tmp 存放临时文件├── usr 存放用户应用程序└── var 存放邮件、系统日志等变化文件 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 1234567int fd;struct input_event ie;fd = open(\"/dev/input/event5\", O_RDONLY);read(fd, &amp;ie, sizeof(struct input_event));printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value);close(fd); 硬链接与软链接的联系与区别&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 1234567891011# stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ...// 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。12link oldfile newfileln oldfile newfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建；* 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 123456789101112131415161718192021222324252627282930313233# ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" &gt; old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =&gt; `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3.jpg、sync 及 123.txt 并无关联，却有着相同的 inode 号），因此硬链接创建时不可跨文件系统。设备文件目录 /dev 使用的文件系统是 devtmpfs，而 /root（与根目录 / 一致）使用的是磁盘文件系统 ext4。清单 5.展示了使用命令 df 查看当前系统中挂载的文件系统类型、各文件系统 inode 使用情况及文件系统挂载点。 清单 5. 查找有相同 inode 号的文件 1234567891011121314# df -i --print-type Filesystem Type Inodes IUsed IFree IUse% Mounted on /dev/sda7 ext4 3147760 283483 2864277 10% / udev devtmpfs 496088 553 495535 1% /dev tmpfs tmpfs 499006 491 498515 1% /run none tmpfs 499006 3 499003 1% /run/lock none tmpfs 499006 15 498991 1% /run/shm /dev/sda6 fuseblk 74383900 4786 74379114 1% /media/DiskE /dev/sda8 fuseblk 29524592 19939 29504653 1% /media/DiskF # find / -inum 1114 /media/DiskE/Pictures/t3.jpg /media/DiskF/123.txt /bin/sync&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;值得一提的是，Linux 系统存在 inode 号被用完但磁盘空间还有剩余的情况。我们创建一个 5M 大小的 ext4 类型的 mo.img 文件，并将其挂载至目录 /mnt。然后我们使用一个 shell 脚本将挂载在 /mnt 下 ext4 文件系统的 indoe 耗尽（见清单 6.）。 清单 6. 测试文件系统 inode 耗尽但仍有磁盘空间的情景 1234567891011121314151617181920212223242526272829303132333435# dd if=/dev/zero of=mo.img bs=5120k count=1# ls -lh mo.img-rw-r--r-- 1 root root 5.0M Sep 1 17:54 mo.img# mkfs -t ext4 -F ./mo.img...OS type: LinuxBlock size=1024 (log=0)Fragment size=1024 (log=0)Stride=0 blocks, Stripe width=0 blocks1280 inodes, 5120 blocks256 blocks (5.00%) reserved for the super user......Writing superblocks and filesystem accounting information: done# mount -o loop ./mo.img /mnt# cat /mnt/inode_test.sh#!/bin/bashfor ((i = 1; ; i++))do if [ $? -eq 0 ]; then echo \"This is file_$i\" &gt; file_$i else exit 0 fidone# ./inode_test.sh./inode_test.sh: line 6: file_1269: No space left on device# df -iT /mnt/; du -sh /mnt/Filesystem Type Inodes IUsed IFree IUse% Mounted on/dev/loop0 ext4 1280 1280 0 100% /mnt1.3M /mnt/ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;硬链接不能对目录创建是受限于文件系统的设计（见 清单 4.对目录创建硬链接将失败）。现 Linux 文件系统中的目录均隐藏了两个个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的 inode 号可知其实这两目录就是两个硬链接（注意目录 /mnt/lost+found/ 的 inode 号）。若系统允许对目录创建硬链接，则会产生目录环。 1234567891011121314# ls -aliF /mnt/lost+foundtotal 4411 drwx------ 2 root root 12288 Sep 1 17:54 ./2 drwxr-xr-x 3 root root 31744 Sep 1 17:57 ../# stat /mnt/lost+found/ File: `/mnt/lost+found/' Size: 12288 Blocks: 24 IO Block: 1024 directoryDevice: 700h/1792d Inode: 11 Links: 2Access: (0700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)Access: 2012-09-01 17:57:17.000000000 +0800Modify: 2012-09-01 17:54:49.000000000 +0800Change: 2012-09-01 17:54:49.000000000 +0800Birth: - &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块（见 图 2.）。因此软链接的创建与使用没有类似硬链接的诸多限制： 软链接有自己的文件属性及权限等； 可对不存在的文件或目录创建软链接； 软链接可交叉文件系统； 软链接可对文件或目录创建； 创建软链接时，链接计数 i_nlink 不会增加； 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。 图 2. 软链接的访问 清单 7. 软链接特性展示 12345678910111213141516171819202122232425262728# ls -li total 0 // 可对不存在的文件创建软链接 # ln -s old.file soft.link # ls -liF total 0 789467 lrwxrwxrwx 1 root root 8 Sep 1 18:00 soft.link -&gt; old.file // 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接 # cat soft.link cat: soft.link: No such file or directory // 创建被指向的文件 old.file，soft.link 恢复成正常的软链接 # echo \"This is an original file_A\" &gt;&gt; old.file # cat soft.link This is an original file_A // 对不存在的目录创建软链接 # ln -s old.dir soft.link.dir # mkdir -p old.dir/test # tree . -F --inodes .├── [ 789497] old.dir/│ └── [ 789498] test/├── [ 789495] old.file├── [ 789495] soft.link -&gt; old.file└── [ 789497] soft.link.dir -&gt; old.dir/ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然软链接的用户数据也可以是另一个软链接的路径，其解析过程是递归的。但需注意：软链接创建时原文件的路径指向使用绝对路径较好。使用相对路径创建的软链接被移动后该软链接文件将成为一个死链接（如下所示的软链接 a 使用了相对路径，因此不宜被移动），因为链接数据块中记录的亦是相对路径指向。 12345$ ls -litotal 2136656627 lrwxrwxrwx 1 harris harris 8 Sep 1 14:37 a -&gt; data.txt656662 lrwxrwxrwx 1 harris harris 1 Sep 1 14:37 b -&gt; a656228 -rw------- 1 harris harris 2186738 Sep 1 14:37 data.txt 6 链接相关的命令&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Linux 中查看当前系统已挂着的文件系统类型，除上述使用的命令 df，还可使用命令 mount 或查看文件 /proc/mounts。 1234567# mount/dev/sda7 on / type ext4 (rw,errors=remount-ro)proc on /proc type proc (rw,noexec,nosuid,nodev)sysfs on /sys type sysfs (rw,noexec,nosuid,nodev)......none on /run/shm type tmpfs (rw,nosuid,nodev) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命令 ls 或 stat 可帮助我们区分软链接与其他文件并查看文件 inode 号，但较好的方式还是使用 find 命令，其不仅可查找某文件的软链接，还可以用于查找相同 inode 的所有硬链接。（见 清单 8.） 清单 8. 使用命令 find 查找软链接与硬链接 12345678910111213141516171819202122// 查找在路径 /home 下的文件 data.txt 的软链接 # find /home -lname data.txt /home/harris/debug/test2/a // 查看路径 /home 有相同 inode 的所有硬链接 # find /home -samefile /home/harris/debug/test3/old.file /home/harris/debug/test3/hard.link /home/harris/debug/test3/old.file # find /home -inum 660650 /home/harris/debug/test3/hard.link /home/harris/debug/test3/old.file // 列出路径 /home/harris/debug/ 下的所有软链接文件 # find /home/harris/debug/ -type l -ls 656662 0 lrwxrwxrwx 1 harris harris 1 Sep 1 14:37 /home/harris/debug/test2/b -&gt; a 656627 0 lrwxrwxrwx 1 harris harris 8 Sep 1 14:37 /home/harris/debug/test2/a -&gt; data.txt 789467 0 lrwxrwxrwx 1 root root 8 Sep 1 18:00 /home/harris/debug/test/soft.link -&gt; old.file 789496 0 lrwxrwxrwx 1 root root 7 Sep 1 18:01 /home/harris/debug/test/soft.link.dir -&gt; old.dir &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统根据磁盘的大小默认设定了 inode 的值（见清单 9.），如若必要，可在格式文件系统前对该值进行修改。如键入命令 mkfs -t ext4 -I 512/dev/sda4，将使磁盘设备 /dev/sda4 格式成 inode 大小是 512 字节的 ext4 文件系统。 清单 9. 查看系统的 inode 值 1234567// 查看磁盘分区 /dev/sda7 上的 inode 值# dumpe2fs -h /dev/sda7 | grep \"Inode size\"dumpe2fs 1.42 (29-Nov-2011)Inode size: 256# tune2fs -l /dev/sda7 | grep \"Inode size\"Inode size: 256 Linux VFS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux 有着极其丰富的文件系统，大体上可分如下几类： 网络文件系统，如 nfs、cifs 等； 磁盘文件系统，如 ext4、ext3 等； 特殊文件系统，如 proc、sysfs、ramfs、tmpfs 等。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实现以上这些文件系统并在 Linux 下共存的基础就是 Linux VFS（Virtual File System 又称 Virtual Filesystem Switch），即虚拟文件系统。VFS 作为一个通用的文件系统，抽象了文件系统的四个基本概念：文件、目录项 (dentry)、索引节点 (inode) 及挂载点，其在内核中为用户空间层的文件系统提供了相关的接口（见 图 3.所示 VFS 在 Linux 系统的架构）。VFS 实现了 open()、read() 等系统调并使得 cp 等用户空间程序可跨文件系统。VFS 真正实现了上述内容中：在 Linux 中除进程之外一切皆是文件。 图 3. VFS 在系统中的架构 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux VFS 存在四个基本对象：超级块对象 (superblock object)、索引节点对象 (inode object)、目录项对象 (dentry object) 及文件对象 (file object)。超级块对象代表一个已安装的文件系统；索引节点对象代表一个文件；目录项对象代表一个目录项，如设备文件 event5 在路径 /dev/input/event5 中，其存在四个目录项对象：/ 、dev/ 、input/ 及 event5。文件对象代表由进程打开的文件。这四个对象与进程及磁盘文件间的关系如图 4. 所示，其中 d_inode 即为硬链接。为文件路径的快速解析，Linux VFS 设计了目录项缓存（Directory Entry Cache，即 dcache）。 图 4. VFS 的对象之间的处理 ### Linux 文件系统中的 inode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Linux 中，索引节点结构存在于系统内存及磁盘，其可区分成 VFS inode 与实际文件系统的 inode。VFS inode 作为实际文件系统中 inode 的抽象，定义了结构体 inode 与其相关的操作 inode_operations（见内核源码 include/linux/fs.h）。 清单 10. VFS 中的 inode 与 inode_operations 结构体 12345678910111213141516171819struct inode { ... const struct inode_operations *i_op; // 索引节点操作 unsigned long i_ino; // 索引节点号 atomic_t i_count; // 引用计数器 unsigned int i_nlink; // 硬链接数目 ... } struct inode_operations { ... int (*create) (struct inode *,struct dentry *,int, struct nameidata *); int (*link) (struct dentry *,struct inode *,struct dentry *); int (*unlink) (struct inode *,struct dentry *); int (*symlink) (struct inode *,struct dentry *,const char *); int (*mkdir) (struct inode *,struct dentry *,int); int (*rmdir) (struct inode *,struct dentry *); ... } &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如清单 10. 所见，每个文件存在两个计数器：i_count 与 i_nlink，即引用计数与硬链接计数。结构体 inode 中的 i_count 用于跟踪文件被访问的数量，而 i_nlink 则是上述使用 ls -l 等命令查看到的文件硬链接数。或者说 i_count 跟踪文件在内存中的情况，而 i_nlink 则是磁盘计数器。当文件被删除时，则 i_nlink 先被设置成 0。文件的这两个计数器使得 Linux 系统升级或程序更新变的容易。系统或程序可在不关闭的情况下（即文件 i_count 不为 0），将新文件以同样的文件名进行替换，新文件有自己的 inode 及 data block，旧文件会在相关进程关闭后被完整的删除。 清单 11. 文件系统 ext4 中的 inode 12345678910struct ext4_inode { ... __le32 i_atime; // 文件内容最后一次访问时间 __le32 i_ctime; // inode 修改时间 __le32 i_mtime; // 文件内容最后一次修改时间 __le16 i_links_count; // 硬链接计数 __le32 i_blocks_lo; // Block 计数 __le32 i_block[EXT4_N_BLOCKS]; // 指向具体的 block ... }; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;清单 11. 展示的是文件系统 ext4 中对 inode 的定义（见内核源码 fs/ext4/ext4.h）。其中三个时间的定义可对应与命令 stat 中查看到三个时间。i_links_count 不仅用于文件的硬链接计数，也用于目录的子目录数跟踪（目录并不显示硬链接数，命令 ls -ld 查看到的是子目录数）。由于文件系统 ext3 对 i_links_count 有限制，其最大数为：32000（该限制在 ext4 中被取消）。尝试在 ext3 文件系统上验证目录子目录及普通文件硬链接最大数可见 清单 12.的错误信息。因此实际文件系统的 inode 之间及与 VFS inode 相较是有差异的。 清单 12. 文件系统 ext3 中 i_links_count 的限制 12345# ./dirtest.shmkdir: cannot create directory `dir_31999': Too many links# ./linkcount.shln: failed to create hard link to `old.file': Too many links 结束语&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文最初描述了 Linux 系统中文件与目录被引入的原因及 Linux 处理文件的方式，然后我们通过区分硬链接与软链接的不同，了解 Linux 中的索引节点的相关知识，并以此引出了 inode 的结构体。索引节点结构体存在在于 Linux VFS 以及实际文件系统中，VFS 作为通用文件模型是 Linux 中“一切皆是文件”实现的基础。文章并未深入 Linux VFS，也没涉及实际文件系统的实现，文章只是从 inode 了解 Linux 的文件系统的相关内容。若想深入文件系统的内容，查看内核文档 Documentation/filesystems/ 是一个不错的方式。","link":"/2016/03/18/lfs/"},{"title":"bypy-百度网盘Python客户端","text":"最近在GitHub上发现一个有趣的项目，百度网盘Python客户端(bypy)，主要使用在Linux命令行下，这样很大的一个好处是可以利用到百度云盘2TB的存储空间(如果你是会员有6TB)；你可以在任何服务器上，利用自动化脚本实现一些数据文件、日志文件等等备份操作，同时也提供丰富的文件列表、上传、下载、对比、同步以及批量操作等。 虽然百度网盘Python客户端提供很大的便利，但是我强烈不建议将一些重要数据放到百度云盘 实验目的数据库备份文件自动上传到百度网盘 环境依赖 Python 2.7 or 3.0 以上 Encoding UTF-8 Python 环境首先使用python -V检查你的Python版本，如果你的版本是2.7或以上，那么就不需要做任何操作，可以直接安装bypy，但是如果你像我一样多数是CentOS 6.x 那么就需要先升级Python版本。我这里是将Python升级到2.7。 Install Python 2.71234567891011121314151617181920# Check current Python version➜ ~ python -VPython 2.6.6# Download python 2.7.13 or new packge.➜ ~ wget http://www.python.org/ftp/python/2.7.13/Python-2.7.13.tar.xz# Extract and change in➜ ~ tar xf Python-2.7.13.tar.xz➜ ~ cd Python-2.7.13# Run the configure:➜ Python-2.7.13 ./configure --prefix=/usr/local# Compile and install it:➜ Python-2.7.13 make &amp;&amp; make altinstall# Check Python Version➜ Python-2.7.13 python2.7 -VPython 2.7.13 虽然Python2.7已经安装成功了，但是默认的Python仍然是2.6版本，所以我们要替换默认Python命令指到2.7 12345# Update bin python to python2.7➜ ~ ll /usr/bin/python /usr/local/bin/python2.7➜ ~ ll /usr/bin/python-config /usr/local/bin/python2.7-config➜ ~ python -VPython 2.7.13 Can not use Yum ?因为yum必须要使用Python2.6 ，所以当升级成功之后，发现yum无法使用，这时我们要稍微修改下： 12345➜ ~ which-command yum/usr/bin/yum#Update frist line \"#!/usr/bin/python\" to \"#!/usr/bin/python2.6\"➜ ~ vim /usr/bin/yum 安装bypyInstall Setuptools &amp; requests12345➜ ~ wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gztar xf setuptools-1.4.2.tar.gz➜ ~ python setup.py install➜ ~ pip2.7 install requests Clone &amp; Install123➜ ~ git clone https://github.com/houtianze/bypy.git➜ ~ cd bypy➜ bypy git:(master) python setup.py install 如果安装失败，注意看报错，是否缺少Python依赖包，或者版本不对 基本操作在成功安装完成之后，以下需要注意： 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 123[root@localhost bypy]# bypy infoQuota: 6.103TBUsed: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list&amp;path=%2Fapps%2Fbypy 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 123[root@localhost bypy]# bypy list/apps/bypy ($t $f $s $m $d):D v6 0 2017-06-02, 10:28:41 创建文件夹1234[root@localhost ~]# bypy mkdir v6/bypy[root@localhost ~]# bypy list v6/apps/bypy/v6 ($t $f $s $m $d):D bypy 0 2017-06-02, 10:35:53 上传123456[root@localhost ~]# bypy upload bypy.tgz[root@localhost ~]# bypy list/apps/bypy ($t $f $s $m $d):D v6 0 2017-06-02, 10:28:41D v6_1 0 2017-06-02, 10:34:52F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 1234567891011121314151617181920212223242526[root@localhost ~]# bypy syncup ./bypy v6/bypy[root@localhost ~]# bypy list v6/bypy/apps/bypy/v6/bypy ($t $f $s $m $d):D .git 0 2017-06-02, 10:45:31D baidudoc 0 2017-06-02, 10:44:50D build 0 2017-06-02, 10:45:11D bypy 0 2017-06-02, 10:45:54D bypy.egg-info 0 2017-06-02, 10:45:00D dist 0 2017-06-02, 10:44:54D update 0 2017-06-02, 10:45:08F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7aF CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296eeF genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fbF MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4[root@localhost ~]# bypy syncup ./bypy v6/bypy[root@localhost ~]# 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 123[root@localhost ~]# bypy search release.shFound:F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 比较本地与百度网盘123456789101112131415161718192021# 先删除本地一个文件[root@localhost ~]# rm ./bypy/release.sh# 对比[root@localhost ~]# bypy compare v6/bypy ./bypy==== Same files ===F - MANIFEST.in... omit ...F - bypy/monkey.pyF - README.md==== Different files ======= Local only ======== Remote only ====F - release.shStatistics:--------------------------------Same: 131Different: 0Local only: 0Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） 数据库备份自动上传到百度网盘之前也写过很多关于Mysql备份的文章，如果要详细查看，请打开以下链接：分类MySQL 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# create back script.[root@localhost ~]# touch mysql_back.sh# add executable permissions[root@localhost ~]# chmod +x mysql_back.sh[root@localhost ~]# vim mysql_back.sh#!/bin/bash# # backup mysqldump file to baidu yunPan# filepath: /usr/local/bin/mysql_back.sh# Author: samzong#function upload_file(){ TIME=`date \"+%Y%m%d%H%M%S\"` folder=\"/mysqlbak\" filename=\"db_$TIME.sql\" filePath=$folder/$filename if [ ! -f $filePath ]; then echo \"[ERROR][\"`date +%Y-%m-%d' '%H:%M:%S`\"] $folder/$filename not found.\" else echo \"[INFO][\"`date +%Y-%m-%d' '%H:%M:%S`\"] $folder/$filename has been found. Start uploading ......\" bypy upload \"$filePath\" \"v6/mysql_backup/$filename\" echo \"[INFO][\"`date +%Y-%m-%d' '%H:%M:%S`\"] Uploading end.\" fi}# set TIME variableTIME=`date \"+%Y%m%d%H%M%S\"`# backup db ghost to /mysqlbak/mysqldump --single-transaction -h localhost -u ghost_backuser -pbackupPass ghost &gt; /mysqlbak/db_$TIME.sql# tar sql filetar czvf /mysqlbak/ghost_$TIME.sql.tgz /mysqlbak/ghost_$TIME.sql --remove-files# upload sql file to baidu yunPan.upload_file;# send mial to admin'mialif [ $? -eq 0 ]; then echo \"ghost SQL dump is successfully. At time: `date` \" | mail -s ghost-dump-successfully samzong.lu@gmail.comelse echo \" Error Error ghost SQL dump is Error. At time: `date` \" | mail -s ghost-dump-error samzong.lu@gmail.comfi 添加计划任务12 ~ crontab -e00 00 * * * sh /usr/local/bin/mysql_back.sh","link":"/2017/06/02/howto-install-bypy/"}],"tags":[{"name":"我给你讲个故事吧","slug":"我给你讲个故事吧","link":"/tags/我给你讲个故事吧/"},{"name":"似水年华","slug":"似水年华","link":"/tags/似水年华/"},{"name":"何余生","slug":"何余生","link":"/tags/何余生/"},{"name":"Azure","slug":"Azure","link":"/tags/Azure/"},{"name":" - CentOS 6 - Linux - CentOS","slug":"CentOS-6-Linux-CentOS","link":"/tags/CentOS-6-Linux-CentOS/"},{"name":"CentOS","slug":"CentOS","link":"/tags/CentOS/"},{"name":"Yum","slug":"Yum","link":"/tags/Yum/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"LVM","slug":"LVM","link":"/tags/LVM/"},{"name":"DenyHosts","slug":"DenyHosts","link":"/tags/DenyHosts/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Ghost","slug":"Ghost","link":"/tags/Ghost/"},{"name":"Piwik","slug":"Piwik","link":"/tags/Piwik/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"CloudStack","slug":"CloudStack","link":"/tags/CloudStack/"},{"name":"Fabric","slug":"Fabric","link":"/tags/Fabric/"},{"name":"Gitlab","slug":"Gitlab","link":"/tags/Gitlab/"},{"name":"KVM","slug":"KVM","link":"/tags/KVM/"},{"name":"LNMP","slug":"LNMP","link":"/tags/LNMP/"},{"name":"MongoDB","slug":"MongoDB","link":"/tags/MongoDB/"},{"name":"NextCloud","slug":"NextCloud","link":"/tags/NextCloud/"},{"name":"Openfire","slug":"Openfire","link":"/tags/Openfire/"},{"name":"PostgreSQL","slug":"PostgreSQL","link":"/tags/PostgreSQL/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Redmine","slug":"Redmine","link":"/tags/Redmine/"},{"name":"Zabbix","slug":"Zabbix","link":"/tags/Zabbix/"},{"name":"Tomcat","slug":"Tomcat","link":"/tags/Tomcat/"},{"name":"Python3","slug":"Python3","link":"/tags/Python3/"},{"name":"AliCloud","slug":"AliCloud","link":"/tags/AliCloud/"},{"name":"MariaDB","slug":"MariaDB","link":"/tags/MariaDB/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Zoomdata","slug":"Zoomdata","link":"/tags/Zoomdata/"},{"name":"Shadowsocks","slug":"Shadowsocks","link":"/tags/Shadowsocks/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Shell-Scripts","slug":"Shell-Scripts","link":"/tags/Shell-Scripts/"},{"name":" - OpenStack","slug":"OpenStack","link":"/tags/OpenStack/"},{"name":"Jmeter","slug":"Jmeter","link":"/tags/Jmeter/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"魔方","slug":"魔方","link":"/tags/魔方/"}],"categories":[{"name":"似水年华","slug":"似水年华","link":"/categories/似水年华/"},{"name":"来自知乎","slug":"来自知乎","link":"/categories/来自知乎/"},{"name":"我的微博","slug":"我的微博","link":"/categories/我的微博/"},{"name":"Azure","slug":"Azure","link":"/categories/Azure/"},{"name":"CentOS","slug":"CentOS","link":"/categories/CentOS/"},{"name":"Mac","slug":"Mac","link":"/categories/Mac/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"Ghost","slug":"Ghost","link":"/categories/Ghost/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"CloudStack","slug":"CloudStack","link":"/categories/CloudStack/"},{"name":"KVM","slug":"KVM","link":"/categories/KVM/"},{"name":"MongoDB","slug":"MongoDB","link":"/categories/MongoDB/"},{"name":"PostgreSQL","slug":"PostgreSQL","link":"/categories/PostgreSQL/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Zabbix","slug":"Zabbix","link":"/categories/Zabbix/"},{"name":"Tomcat","slug":"Tomcat","link":"/categories/Tomcat/"},{"name":"AliCloud","slug":"AliCloud","link":"/categories/AliCloud/"},{"name":"Redis","slug":"Redis","link":"/categories/Redis/"},{"name":"Shadowsocks","slug":"Shadowsocks","link":"/categories/Shadowsocks/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Shell","slug":"Shell","link":"/categories/Shell/"},{"name":"OpenStack","slug":"OpenStack","link":"/categories/OpenStack/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"Jmeter","slug":"Jmeter","link":"/categories/Jmeter/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"},{"name":"魔方","slug":"魔方","link":"/categories/魔方/"}]}